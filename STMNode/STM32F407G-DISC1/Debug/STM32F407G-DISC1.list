
STM32F407G-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008304  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a8  080084a8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b0  080084b0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b0  080084b0  000184b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080084b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000810  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af9d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c22  00000000  00000000  0003b05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  0003ec80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  0003fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244ad  00000000  00000000  00040d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017932  00000000  00000000  0006520d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb697  00000000  00000000  0007cb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001481d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048b0  00000000  00000000  0014822c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008474 	.word	0x08008474

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008474 	.word	0x08008474

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <getAutomaticSelfCalibration>:

#include "main.h"
#include "SCD41.h"
#include <stdio.h>

HAL_StatusTypeDef getAutomaticSelfCalibration(I2C_HandleTypeDef *hi2x, uint8_t *enabled) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t buffer[3];

	// FAIRLY CONFIDENT THIS IS WHAT CAUSES ERROR
	// Set buffer contents to getAutomaticSelfCalibration
	buffer[2] = 0x00;
 80004ca:	2300      	movs	r3, #0
 80004cc:	73bb      	strb	r3, [r7, #14]
	buffer[1] = 0x23;
 80004ce:	2323      	movs	r3, #35	; 0x23
 80004d0:	737b      	strb	r3, [r7, #13]
	buffer[0] = 0x13;
 80004d2:	2313      	movs	r3, #19
 80004d4:	733b      	strb	r3, [r7, #12]
	//ret = HAL_I2C_Master_Transmit(hi2x, (SCD41_I2C_ADDRESS<<1), buffer, sizeof(buffer), 100);
	//if (ret != HAL_OK) {
	//	return ret;
	//}
	// Read result of command from SCD41
	ret = HAL_I2C_Master_Receive(hi2x, (SCD41_I2C_ADDRESS<<1) | (0x01), buffer, sizeof(buffer), 1);
 80004d6:	f107 020c 	add.w	r2, r7, #12
 80004da:	2301      	movs	r3, #1
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2303      	movs	r3, #3
 80004e0:	21c5      	movs	r1, #197	; 0xc5
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f002 fe20 	bl	8003128 <HAL_I2C_Master_Receive>
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <getAutomaticSelfCalibration+0x36>
		return ret;
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	e003      	b.n	80004fe <getAutomaticSelfCalibration+0x3e>
	}

	enabled = &buffer[0];
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	603b      	str	r3, [r7, #0]
	return HAL_OK;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fbf9 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f817 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f913 	bl	8000740 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051a:	f000 f87d 	bl	8000618 <MX_I2C1_Init>
  MX_I2S3_Init();
 800051e:	f000 f8a9 	bl	8000674 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000522:	f000 f8d7 	bl	80006d4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000526:	f007 fb93 	bl	8007c50 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_StatusTypeDef ret;
	uint8_t *enabled = NULL;
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
	ret = getAutomaticSelfCalibration(&hi2c1, enabled);
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <main+0x38>)
 8000532:	f7ff ffc5 	bl	80004c0 <getAutomaticSelfCalibration>
 8000536:	4603      	mov	r3, r0
 8000538:	70fb      	strb	r3, [r7, #3]

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800053a:	f007 fbaf 	bl	8007c9c <MX_USB_HOST_Process>
  {
 800053e:	e7f4      	b.n	800052a <main+0x22>
 8000540:	200000bc 	.word	0x200000bc

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f007 febe 	bl	80082d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a27      	ldr	r2, [pc, #156]	; (8000610 <SystemClock_Config+0xcc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xd0>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c2:	2307      	movs	r3, #7
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fe6c 	bl	80042a8 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d6:	f000 f9b1 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2105      	movs	r1, #5
 80005f8:	4618      	mov	r0, r3
 80005fa:	f004 f8cd 	bl	8004798 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000604:	f000 f99a 	bl	800093c <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	; 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C1_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C1_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C1_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C1_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C1_Init+0x50>)
 8000656:	f002 fc23 	bl	8002ea0 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 f96c 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000bc 	.word	0x200000bc
 800066c:	40005400 	.word	0x40005400
 8000670:	000186a0 	.word	0x000186a0

08000674 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_I2S3_Init+0x54>)
 800067a:	4a14      	ldr	r2, [pc, #80]	; (80006cc <MX_I2S3_Init+0x58>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2S3_Init+0x54>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_I2S3_Init+0x54>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_I2S3_Init+0x54>)
 8000694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000698:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_I2S3_Init+0x54>)
 800069c:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <MX_I2S3_Init+0x5c>)
 800069e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_I2S3_Init+0x54>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_I2S3_Init+0x54>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_I2S3_Init+0x54>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_I2S3_Init+0x54>)
 80006b4:	f003 f958 	bl	8003968 <HAL_I2S_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006be:	f000 f93d 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000168 	.word	0x20000168
 80006cc:	40003c00 	.word	0x40003c00
 80006d0:	00017700 	.word	0x00017700

080006d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_SPI1_Init+0x64>)
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_SPI1_Init+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_SPI1_Init+0x64>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_SPI1_Init+0x64>)
 8000720:	220a      	movs	r2, #10
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_SPI1_Init+0x64>)
 8000726:	f004 fb5f 	bl	8004de8 <HAL_SPI_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 f904 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000110 	.word	0x20000110
 800073c:	40013000 	.word	0x40013000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	4b72      	ldr	r3, [pc, #456]	; (8000924 <MX_GPIO_Init+0x1e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a71      	ldr	r2, [pc, #452]	; (8000924 <MX_GPIO_Init+0x1e4>)
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b6f      	ldr	r3, [pc, #444]	; (8000924 <MX_GPIO_Init+0x1e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	4b6b      	ldr	r3, [pc, #428]	; (8000924 <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a6a      	ldr	r2, [pc, #424]	; (8000924 <MX_GPIO_Init+0x1e4>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b68      	ldr	r3, [pc, #416]	; (8000924 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b64      	ldr	r3, [pc, #400]	; (8000924 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a63      	ldr	r2, [pc, #396]	; (8000924 <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b61      	ldr	r3, [pc, #388]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b5d      	ldr	r3, [pc, #372]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a5c      	ldr	r2, [pc, #368]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b5a      	ldr	r3, [pc, #360]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b56      	ldr	r3, [pc, #344]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a55      	ldr	r2, [pc, #340]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b53      	ldr	r3, [pc, #332]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b4f      	ldr	r3, [pc, #316]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a4e      	ldr	r2, [pc, #312]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2108      	movs	r1, #8
 8000802:	4849      	ldr	r0, [pc, #292]	; (8000928 <MX_GPIO_Init+0x1e8>)
 8000804:	f000 fdc2 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	4847      	ldr	r0, [pc, #284]	; (800092c <MX_GPIO_Init+0x1ec>)
 800080e:	f000 fdbd 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000812:	2200      	movs	r2, #0
 8000814:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000818:	4845      	ldr	r0, [pc, #276]	; (8000930 <MX_GPIO_Init+0x1f0>)
 800081a:	f000 fdb7 	bl	800138c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800081e:	2308      	movs	r3, #8
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	483c      	ldr	r0, [pc, #240]	; (8000928 <MX_GPIO_Init+0x1e8>)
 8000836:	f000 fc0d 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4836      	ldr	r0, [pc, #216]	; (800092c <MX_GPIO_Init+0x1ec>)
 8000852:	f000 fbff 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000866:	2305      	movs	r3, #5
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	482e      	ldr	r0, [pc, #184]	; (800092c <MX_GPIO_Init+0x1ec>)
 8000872:	f000 fbef 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000876:	2301      	movs	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800087a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	482a      	ldr	r0, [pc, #168]	; (8000934 <MX_GPIO_Init+0x1f4>)
 800088c:	f000 fbe2 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000890:	2304      	movs	r3, #4
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4825      	ldr	r0, [pc, #148]	; (8000938 <MX_GPIO_Init+0x1f8>)
 80008a4:	f000 fbd6 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	481c      	ldr	r0, [pc, #112]	; (8000938 <MX_GPIO_Init+0x1f8>)
 80008c6:	f000 fbc5 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4813      	ldr	r0, [pc, #76]	; (8000930 <MX_GPIO_Init+0x1f0>)
 80008e4:	f000 fbb6 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008e8:	2320      	movs	r3, #32
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_GPIO_Init+0x1f0>)
 80008fc:	f000 fbaa 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000900:	2302      	movs	r3, #2
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000904:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_GPIO_Init+0x1e8>)
 8000916:	f000 fb9d 	bl	8001054 <HAL_GPIO_Init>

}
 800091a:	bf00      	nop
 800091c:	3730      	adds	r7, #48	; 0x30
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40021000 	.word	0x40021000
 800092c:	40020800 	.word	0x40020800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40020000 	.word	0x40020000
 8000938:	40020400 	.word	0x40020400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000986:	2007      	movs	r0, #7
 8000988:	f000 fb22 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_I2C_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12b      	bne.n	8000a12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d6:	23c0      	movs	r3, #192	; 0xc0
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009da:	2312      	movs	r3, #18
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e6:	2304      	movs	r3, #4
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <HAL_I2C_MspInit+0x8c>)
 80009f2:	f000 fb2f 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a31      	ldr	r2, [pc, #196]	; (8000b18 <HAL_I2S_MspInit+0xf0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d15a      	bne.n	8000b0e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a5c:	23c0      	movs	r3, #192	; 0xc0
 8000a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 f87d 	bl	8004b68 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a74:	f7ff ff62 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000acc:	2310      	movs	r3, #16
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000adc:	2306      	movs	r3, #6
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <HAL_I2S_MspInit+0xf8>)
 8000ae8:	f000 fab4 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aec:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000afe:	2306      	movs	r3, #6
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <HAL_I2S_MspInit+0xfc>)
 8000b0a:	f000 faa3 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3738      	adds	r7, #56	; 0x38
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40003c00 	.word	0x40003c00
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800

08000b28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b82:	23e0      	movs	r3, #224	; 0xe0
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b92:	2305      	movs	r3, #5
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b9e:	f000 fa59 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8d0 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <OTG_FS_IRQHandler+0x10>)
 8000c12:	f000 fe3f 	bl	8001894 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000058c 	.word	0x2000058c

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f007 fb06 	bl	8008260 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20020000 	.word	0x20020000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	200000ac 	.word	0x200000ac
 8000c88:	200008a0 	.word	0x200008a0

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f007 fac5 	bl	800826c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fc11 	bl	8000508 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000cf4:	080084b8 	.word	0x080084b8
  ldr r2, =_sbss
 8000cf8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cfc:	200008a0 	.word	0x200008a0

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f94f 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fe06 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f967 	bl	800103a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f92f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	200001b0 	.word	0x200001b0

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200001b0 	.word	0x200001b0

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e16b      	b.n	8001348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 815a 	bne.w	8001342 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d005      	beq.n	80010a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d130      	bne.n	8001108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 0201 	and.w	r2, r3, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80b4 	beq.w	8001342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b60      	ldr	r3, [pc, #384]	; (8001360 <HAL_GPIO_Init+0x30c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a5f      	ldr	r2, [pc, #380]	; (8001360 <HAL_GPIO_Init+0x30c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_GPIO_Init+0x30c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f6:	4a5b      	ldr	r2, [pc, #364]	; (8001364 <HAL_GPIO_Init+0x310>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a52      	ldr	r2, [pc, #328]	; (8001368 <HAL_GPIO_Init+0x314>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d02b      	beq.n	800127a <HAL_GPIO_Init+0x226>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a51      	ldr	r2, [pc, #324]	; (800136c <HAL_GPIO_Init+0x318>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x222>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a50      	ldr	r2, [pc, #320]	; (8001370 <HAL_GPIO_Init+0x31c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x21e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4f      	ldr	r2, [pc, #316]	; (8001374 <HAL_GPIO_Init+0x320>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x21a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4e      	ldr	r2, [pc, #312]	; (8001378 <HAL_GPIO_Init+0x324>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x216>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4d      	ldr	r2, [pc, #308]	; (800137c <HAL_GPIO_Init+0x328>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x212>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <HAL_GPIO_Init+0x32c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x20e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <HAL_GPIO_Init+0x330>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x20a>
 800125a:	2307      	movs	r3, #7
 800125c:	e00e      	b.n	800127c <HAL_GPIO_Init+0x228>
 800125e:	2308      	movs	r3, #8
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001262:	2306      	movs	r3, #6
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x228>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x228>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x228>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x310>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <HAL_GPIO_Init+0x334>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012be:	4a32      	ldr	r2, [pc, #200]	; (8001388 <HAL_GPIO_Init+0x334>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_GPIO_Init+0x334>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <HAL_GPIO_Init+0x334>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_GPIO_Init+0x334>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001312:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_GPIO_Init+0x334>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_GPIO_Init+0x334>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <HAL_GPIO_Init+0x334>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae90 	bls.w	8001070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40021c00 	.word	0x40021c00
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c0:	b08f      	sub	sp, #60	; 0x3c
 80013c2:	af0a      	add	r7, sp, #40	; 0x28
 80013c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e054      	b.n	800147a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f006 fc8e 	bl	8007d0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fde5 	bl	8004fde <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	687e      	ldr	r6, [r7, #4]
 800141c:	466d      	mov	r5, sp
 800141e:	f106 0410 	add.w	r4, r6, #16
 8001422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800142e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001432:	1d33      	adds	r3, r6, #4
 8001434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f003 fd5f 	bl	8004efa <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fddc 	bl	8005000 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	687e      	ldr	r6, [r7, #4]
 8001450:	466d      	mov	r5, sp
 8001452:	f106 0410 	add.w	r4, r6, #16
 8001456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001462:	e885 0003 	stmia.w	r5, {r0, r1}
 8001466:	1d33      	adds	r3, r6, #4
 8001468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f003 ff42 	bl	80052f4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001482 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001482:	b590      	push	{r4, r7, lr}
 8001484:	b089      	sub	sp, #36	; 0x24
 8001486:	af04      	add	r7, sp, #16
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	4608      	mov	r0, r1
 800148c:	4611      	mov	r1, r2
 800148e:	461a      	mov	r2, r3
 8001490:	4603      	mov	r3, r0
 8001492:	70fb      	strb	r3, [r7, #3]
 8001494:	460b      	mov	r3, r1
 8001496:	70bb      	strb	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_HCD_HC_Init+0x28>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e076      	b.n	8001598 <HAL_HCD_HC_Init+0x116>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	212c      	movs	r1, #44	; 0x2c
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	333d      	adds	r3, #61	; 0x3d
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	212c      	movs	r1, #44	; 0x2c
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	3338      	adds	r3, #56	; 0x38
 80014d2:	787a      	ldrb	r2, [r7, #1]
 80014d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	212c      	movs	r1, #44	; 0x2c
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	3340      	adds	r3, #64	; 0x40
 80014e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014e6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	212c      	movs	r1, #44	; 0x2c
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	3339      	adds	r3, #57	; 0x39
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	212c      	movs	r1, #44	; 0x2c
 8001500:	fb01 f303 	mul.w	r3, r1, r3
 8001504:	4413      	add	r3, r2
 8001506:	333f      	adds	r3, #63	; 0x3f
 8001508:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800150c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	78ba      	ldrb	r2, [r7, #2]
 8001512:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001516:	b2d0      	uxtb	r0, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	212c      	movs	r1, #44	; 0x2c
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	333a      	adds	r3, #58	; 0x3a
 8001524:	4602      	mov	r2, r0
 8001526:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001528:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800152c:	2b00      	cmp	r3, #0
 800152e:	da09      	bge.n	8001544 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	212c      	movs	r1, #44	; 0x2c
 8001536:	fb01 f303 	mul.w	r3, r1, r3
 800153a:	4413      	add	r3, r2
 800153c:	333b      	adds	r3, #59	; 0x3b
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	e008      	b.n	8001556 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	212c      	movs	r1, #44	; 0x2c
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	4413      	add	r3, r2
 8001550:	333b      	adds	r3, #59	; 0x3b
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	212c      	movs	r1, #44	; 0x2c
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	4413      	add	r3, r2
 8001562:	333c      	adds	r3, #60	; 0x3c
 8001564:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001568:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	787c      	ldrb	r4, [r7, #1]
 8001570:	78ba      	ldrb	r2, [r7, #2]
 8001572:	78f9      	ldrb	r1, [r7, #3]
 8001574:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001576:	9302      	str	r3, [sp, #8]
 8001578:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4623      	mov	r3, r4
 8001586:	f004 f82f 	bl	80055e8 <USB_HC_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bd90      	pop	{r4, r7, pc}

080015a0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_HCD_HC_Halt+0x1e>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e00f      	b.n	80015de <HAL_HCD_HC_Halt+0x3e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 fa6b 	bl	8005aaa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	70fb      	strb	r3, [r7, #3]
 80015fa:	460b      	mov	r3, r1
 80015fc:	70bb      	strb	r3, [r7, #2]
 80015fe:	4613      	mov	r3, r2
 8001600:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	212c      	movs	r1, #44	; 0x2c
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	333b      	adds	r3, #59	; 0x3b
 8001610:	78ba      	ldrb	r2, [r7, #2]
 8001612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	333f      	adds	r3, #63	; 0x3f
 8001622:	787a      	ldrb	r2, [r7, #1]
 8001624:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001626:	7c3b      	ldrb	r3, [r7, #16]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d112      	bne.n	8001652 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	212c      	movs	r1, #44	; 0x2c
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	4413      	add	r3, r2
 8001638:	3342      	adds	r3, #66	; 0x42
 800163a:	2203      	movs	r2, #3
 800163c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	212c      	movs	r1, #44	; 0x2c
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	4413      	add	r3, r2
 800164a:	333d      	adds	r3, #61	; 0x3d
 800164c:	7f3a      	ldrb	r2, [r7, #28]
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e008      	b.n	8001664 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	212c      	movs	r1, #44	; 0x2c
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	4413      	add	r3, r2
 800165e:	3342      	adds	r3, #66	; 0x42
 8001660:	2202      	movs	r2, #2
 8001662:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	2b03      	cmp	r3, #3
 8001668:	f200 80c6 	bhi.w	80017f8 <HAL_HCD_HC_SubmitRequest+0x210>
 800166c:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001672:	bf00      	nop
 8001674:	08001685 	.word	0x08001685
 8001678:	080017e5 	.word	0x080017e5
 800167c:	080016e9 	.word	0x080016e9
 8001680:	08001767 	.word	0x08001767
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001684:	7c3b      	ldrb	r3, [r7, #16]
 8001686:	2b01      	cmp	r3, #1
 8001688:	f040 80b8 	bne.w	80017fc <HAL_HCD_HC_SubmitRequest+0x214>
 800168c:	78bb      	ldrb	r3, [r7, #2]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 80b4 	bne.w	80017fc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001694:	8b3b      	ldrh	r3, [r7, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d108      	bne.n	80016ac <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	3355      	adds	r3, #85	; 0x55
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	212c      	movs	r1, #44	; 0x2c
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	3355      	adds	r3, #85	; 0x55
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	212c      	movs	r1, #44	; 0x2c
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	3342      	adds	r3, #66	; 0x42
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016d2:	e093      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	212c      	movs	r1, #44	; 0x2c
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	3342      	adds	r3, #66	; 0x42
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
      break;
 80016e6:	e089      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016e8:	78bb      	ldrb	r3, [r7, #2]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d11d      	bne.n	800172a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	3355      	adds	r3, #85	; 0x55
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	3342      	adds	r3, #66	; 0x42
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001714:	e073      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	212c      	movs	r1, #44	; 0x2c
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	4413      	add	r3, r2
 8001722:	3342      	adds	r3, #66	; 0x42
 8001724:	2202      	movs	r2, #2
 8001726:	701a      	strb	r2, [r3, #0]
      break;
 8001728:	e069      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	212c      	movs	r1, #44	; 0x2c
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	3354      	adds	r3, #84	; 0x54
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	3342      	adds	r3, #66	; 0x42
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
      break;
 8001750:	e055      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	212c      	movs	r1, #44	; 0x2c
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	3342      	adds	r3, #66	; 0x42
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]
      break;
 8001764:	e04b      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001766:	78bb      	ldrb	r3, [r7, #2]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d11d      	bne.n	80017a8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	3355      	adds	r3, #85	; 0x55
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	3342      	adds	r3, #66	; 0x42
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001792:	e034      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	212c      	movs	r1, #44	; 0x2c
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4413      	add	r3, r2
 80017a0:	3342      	adds	r3, #66	; 0x42
 80017a2:	2202      	movs	r2, #2
 80017a4:	701a      	strb	r2, [r3, #0]
      break;
 80017a6:	e02a      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	212c      	movs	r1, #44	; 0x2c
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	3354      	adds	r3, #84	; 0x54
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d109      	bne.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	212c      	movs	r1, #44	; 0x2c
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	3342      	adds	r3, #66	; 0x42
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
      break;
 80017ce:	e016      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	3342      	adds	r3, #66	; 0x42
 80017de:	2202      	movs	r2, #2
 80017e0:	701a      	strb	r2, [r3, #0]
      break;
 80017e2:	e00c      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	3342      	adds	r3, #66	; 0x42
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
      break;
 80017f6:	e002      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80017f8:	bf00      	nop
 80017fa:	e000      	b.n	80017fe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80017fc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	212c      	movs	r1, #44	; 0x2c
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	3344      	adds	r3, #68	; 0x44
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	8b3a      	ldrh	r2, [r7, #24]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	202c      	movs	r0, #44	; 0x2c
 8001818:	fb00 f303 	mul.w	r3, r0, r3
 800181c:	440b      	add	r3, r1
 800181e:	334c      	adds	r3, #76	; 0x4c
 8001820:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3360      	adds	r3, #96	; 0x60
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	3350      	adds	r3, #80	; 0x50
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3339      	adds	r3, #57	; 0x39
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	3361      	adds	r3, #97	; 0x61
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	222c      	movs	r2, #44	; 0x2c
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	3338      	adds	r3, #56	; 0x38
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	18d1      	adds	r1, r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	f003 ffbe 	bl	8005804 <USB_HC_StartXfer>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop

08001894 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 fce1 	bl	8005272 <USB_GetMode>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	f040 80f6 	bne.w	8001aa4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 fcc5 	bl	800524c <USB_ReadInterrupts>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80ec 	beq.w	8001aa2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fcbc 	bl	800524c <USB_ReadInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018de:	d104      	bne.n	80018ea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 fcac 	bl	800524c <USB_ReadInterrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018fe:	d104      	bne.n	800190a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001908:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fc9c 	bl	800524c <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800191a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800191e:	d104      	bne.n	800192a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001928:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fc8c 	bl	800524c <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b02      	cmp	r3, #2
 800193c:	d103      	bne.n	8001946 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fc7e 	bl	800524c <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800195a:	d11c      	bne.n	8001996 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001964:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001976:	2110      	movs	r1, #16
 8001978:	6938      	ldr	r0, [r7, #16]
 800197a:	f003 fb8d 	bl	8005098 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800197e:	6938      	ldr	r0, [r7, #16]
 8001980:	f003 fbae 	bl	80050e0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fd66 	bl	800545c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f006 fa39 	bl	8007e08 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fc56 	bl	800524c <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019aa:	d102      	bne.n	80019b2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f001 fa03 	bl	8002db8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 fc48 	bl	800524c <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d106      	bne.n	80019d4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f006 fa02 	bl	8007dd0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2208      	movs	r2, #8
 80019d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fc37 	bl	800524c <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d101      	bne.n	80019ec <HAL_HCD_IRQHandler+0x158>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_HCD_IRQHandler+0x15a>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699a      	ldr	r2, [r3, #24]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0210 	bic.w	r2, r2, #16
 8001a00:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f001 f906 	bl	8002c14 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0210 	orr.w	r2, r2, #16
 8001a16:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fc15 	bl	800524c <USB_ReadInterrupts>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a2c:	d13a      	bne.n	8001aa4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 f828 	bl	8005a88 <USB_HC_ReadInterrupt>
 8001a38:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e025      	b.n	8001a8c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d018      	beq.n	8001a86 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6a:	d106      	bne.n	8001a7a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8ab 	bl	8001bce <HCD_HC_IN_IRQHandler>
 8001a78:	e005      	b.n	8001a86 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fcc6 	bl	8002412 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d3d4      	bcc.n	8001a40 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9e:	615a      	str	r2, [r3, #20]
 8001aa0:	e000      	b.n	8001aa4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001aa2:	bf00      	nop
    }
  }
}
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_HCD_Start+0x16>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e013      	b.n	8001ae8 <HAL_HCD_Start+0x3e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fd28 	bl	8005524 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 fa6f 	bl	8004fbc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_HCD_Stop+0x16>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e00d      	b.n	8001b22 <HAL_HCD_Stop+0x32>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 f922 	bl	8005d5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fcca 	bl	80054d0 <USB_ResetPort>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3360      	adds	r3, #96	; 0x60
 8001b60:	781b      	ldrb	r3, [r3, #0]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3350      	adds	r3, #80	; 0x50
 8001b88:	681b      	ldr	r3, [r3, #0]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 fd0e 	bl	80055c4 <USB_GetCurrentFrame>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fce9 	bl	8005596 <USB_GetHostSpeed>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d119      	bne.n	8001c32 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	0151      	lsls	r1, r2, #5
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	440a      	add	r2, r1
 8001c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	60d3      	str	r3, [r2, #12]
 8001c30:	e101      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c48:	d12b      	bne.n	8001ca2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c56:	461a      	mov	r2, r3
 8001c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3361      	adds	r3, #97	; 0x61
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	0151      	lsls	r1, r2, #5
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	440a      	add	r2, r1
 8001c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 ff05 	bl	8005aaa <USB_HC_Halt>
 8001ca0:	e0c9      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d109      	bne.n	8001ccc <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	6093      	str	r3, [r2, #8]
 8001cca:	e0b4      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d133      	bne.n	8001d4a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	0151      	lsls	r1, r2, #5
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	440a      	add	r2, r1
 8001cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	212c      	movs	r1, #44	; 0x2c
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3361      	adds	r3, #97	; 0x61
 8001d10:	2205      	movs	r2, #5
 8001d12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d20:	461a      	mov	r2, r3
 8001d22:	2310      	movs	r3, #16
 8001d24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	461a      	mov	r2, r3
 8001d34:	2308      	movs	r3, #8
 8001d36:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 feb1 	bl	8005aaa <USB_HC_Halt>
 8001d48:	e075      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d60:	d134      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	0151      	lsls	r1, r2, #5
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	440a      	add	r2, r1
 8001d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3361      	adds	r3, #97	; 0x61
 8001d90:	2208      	movs	r2, #8
 8001d92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da0:	461a      	mov	r2, r3
 8001da2:	2310      	movs	r3, #16
 8001da4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	461a      	mov	r2, r3
 8001db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fe70 	bl	8005aaa <USB_HC_Halt>
 8001dca:	e034      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b80      	cmp	r3, #128	; 0x80
 8001de0:	d129      	bne.n	8001e36 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	0151      	lsls	r1, r2, #5
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	440a      	add	r2, r1
 8001df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3361      	adds	r3, #97	; 0x61
 8001e10:	2206      	movs	r2, #6
 8001e12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fe43 	bl	8005aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	461a      	mov	r2, r3
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4c:	d122      	bne.n	8001e94 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	0151      	lsls	r1, r2, #5
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	440a      	add	r2, r1
 8001e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fe16 	bl	8005aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e90:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e92:	e2ba      	b.n	800240a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	f040 811b 	bne.w	80020e2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d019      	beq.n	8001ee8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3348      	adds	r3, #72	; 0x48
 8001ec2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	0159      	lsls	r1, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	440b      	add	r3, r1
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ed6:	1ad2      	subs	r2, r2, r3
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	202c      	movs	r0, #44	; 0x2c
 8001ede:	fb00 f303 	mul.w	r3, r0, r3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3350      	adds	r3, #80	; 0x50
 8001ee6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3361      	adds	r3, #97	; 0x61
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	335c      	adds	r3, #92	; 0x5c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	333f      	adds	r3, #63	; 0x3f
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	333f      	adds	r3, #63	; 0x3f
 8001f40:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d121      	bne.n	8001f8a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	0151      	lsls	r1, r2, #5
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	440a      	add	r2, r1
 8001f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 fd9a 	bl	8005aaa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	461a      	mov	r2, r3
 8001f84:	2310      	movs	r3, #16
 8001f86:	6093      	str	r3, [r2, #8]
 8001f88:	e066      	b.n	8002058 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	333f      	adds	r3, #63	; 0x3f
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d127      	bne.n	8001fee <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	0151      	lsls	r1, r2, #5
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	440a      	add	r2, r1
 8001fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fbc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3360      	adds	r3, #96	; 0x60
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	b2d9      	uxtb	r1, r3
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	202c      	movs	r0, #44	; 0x2c
 8001fda:	fb00 f303 	mul.w	r3, r0, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3360      	adds	r3, #96	; 0x60
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f005 ff1c 	bl	8007e24 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fec:	e034      	b.n	8002058 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	333f      	adds	r3, #63	; 0x3f
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d12a      	bne.n	8002058 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3360      	adds	r3, #96	; 0x60
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3354      	adds	r3, #84	; 0x54
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	f083 0301 	eor.w	r3, r3, #1
 8002028:	b2d8      	uxtb	r0, r3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3354      	adds	r3, #84	; 0x54
 8002038:	4602      	mov	r2, r0
 800203a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	b2d9      	uxtb	r1, r3
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	202c      	movs	r0, #44	; 0x2c
 8002046:	fb00 f303 	mul.w	r3, r0, r3
 800204a:	4413      	add	r3, r2
 800204c:	3360      	adds	r3, #96	; 0x60
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f005 fee6 	bl	8007e24 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d12b      	bne.n	80020b8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3348      	adds	r3, #72	; 0x48
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	202c      	movs	r0, #44	; 0x2c
 8002076:	fb00 f202 	mul.w	r2, r0, r2
 800207a:	440a      	add	r2, r1
 800207c:	3240      	adds	r2, #64	; 0x40
 800207e:	8812      	ldrh	r2, [r2, #0]
 8002080:	fbb3 f3f2 	udiv	r3, r3, r2
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 81be 	beq.w	800240a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3354      	adds	r3, #84	; 0x54
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	f083 0301 	eor.w	r3, r3, #1
 80020a2:	b2d8      	uxtb	r0, r3
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	3354      	adds	r3, #84	; 0x54
 80020b2:	4602      	mov	r2, r0
 80020b4:	701a      	strb	r2, [r3, #0]
}
 80020b6:	e1a8      	b.n	800240a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	212c      	movs	r1, #44	; 0x2c
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	3354      	adds	r3, #84	; 0x54
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	f083 0301 	eor.w	r3, r3, #1
 80020cc:	b2d8      	uxtb	r0, r3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3354      	adds	r3, #84	; 0x54
 80020dc:	4602      	mov	r2, r0
 80020de:	701a      	strb	r2, [r3, #0]
}
 80020e0:	e193      	b.n	800240a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	f040 8106 	bne.w	8002306 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	0151      	lsls	r1, r2, #5
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	440a      	add	r2, r1
 8002110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002114:	f023 0302 	bic.w	r3, r3, #2
 8002118:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3361      	adds	r3, #97	; 0x61
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d109      	bne.n	8002142 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3360      	adds	r3, #96	; 0x60
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	e0c9      	b.n	80022d6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3361      	adds	r3, #97	; 0x61
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d109      	bne.n	800216a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3360      	adds	r3, #96	; 0x60
 8002164:	2205      	movs	r2, #5
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e0b5      	b.n	80022d6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3361      	adds	r3, #97	; 0x61
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b06      	cmp	r3, #6
 800217c:	d009      	beq.n	8002192 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3361      	adds	r3, #97	; 0x61
 800218c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800218e:	2b08      	cmp	r3, #8
 8002190:	d150      	bne.n	8002234 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	202c      	movs	r0, #44	; 0x2c
 80021aa:	fb00 f303 	mul.w	r3, r0, r3
 80021ae:	440b      	add	r3, r1
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	335c      	adds	r3, #92	; 0x5c
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d912      	bls.n	80021ee <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	335c      	adds	r3, #92	; 0x5c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3360      	adds	r3, #96	; 0x60
 80021e8:	2204      	movs	r2, #4
 80021ea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021ec:	e073      	b.n	80022d6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3360      	adds	r3, #96	; 0x60
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002216:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800221e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	461a      	mov	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002232:	e050      	b.n	80022d6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3361      	adds	r3, #97	; 0x61
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d122      	bne.n	800228e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3360      	adds	r3, #96	; 0x60
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002270:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002278:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e023      	b.n	80022d6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	3361      	adds	r3, #97	; 0x61
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b07      	cmp	r3, #7
 80022a0:	d119      	bne.n	80022d6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	335c      	adds	r3, #92	; 0x5c
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	202c      	movs	r0, #44	; 0x2c
 80022ba:	fb00 f303 	mul.w	r3, r0, r3
 80022be:	440b      	add	r3, r1
 80022c0:	335c      	adds	r3, #92	; 0x5c
 80022c2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3360      	adds	r3, #96	; 0x60
 80022d2:	2204      	movs	r2, #4
 80022d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	461a      	mov	r2, r3
 80022e4:	2302      	movs	r3, #2
 80022e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	b2d9      	uxtb	r1, r3
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	202c      	movs	r0, #44	; 0x2c
 80022f2:	fb00 f303 	mul.w	r3, r0, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	3360      	adds	r3, #96	; 0x60
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f005 fd90 	bl	8007e24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002304:	e081      	b.n	800240a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b10      	cmp	r3, #16
 800231a:	d176      	bne.n	800240a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	333f      	adds	r3, #63	; 0x3f
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d121      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	335c      	adds	r3, #92	; 0x5c
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	0151      	lsls	r1, r2, #5
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	440a      	add	r2, r1
 8002358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fb9c 	bl	8005aaa <USB_HC_Halt>
 8002372:	e041      	b.n	80023f8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	333f      	adds	r3, #63	; 0x3f
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	333f      	adds	r3, #63	; 0x3f
 8002396:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002398:	2b02      	cmp	r3, #2
 800239a:	d12d      	bne.n	80023f8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	335c      	adds	r3, #92	; 0x5c
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d120      	bne.n	80023f8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	3361      	adds	r3, #97	; 0x61
 80023c4:	2203      	movs	r2, #3
 80023c6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	0151      	lsls	r1, r2, #5
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	440a      	add	r2, r1
 80023de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fb59 	bl	8005aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	2310      	movs	r3, #16
 8002408:	6093      	str	r3, [r2, #8]
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b088      	sub	sp, #32
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b04      	cmp	r3, #4
 8002440:	d119      	bne.n	8002476 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	461a      	mov	r2, r3
 8002450:	2304      	movs	r3, #4
 8002452:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	0151      	lsls	r1, r2, #5
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	440a      	add	r2, r1
 800246a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002474:	e3ca      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b20      	cmp	r3, #32
 800248a:	d13e      	bne.n	800250a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	461a      	mov	r2, r3
 800249a:	2320      	movs	r3, #32
 800249c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	333d      	adds	r3, #61	; 0x3d
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	f040 83ac 	bne.w	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	333d      	adds	r3, #61	; 0x3d
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3360      	adds	r3, #96	; 0x60
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fad1 	bl	8005aaa <USB_HC_Halt>
}
 8002508:	e380      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002520:	d122      	bne.n	8002568 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	0151      	lsls	r1, r2, #5
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	440a      	add	r2, r1
 8002538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f003 faac 	bl	8005aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	461a      	mov	r2, r3
 8002560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002564:	6093      	str	r3, [r2, #8]
}
 8002566:	e351      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d150      	bne.n	8002620 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	335c      	adds	r3, #92	; 0x5c
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d111      	bne.n	80025ca <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	333d      	adds	r3, #61	; 0x3d
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2340      	movs	r3, #64	; 0x40
 80025c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	0151      	lsls	r1, r2, #5
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	440a      	add	r2, r1
 80025e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fa58 	bl	8005aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	461a      	mov	r2, r3
 8002608:	2301      	movs	r3, #1
 800260a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3361      	adds	r3, #97	; 0x61
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
}
 800261e:	e2f5      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b40      	cmp	r3, #64	; 0x40
 8002634:	d13c      	bne.n	80026b0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3361      	adds	r3, #97	; 0x61
 8002644:	2204      	movs	r2, #4
 8002646:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	333d      	adds	r3, #61	; 0x3d
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	335c      	adds	r3, #92	; 0x5c
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	0151      	lsls	r1, r2, #5
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	440a      	add	r2, r1
 8002682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fa07 	bl	8005aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2340      	movs	r3, #64	; 0x40
 80026ac:	6093      	str	r3, [r2, #8]
}
 80026ae:	e2ad      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d12a      	bne.n	800271c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	2308      	movs	r3, #8
 80026d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	0151      	lsls	r1, r2, #5
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	440a      	add	r2, r1
 80026ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f003 f9d1 	bl	8005aaa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3361      	adds	r3, #97	; 0x61
 8002716:	2205      	movs	r2, #5
 8002718:	701a      	strb	r2, [r3, #0]
}
 800271a:	e277      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b10      	cmp	r3, #16
 8002730:	d150      	bne.n	80027d4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	335c      	adds	r3, #92	; 0x5c
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	2203      	movs	r2, #3
 8002754:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	333d      	adds	r3, #61	; 0x3d
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d112      	bne.n	8002790 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	333c      	adds	r3, #60	; 0x3c
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d108      	bne.n	8002790 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	333d      	adds	r3, #61	; 0x3d
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	0151      	lsls	r1, r2, #5
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	440a      	add	r2, r1
 80027a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 f975 	bl	8005aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	2310      	movs	r3, #16
 80027d0:	6093      	str	r3, [r2, #8]
}
 80027d2:	e21b      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b80      	cmp	r3, #128	; 0x80
 80027e8:	d174      	bne.n	80028d4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d121      	bne.n	8002836 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3361      	adds	r3, #97	; 0x61
 8002800:	2206      	movs	r2, #6
 8002802:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	0151      	lsls	r1, r2, #5
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	440a      	add	r2, r1
 800281a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f003 f93b 	bl	8005aaa <USB_HC_Halt>
 8002834:	e044      	b.n	80028c0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	335c      	adds	r3, #92	; 0x5c
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	202c      	movs	r0, #44	; 0x2c
 800284e:	fb00 f303 	mul.w	r3, r0, r3
 8002852:	440b      	add	r3, r1
 8002854:	335c      	adds	r3, #92	; 0x5c
 8002856:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	335c      	adds	r3, #92	; 0x5c
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d920      	bls.n	80028ae <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	335c      	adds	r3, #92	; 0x5c
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3360      	adds	r3, #96	; 0x60
 800288c:	2204      	movs	r2, #4
 800288e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	b2d9      	uxtb	r1, r3
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	202c      	movs	r0, #44	; 0x2c
 800289a:	fb00 f303 	mul.w	r3, r0, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3360      	adds	r3, #96	; 0x60
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f005 fabc 	bl	8007e24 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028ac:	e008      	b.n	80028c0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3360      	adds	r3, #96	; 0x60
 80028bc:	2202      	movs	r2, #2
 80028be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	461a      	mov	r2, r3
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	6093      	str	r3, [r2, #8]
}
 80028d2:	e19b      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ea:	d134      	bne.n	8002956 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	0151      	lsls	r1, r2, #5
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	440a      	add	r2, r1
 8002902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f003 f8c7 	bl	8005aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2310      	movs	r3, #16
 800292c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	461a      	mov	r2, r3
 800293c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002940:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3361      	adds	r3, #97	; 0x61
 8002950:	2208      	movs	r2, #8
 8002952:	701a      	strb	r2, [r3, #0]
}
 8002954:	e15a      	b.n	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	f040 814f 	bne.w	8002c0c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	0151      	lsls	r1, r2, #5
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	440a      	add	r2, r1
 8002984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002988:	f023 0302 	bic.w	r3, r3, #2
 800298c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3361      	adds	r3, #97	; 0x61
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d17d      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3360      	adds	r3, #96	; 0x60
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	333f      	adds	r3, #63	; 0x3f
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d00a      	beq.n	80029de <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	333f      	adds	r3, #63	; 0x3f
 80029d6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029d8:	2b03      	cmp	r3, #3
 80029da:	f040 8100 	bne.w	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d113      	bne.n	8002a0e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3355      	adds	r3, #85	; 0x55
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	f083 0301 	eor.w	r3, r3, #1
 80029fa:	b2d8      	uxtb	r0, r3
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3355      	adds	r3, #85	; 0x55
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f040 80e3 	bne.w	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	334c      	adds	r3, #76	; 0x4c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80d8 	beq.w	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	334c      	adds	r3, #76	; 0x4c
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	202c      	movs	r0, #44	; 0x2c
 8002a44:	fb00 f202 	mul.w	r2, r0, r2
 8002a48:	440a      	add	r2, r1
 8002a4a:	3240      	adds	r2, #64	; 0x40
 8002a4c:	8812      	ldrh	r2, [r2, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	3b01      	subs	r3, #1
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	202c      	movs	r0, #44	; 0x2c
 8002a58:	fb00 f202 	mul.w	r2, r0, r2
 8002a5c:	440a      	add	r2, r1
 8002a5e:	3240      	adds	r2, #64	; 0x40
 8002a60:	8812      	ldrh	r2, [r2, #0]
 8002a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80b5 	beq.w	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3355      	adds	r3, #85	; 0x55
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	f083 0301 	eor.w	r3, r3, #1
 8002a88:	b2d8      	uxtb	r0, r3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	3355      	adds	r3, #85	; 0x55
 8002a98:	4602      	mov	r2, r0
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e09f      	b.n	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3361      	adds	r3, #97	; 0x61
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d109      	bne.n	8002ac6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	3360      	adds	r3, #96	; 0x60
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e08b      	b.n	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3361      	adds	r3, #97	; 0x61
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d109      	bne.n	8002aee <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3360      	adds	r3, #96	; 0x60
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e077      	b.n	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3361      	adds	r3, #97	; 0x61
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d109      	bne.n	8002b16 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3360      	adds	r3, #96	; 0x60
 8002b10:	2205      	movs	r2, #5
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e063      	b.n	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	3361      	adds	r3, #97	; 0x61
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d009      	beq.n	8002b3e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3361      	adds	r3, #97	; 0x61
 8002b38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d14f      	bne.n	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	335c      	adds	r3, #92	; 0x5c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	202c      	movs	r0, #44	; 0x2c
 8002b56:	fb00 f303 	mul.w	r3, r0, r3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	335c      	adds	r3, #92	; 0x5c
 8002b5e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	335c      	adds	r3, #92	; 0x5c
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d912      	bls.n	8002b9a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	335c      	adds	r3, #92	; 0x5c
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	3360      	adds	r3, #96	; 0x60
 8002b94:	2204      	movs	r2, #4
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e021      	b.n	8002bde <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3360      	adds	r3, #96	; 0x60
 8002ba8:	2202      	movs	r2, #2
 8002baa:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bc2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bca:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	461a      	mov	r2, r3
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bea:	461a      	mov	r2, r3
 8002bec:	2302      	movs	r3, #2
 8002bee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	b2d9      	uxtb	r1, r3
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	202c      	movs	r0, #44	; 0x2c
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3360      	adds	r3, #96	; 0x60
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f005 f90c 	bl	8007e24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c0c:	bf00      	nop
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	0c5b      	lsrs	r3, r3, #17
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c48:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d004      	beq.n	8002c5a <HCD_RXQLVL_IRQHandler+0x46>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	f000 80a9 	beq.w	8002daa <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c58:	e0aa      	b.n	8002db0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a6 	beq.w	8002dae <HCD_RXQLVL_IRQHandler+0x19a>
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3344      	adds	r3, #68	; 0x44
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 809b 	beq.w	8002dae <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3350      	adds	r3, #80	; 0x50
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	441a      	add	r2, r3
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	202c      	movs	r0, #44	; 0x2c
 8002c92:	fb00 f303 	mul.w	r3, r0, r3
 8002c96:	440b      	add	r3, r1
 8002c98:	334c      	adds	r3, #76	; 0x4c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d87a      	bhi.n	8002d96 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3344      	adds	r3, #68	; 0x44
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f002 fa6f 	bl	800519c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3344      	adds	r3, #68	; 0x44
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	fb00 f303 	mul.w	r3, r0, r3
 8002cdc:	440b      	add	r3, r1
 8002cde:	3344      	adds	r3, #68	; 0x44
 8002ce0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3350      	adds	r3, #80	; 0x50
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	202c      	movs	r0, #44	; 0x2c
 8002cfc:	fb00 f303 	mul.w	r3, r0, r3
 8002d00:	440b      	add	r3, r1
 8002d02:	3350      	adds	r3, #80	; 0x50
 8002d04:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	0cdb      	lsrs	r3, r3, #19
 8002d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3340      	adds	r3, #64	; 0x40
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d13c      	bne.n	8002dae <HCD_RXQLVL_IRQHandler+0x19a>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d039      	beq.n	8002dae <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d50:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d58:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3354      	adds	r3, #84	; 0x54
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	f083 0301 	eor.w	r3, r3, #1
 8002d80:	b2d8      	uxtb	r0, r3
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3354      	adds	r3, #84	; 0x54
 8002d90:	4602      	mov	r2, r0
 8002d92:	701a      	strb	r2, [r3, #0]
      break;
 8002d94:	e00b      	b.n	8002dae <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	3360      	adds	r3, #96	; 0x60
 8002da4:	2204      	movs	r2, #4
 8002da6:	701a      	strb	r2, [r3, #0]
      break;
 8002da8:	e001      	b.n	8002dae <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002dae:	bf00      	nop
  }
}
 8002db0:	bf00      	nop
 8002db2:	3728      	adds	r7, #40	; 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002de4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d10b      	bne.n	8002e08 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f004 fff6 	bl	8007dec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f043 0302 	orr.w	r3, r3, #2
 8002e06:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d132      	bne.n	8002e78 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d126      	bne.n	8002e72 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d113      	bne.n	8002e54 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e36:	d106      	bne.n	8002e46 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fb0c 	bl	800545c <USB_InitFSLSPClkSel>
 8002e44:	e011      	b.n	8002e6a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fb05 	bl	800545c <USB_InitFSLSPClkSel>
 8002e52:	e00a      	b.n	8002e6a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e62:	461a      	mov	r2, r3
 8002e64:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e68:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f004 ffe8 	bl	8007e40 <HAL_HCD_PortEnabled_Callback>
 8002e70:	e002      	b.n	8002e78 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f004 fff2 	bl	8007e5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d103      	bne.n	8002e8a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f043 0320 	orr.w	r3, r3, #32
 8002e88:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6013      	str	r3, [r2, #0]
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e12b      	b.n	800310a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fd66 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f04:	f001 fe1c 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8002f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a81      	ldr	r2, [pc, #516]	; (8003114 <HAL_I2C_Init+0x274>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d807      	bhi.n	8002f24 <HAL_I2C_Init+0x84>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a80      	ldr	r2, [pc, #512]	; (8003118 <HAL_I2C_Init+0x278>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bf94      	ite	ls
 8002f1c:	2301      	movls	r3, #1
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e006      	b.n	8002f32 <HAL_I2C_Init+0x92>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a7d      	ldr	r2, [pc, #500]	; (800311c <HAL_I2C_Init+0x27c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf94      	ite	ls
 8002f2c:	2301      	movls	r3, #1
 8002f2e:	2300      	movhi	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0e7      	b.n	800310a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4a78      	ldr	r2, [pc, #480]	; (8003120 <HAL_I2C_Init+0x280>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0c9b      	lsrs	r3, r3, #18
 8002f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_I2C_Init+0x274>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d802      	bhi.n	8002f74 <HAL_I2C_Init+0xd4>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3301      	adds	r3, #1
 8002f72:	e009      	b.n	8002f88 <HAL_I2C_Init+0xe8>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	4a69      	ldr	r2, [pc, #420]	; (8003124 <HAL_I2C_Init+0x284>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	3301      	adds	r3, #1
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	495c      	ldr	r1, [pc, #368]	; (8003114 <HAL_I2C_Init+0x274>)
 8002fa4:	428b      	cmp	r3, r1
 8002fa6:	d819      	bhi.n	8002fdc <HAL_I2C_Init+0x13c>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e59      	subs	r1, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb6:	1c59      	adds	r1, r3, #1
 8002fb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_I2C_Init+0x138>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e59      	subs	r1, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd6:	e051      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	e04f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d111      	bne.n	8003008 <HAL_I2C_Init+0x168>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e012      	b.n	800302e <HAL_I2C_Init+0x18e>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e58      	subs	r0, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	0099      	lsls	r1, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	fbb0 f3f3 	udiv	r3, r0, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Init+0x196>
 8003032:	2301      	movs	r3, #1
 8003034:	e022      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10e      	bne.n	800305c <HAL_I2C_Init+0x1bc>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1e58      	subs	r0, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	440b      	add	r3, r1
 800304c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	e00f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	6809      	ldr	r1, [r1, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6911      	ldr	r1, [r2, #16]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	000186a0 	.word	0x000186a0
 8003118:	001e847f 	.word	0x001e847f
 800311c:	003d08ff 	.word	0x003d08ff
 8003120:	431bde83 	.word	0x431bde83
 8003124:	10624dd3 	.word	0x10624dd3

08003128 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08c      	sub	sp, #48	; 0x30
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	460b      	mov	r3, r1
 8003136:	817b      	strh	r3, [r7, #10]
 8003138:	4613      	mov	r3, r2
 800313a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7fd fe48 	bl	8000dd0 <HAL_GetTick>
 8003140:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	f040 820b 	bne.w	8003566 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	497c      	ldr	r1, [pc, #496]	; (800334c <HAL_I2C_Master_Receive+0x224>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fad8 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	e1fe      	b.n	8003568 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_I2C_Master_Receive+0x50>
 8003174:	2302      	movs	r3, #2
 8003176:	e1f7      	b.n	8003568 <HAL_I2C_Master_Receive+0x440>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d007      	beq.n	800319e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2222      	movs	r2, #34	; 0x22
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2210      	movs	r2, #16
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	893a      	ldrh	r2, [r7, #8]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a5c      	ldr	r2, [pc, #368]	; (8003350 <HAL_I2C_Master_Receive+0x228>)
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031e0:	8979      	ldrh	r1, [r7, #10]
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f9c4 	bl	8003574 <I2C_MasterRequestRead>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1b8      	b.n	8003568 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d113      	bne.n	8003226 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fe:	2300      	movs	r3, #0
 8003200:	623b      	str	r3, [r7, #32]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	623b      	str	r3, [r7, #32]
 8003212:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e18c      	b.n	8003540 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	2b01      	cmp	r3, #1
 800322c:	d11b      	bne.n	8003266 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e16c      	b.n	8003540 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	2b02      	cmp	r3, #2
 800326c:	d11b      	bne.n	80032a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800328c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	e14c      	b.n	8003540 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032cc:	e138      	b.n	8003540 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	f200 80f1 	bhi.w	80034ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d123      	bne.n	8003328 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fae9 	bl	80038bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e139      	b.n	8003568 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003326:	e10b      	b.n	8003540 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	2b02      	cmp	r3, #2
 800332e:	d14e      	bne.n	80033ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	2200      	movs	r2, #0
 8003338:	4906      	ldr	r1, [pc, #24]	; (8003354 <HAL_I2C_Master_Receive+0x22c>)
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f9e8 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e10e      	b.n	8003568 <HAL_I2C_Master_Receive+0x440>
 800334a:	bf00      	nop
 800334c:	00100002 	.word	0x00100002
 8003350:	ffff0000 	.word	0xffff0000
 8003354:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033cc:	e0b8      	b.n	8003540 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	2200      	movs	r2, #0
 80033d6:	4966      	ldr	r1, [pc, #408]	; (8003570 <HAL_I2C_Master_Receive+0x448>)
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f999 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0bf      	b.n	8003568 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	2200      	movs	r2, #0
 8003432:	494f      	ldr	r1, [pc, #316]	; (8003570 <HAL_I2C_Master_Receive+0x448>)
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f96b 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e091      	b.n	8003568 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b8:	e042      	b.n	8003540 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f9fc 	bl	80038bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e04c      	b.n	8003568 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b04      	cmp	r3, #4
 800350c:	d118      	bne.n	8003540 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	f47f aec2 	bne.w	80032ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3728      	adds	r7, #40	; 0x28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	00010004 	.word	0x00010004

08003574 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	460b      	mov	r3, r1
 8003582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003598:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d006      	beq.n	80035ae <I2C_MasterRequestRead+0x3a>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d003      	beq.n	80035ae <I2C_MasterRequestRead+0x3a>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035ac:	d108      	bne.n	80035c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e00b      	b.n	80035d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	2b11      	cmp	r3, #17
 80035c6:	d107      	bne.n	80035d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f893 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fe:	d103      	bne.n	8003608 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e079      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003614:	d108      	bne.n	8003628 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	e05f      	b.n	80036e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	11db      	asrs	r3, r3, #7
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f063 030f 	orn	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4930      	ldr	r1, [pc, #192]	; (8003708 <I2C_MasterRequestRead+0x194>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8b9 	bl	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e054      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4929      	ldr	r1, [pc, #164]	; (800370c <I2C_MasterRequestRead+0x198>)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f8a9 	bl	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e044      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f831 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c2:	d103      	bne.n	80036cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e017      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80036d0:	897b      	ldrh	r3, [r7, #10]
 80036d2:	11db      	asrs	r3, r3, #7
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f003 0306 	and.w	r3, r3, #6
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f063 030e 	orn	r3, r3, #14
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4907      	ldr	r1, [pc, #28]	; (800370c <I2C_MasterRequestRead+0x198>)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f865 	bl	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	00010008 	.word	0x00010008
 800370c:	00010002 	.word	0x00010002

08003710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003720:	e025      	b.n	800376e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d021      	beq.n	800376e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fd fb51 	bl	8000dd0 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d116      	bne.n	800376e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0220 	orr.w	r2, r3, #32
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e023      	b.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10d      	bne.n	8003794 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	e00c      	b.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d0b6      	beq.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037cc:	e051      	b.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037dc:	d123      	bne.n	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f043 0204 	orr.w	r2, r3, #4
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e046      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d021      	beq.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fd facf 	bl	8000dd0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d116      	bne.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f043 0220 	orr.w	r2, r3, #32
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e020      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10c      	bne.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e00b      	b.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	43da      	mvns	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4013      	ands	r3, r2
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d18d      	bne.n	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038c8:	e042      	b.n	8003950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d119      	bne.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0210 	mvn.w	r2, #16
 80038e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e029      	b.n	8003960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390c:	f7fd fa60 	bl	8000dd0 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d116      	bne.n	8003950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e007      	b.n	8003960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d1b5      	bne.n	80038ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e128      	b.n	8003bcc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a90      	ldr	r2, [pc, #576]	; (8003bd4 <HAL_I2S_Init+0x26c>)
 8003992:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7fd f847 	bl	8000a28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039b0:	f023 030f 	bic.w	r3, r3, #15
 80039b4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2202      	movs	r2, #2
 80039bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d060      	beq.n	8003a88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039ce:	2310      	movs	r3, #16
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e001      	b.n	80039d8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039d4:	2320      	movs	r3, #32
 80039d6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d802      	bhi.n	80039e6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f001 f9a0 	bl	8004d2c <HAL_RCCEx_GetPeriphCLKFreq>
 80039ec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f6:	d125      	bne.n	8003a44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	3305      	adds	r3, #5
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e01f      	b.n	8003a62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	3305      	adds	r3, #5
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	e00e      	b.n	8003a62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	461a      	mov	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	3305      	adds	r3, #5
 8003a60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4a5c      	ldr	r2, [pc, #368]	; (8003bd8 <HAL_I2S_Init+0x270>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	08db      	lsrs	r3, r3, #3
 8003a6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e003      	b.n	8003a90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d902      	bls.n	8003a9c <HAL_I2S_Init+0x134>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	2bff      	cmp	r3, #255	; 0xff
 8003a9a:	d907      	bls.n	8003aac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f043 0210 	orr.w	r2, r3, #16
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e08f      	b.n	8003bcc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	ea42 0103 	orr.w	r1, r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003aca:	f023 030f 	bic.w	r3, r3, #15
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6851      	ldr	r1, [r2, #4]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6892      	ldr	r2, [r2, #8]
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68d2      	ldr	r2, [r2, #12]
 8003adc:	4311      	orrs	r1, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6992      	ldr	r2, [r2, #24]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d161      	bne.n	8003bbc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <HAL_I2S_Init+0x274>)
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a37      	ldr	r2, [pc, #220]	; (8003be0 <HAL_I2S_Init+0x278>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_I2S_Init+0x1a4>
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <HAL_I2S_Init+0x27c>)
 8003b0a:	e001      	b.n	8003b10 <HAL_I2S_Init+0x1a8>
 8003b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	4932      	ldr	r1, [pc, #200]	; (8003be0 <HAL_I2S_Init+0x278>)
 8003b18:	428a      	cmp	r2, r1
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2S_Init+0x1b8>
 8003b1c:	4a31      	ldr	r2, [pc, #196]	; (8003be4 <HAL_I2S_Init+0x27c>)
 8003b1e:	e001      	b.n	8003b24 <HAL_I2S_Init+0x1bc>
 8003b20:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b28:	f023 030f 	bic.w	r3, r3, #15
 8003b2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <HAL_I2S_Init+0x278>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_I2S_Init+0x1d4>
 8003b38:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <HAL_I2S_Init+0x27c>)
 8003b3a:	e001      	b.n	8003b40 <HAL_I2S_Init+0x1d8>
 8003b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b40:	2202      	movs	r2, #2
 8003b42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <HAL_I2S_Init+0x278>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2S_Init+0x1ea>
 8003b4e:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <HAL_I2S_Init+0x27c>)
 8003b50:	e001      	b.n	8003b56 <HAL_I2S_Init+0x1ee>
 8003b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b62:	d003      	beq.n	8003b6c <HAL_I2S_Init+0x204>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	e001      	b.n	8003b78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b82:	4313      	orrs	r3, r2
 8003b84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	897b      	ldrh	r3, [r7, #10]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ba4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a0d      	ldr	r2, [pc, #52]	; (8003be0 <HAL_I2S_Init+0x278>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2S_Init+0x24c>
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <HAL_I2S_Init+0x27c>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x250>
 8003bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb8:	897a      	ldrh	r2, [r7, #10]
 8003bba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	08003cdf 	.word	0x08003cdf
 8003bd8:	cccccccd 	.word	0xcccccccd
 8003bdc:	08003df5 	.word	0x08003df5
 8003be0:	40003800 	.word	0x40003800
 8003be4:	40003400 	.word	0x40003400

08003be8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	881a      	ldrh	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c9a      	adds	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c68:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffb8 	bl	8003be8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	b292      	uxth	r2, r2
 8003c94:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10e      	bne.n	8003cd6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff93 	bl	8003bfc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d13a      	bne.n	8003d70 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d109      	bne.n	8003d18 <I2S_IRQHandler+0x3a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d102      	bne.n	8003d18 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ffb4 	bl	8003c80 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d126      	bne.n	8003d70 <I2S_IRQHandler+0x92>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d11f      	bne.n	8003d70 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f043 0202 	orr.w	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff50 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d136      	bne.n	8003dea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d109      	bne.n	8003d9a <I2S_IRQHandler+0xbc>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d102      	bne.n	8003d9a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff45 	bl	8003c24 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d122      	bne.n	8003dea <I2S_IRQHandler+0x10c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d11b      	bne.n	8003dea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff13 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4aa2      	ldr	r2, [pc, #648]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e0e:	4ba2      	ldr	r3, [pc, #648]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e10:	e001      	b.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a9b      	ldr	r2, [pc, #620]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e2c:	4b9a      	ldr	r3, [pc, #616]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e2e:	e001      	b.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e40:	d004      	beq.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 8099 	bne.w	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d107      	bne.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f925 	bl	80040b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d107      	bne.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9c8 	bl	8004210 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d13a      	bne.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d035      	beq.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a7e      	ldr	r2, [pc, #504]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e9e:	4b7e      	ldr	r3, [pc, #504]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ea0:	e001      	b.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4979      	ldr	r1, [pc, #484]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003eae:	428b      	cmp	r3, r1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eb2:	4b79      	ldr	r3, [pc, #484]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003eb4:	e001      	b.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ebe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ece:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f043 0202 	orr.w	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fe88 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	f040 80be 	bne.w	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80b8 	beq.w	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f26:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a59      	ldr	r2, [pc, #356]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f32:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f34:	e001      	b.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4954      	ldr	r1, [pc, #336]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f46:	4b54      	ldr	r3, [pc, #336]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f52:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fe4a 	bl	8003c10 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f7c:	e084      	b.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d107      	bne.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8be 	bl	8004114 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8fd 	bl	80041ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d12f      	bne.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d02a      	beq.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fd4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a2e      	ldr	r2, [pc, #184]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fe0:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fe2:	e001      	b.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fe4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4929      	ldr	r1, [pc, #164]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ff4:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ff6:	e001      	b.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ffc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004000:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f043 0202 	orr.w	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fdfa 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b08      	cmp	r3, #8
 8004024:	d131      	bne.n	800408a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d02c      	beq.n	800408a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a17      	ldr	r2, [pc, #92]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800403a:	4b17      	ldr	r3, [pc, #92]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800403c:	e001      	b.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800403e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4912      	ldr	r1, [pc, #72]	; (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800404a:	428b      	cmp	r3, r1
 800404c:	d101      	bne.n	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004050:	e001      	b.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004056:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800405a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800406a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	f043 0204 	orr.w	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fdc5 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004086:	e000      	b.n	800408a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004088:	bf00      	nop
}
 800408a:	bf00      	nop
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40003800 	.word	0x40003800
 8004098:	40003400 	.word	0x40003400

0800409c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c99      	adds	r1, r3, #2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6251      	str	r1, [r2, #36]	; 0x24
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d113      	bne.n	800410a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ffc9 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c99      	adds	r1, r3, #2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6251      	str	r1, [r2, #36]	; 0x24
 8004126:	8819      	ldrh	r1, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <I2SEx_TxISR_I2SExt+0x90>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <I2SEx_TxISR_I2SExt+0x22>
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004134:	e001      	b.n	800413a <I2SEx_TxISR_I2SExt+0x26>
 8004136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800413a:	460a      	mov	r2, r1
 800413c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d121      	bne.n	800419a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <I2SEx_TxISR_I2SExt+0x90>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <I2SEx_TxISR_I2SExt+0x50>
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004162:	e001      	b.n	8004168 <I2SEx_TxISR_I2SExt+0x54>
 8004164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	490d      	ldr	r1, [pc, #52]	; (80041a4 <I2SEx_TxISR_I2SExt+0x90>)
 8004170:	428b      	cmp	r3, r1
 8004172:	d101      	bne.n	8004178 <I2SEx_TxISR_I2SExt+0x64>
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004176:	e001      	b.n	800417c <I2SEx_TxISR_I2SExt+0x68>
 8004178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004180:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff81 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40003800 	.word	0x40003800
 80041a8:	40003400 	.word	0x40003400

080041ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68d8      	ldr	r0, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	1c99      	adds	r1, r3, #2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041c4:	b282      	uxth	r2, r0
 80041c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d113      	bne.n	8004208 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff ff4a 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <I2SEx_RxISR_I2SExt+0x90>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <I2SEx_RxISR_I2SExt+0x16>
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004224:	e001      	b.n	800422a <I2SEx_RxISR_I2SExt+0x1a>
 8004226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800422a:	68d8      	ldr	r0, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	1c99      	adds	r1, r3, #2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004236:	b282      	uxth	r2, r0
 8004238:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d121      	bne.n	8004296 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <I2SEx_RxISR_I2SExt+0x90>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <I2SEx_RxISR_I2SExt+0x50>
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <I2SEx_RxISR_I2SExt+0x94>)
 800425e:	e001      	b.n	8004264 <I2SEx_RxISR_I2SExt+0x54>
 8004260:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	490d      	ldr	r1, [pc, #52]	; (80042a0 <I2SEx_RxISR_I2SExt+0x90>)
 800426c:	428b      	cmp	r3, r1
 800426e:	d101      	bne.n	8004274 <I2SEx_RxISR_I2SExt+0x64>
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004272:	e001      	b.n	8004278 <I2SEx_RxISR_I2SExt+0x68>
 8004274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004278:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800427c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff03 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40003800 	.word	0x40003800
 80042a4:	40003400 	.word	0x40003400

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e264      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d075      	beq.n	80043b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c6:	4ba3      	ldr	r3, [pc, #652]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d00c      	beq.n	80042ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4ba0      	ldr	r3, [pc, #640]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d112      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042de:	4b9d      	ldr	r3, [pc, #628]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ea:	d10b      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	4b99      	ldr	r3, [pc, #612]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05b      	beq.n	80043b0 <HAL_RCC_OscConfig+0x108>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d157      	bne.n	80043b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e23f      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x74>
 800430e:	4b91      	ldr	r3, [pc, #580]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a90      	ldr	r2, [pc, #576]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x98>
 8004326:	4b8b      	ldr	r3, [pc, #556]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a8a      	ldr	r2, [pc, #552]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a87      	ldr	r2, [pc, #540]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 8004340:	4b84      	ldr	r3, [pc, #528]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a83      	ldr	r2, [pc, #524]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b81      	ldr	r3, [pc, #516]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a80      	ldr	r2, [pc, #512]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fc fd36 	bl	8000dd0 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fc fd32 	bl	8000dd0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e204      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b76      	ldr	r3, [pc, #472]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xc0>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fc fd22 	bl	8000dd0 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004390:	f7fc fd1e 	bl	8000dd0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1f0      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	4b6c      	ldr	r3, [pc, #432]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0xe8>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043be:	4b65      	ldr	r3, [pc, #404]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ca:	4b62      	ldr	r3, [pc, #392]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11c      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b5f      	ldr	r3, [pc, #380]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	4b5c      	ldr	r3, [pc, #368]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1c4      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b56      	ldr	r3, [pc, #344]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4952      	ldr	r1, [pc, #328]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440e:	e03a      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <HAL_RCC_OscConfig+0x2b0>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fc fcd7 	bl	8000dd0 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004426:	f7fc fcd3 	bl	8000dd0 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1a5      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	4b46      	ldr	r3, [pc, #280]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4940      	ldr	r1, [pc, #256]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e015      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b3f      	ldr	r3, [pc, #252]	; (8004558 <HAL_RCC_OscConfig+0x2b0>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fc fcb6 	bl	8000dd0 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004468:	f7fc fcb2 	bl	8000dd0 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e184      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	4b36      	ldr	r3, [pc, #216]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d030      	beq.n	80044f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <HAL_RCC_OscConfig+0x2b4>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fc fc96 	bl	8000dd0 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fc fc92 	bl	8000dd0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e164      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x200>
 80044c6:	e015      	b.n	80044f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c8:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_OscConfig+0x2b4>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ce:	f7fc fc7f 	bl	8000dd0 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d6:	f7fc fc7b 	bl	8000dd0 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e14d      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f0      	bne.n	80044d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80a0 	beq.w	8004642 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a0e      	ldr	r2, [pc, #56]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452e:	2301      	movs	r3, #1
 8004530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCC_OscConfig+0x2b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d121      	bne.n	8004582 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_RCC_OscConfig+0x2b8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a07      	ldr	r2, [pc, #28]	; (8004560 <HAL_RCC_OscConfig+0x2b8>)
 8004544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454a:	f7fc fc41 	bl	8000dd0 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004550:	e011      	b.n	8004576 <HAL_RCC_OscConfig+0x2ce>
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800
 8004558:	42470000 	.word	0x42470000
 800455c:	42470e80 	.word	0x42470e80
 8004560:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004564:	f7fc fc34 	bl	8000dd0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e106      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004576:	4b85      	ldr	r3, [pc, #532]	; (800478c <HAL_RCC_OscConfig+0x4e4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d106      	bne.n	8004598 <HAL_RCC_OscConfig+0x2f0>
 800458a:	4b81      	ldr	r3, [pc, #516]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a80      	ldr	r2, [pc, #512]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6713      	str	r3, [r2, #112]	; 0x70
 8004596:	e01c      	b.n	80045d2 <HAL_RCC_OscConfig+0x32a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d10c      	bne.n	80045ba <HAL_RCC_OscConfig+0x312>
 80045a0:	4b7b      	ldr	r3, [pc, #492]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	4a7a      	ldr	r2, [pc, #488]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70
 80045ac:	4b78      	ldr	r3, [pc, #480]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a77      	ldr	r2, [pc, #476]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	e00b      	b.n	80045d2 <HAL_RCC_OscConfig+0x32a>
 80045ba:	4b75      	ldr	r3, [pc, #468]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a74      	ldr	r2, [pc, #464]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	4b72      	ldr	r3, [pc, #456]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	4a71      	ldr	r2, [pc, #452]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d015      	beq.n	8004606 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045da:	f7fc fbf9 	bl	8000dd0 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fc fbf5 	bl	8000dd0 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e0c5      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	4b65      	ldr	r3, [pc, #404]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ee      	beq.n	80045e2 <HAL_RCC_OscConfig+0x33a>
 8004604:	e014      	b.n	8004630 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004606:	f7fc fbe3 	bl	8000dd0 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fc fbdf 	bl	8000dd0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	; 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0af      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004624:	4b5a      	ldr	r3, [pc, #360]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1ee      	bne.n	800460e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004636:	4b56      	ldr	r3, [pc, #344]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	4a55      	ldr	r2, [pc, #340]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 800463c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 809b 	beq.w	8004782 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800464c:	4b50      	ldr	r3, [pc, #320]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d05c      	beq.n	8004712 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d141      	bne.n	80046e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004660:	4b4c      	ldr	r3, [pc, #304]	; (8004794 <HAL_RCC_OscConfig+0x4ec>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fc fbb3 	bl	8000dd0 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466e:	f7fc fbaf 	bl	8000dd0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e081      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004680:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	019b      	lsls	r3, r3, #6
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	4937      	ldr	r1, [pc, #220]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b6:	4b37      	ldr	r3, [pc, #220]	; (8004794 <HAL_RCC_OscConfig+0x4ec>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7fc fb88 	bl	8000dd0 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fc fb84 	bl	8000dd0 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e056      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x41c>
 80046e2:	e04e      	b.n	8004782 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e4:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <HAL_RCC_OscConfig+0x4ec>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fc fb71 	bl	8000dd0 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fc fb6d 	bl	8000dd0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e03f      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004704:	4b22      	ldr	r3, [pc, #136]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x44a>
 8004710:	e037      	b.n	8004782 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e032      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800471e:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d028      	beq.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d121      	bne.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d11a      	bne.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800474e:	4013      	ands	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004754:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004756:	4293      	cmp	r3, r2
 8004758:	d111      	bne.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d107      	bne.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40007000 	.word	0x40007000
 8004790:	40023800 	.word	0x40023800
 8004794:	42470060 	.word	0x42470060

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cc      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b68      	ldr	r3, [pc, #416]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90c      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800480e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d119      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d003      	beq.n	8004856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e067      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b37      	ldr	r3, [pc, #220]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4934      	ldr	r1, [pc, #208]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fc faa2 	bl	8000dd0 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fc fa9e 	bl	8000dd0 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20c      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fc fa02 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
 8004958:	08008490 	.word	0x08008490
 800495c:	20000000 	.word	0x20000000
 8004960:	20000004 	.word	0x20000004

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	2300      	movs	r3, #0
 8004976:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497c:	4b67      	ldr	r3, [pc, #412]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d00d      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004988:	2b08      	cmp	r3, #8
 800498a:	f200 80bd 	bhi.w	8004b08 <HAL_RCC_GetSysClockFreq+0x1a4>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x34>
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x3a>
 8004996:	e0b7      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b61      	ldr	r3, [pc, #388]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800499a:	60bb      	str	r3, [r7, #8]
       break;
 800499c:	e0b7      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499e:	4b61      	ldr	r3, [pc, #388]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049a0:	60bb      	str	r3, [r7, #8]
      break;
 80049a2:	e0b4      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a4:	4b5d      	ldr	r3, [pc, #372]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ae:	4b5b      	ldr	r3, [pc, #364]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d04d      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b58      	ldr	r3, [pc, #352]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	461a      	mov	r2, r3
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ca:	f04f 0100 	mov.w	r1, #0
 80049ce:	ea02 0800 	and.w	r8, r2, r0
 80049d2:	ea03 0901 	and.w	r9, r3, r1
 80049d6:	4640      	mov	r0, r8
 80049d8:	4649      	mov	r1, r9
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	014b      	lsls	r3, r1, #5
 80049e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049e8:	0142      	lsls	r2, r0, #5
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	ebb0 0008 	subs.w	r0, r0, r8
 80049f2:	eb61 0109 	sbc.w	r1, r1, r9
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	018b      	lsls	r3, r1, #6
 8004a00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a04:	0182      	lsls	r2, r0, #6
 8004a06:	1a12      	subs	r2, r2, r0
 8004a08:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0c:	f04f 0000 	mov.w	r0, #0
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	00d9      	lsls	r1, r3, #3
 8004a16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a1a:	00d0      	lsls	r0, r2, #3
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	eb12 0208 	adds.w	r2, r2, r8
 8004a24:	eb43 0309 	adc.w	r3, r3, r9
 8004a28:	f04f 0000 	mov.w	r0, #0
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	0259      	lsls	r1, r3, #9
 8004a32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a36:	0250      	lsls	r0, r2, #9
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	f7fb fbbe 	bl	80001c8 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e04a      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a56:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	ea02 0400 	and.w	r4, r2, r0
 8004a6e:	ea03 0501 	and.w	r5, r3, r1
 8004a72:	4620      	mov	r0, r4
 8004a74:	4629      	mov	r1, r5
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	014b      	lsls	r3, r1, #5
 8004a80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a84:	0142      	lsls	r2, r0, #5
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	1b00      	subs	r0, r0, r4
 8004a8c:	eb61 0105 	sbc.w	r1, r1, r5
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	018b      	lsls	r3, r1, #6
 8004a9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a9e:	0182      	lsls	r2, r0, #6
 8004aa0:	1a12      	subs	r2, r2, r0
 8004aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa6:	f04f 0000 	mov.w	r0, #0
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	00d9      	lsls	r1, r3, #3
 8004ab0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ab4:	00d0      	lsls	r0, r2, #3
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	1912      	adds	r2, r2, r4
 8004abc:	eb45 0303 	adc.w	r3, r5, r3
 8004ac0:	f04f 0000 	mov.w	r0, #0
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	0299      	lsls	r1, r3, #10
 8004aca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ace:	0290      	lsls	r0, r2, #10
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	f7fb fb72 	bl	80001c8 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4613      	mov	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	3301      	adds	r3, #1
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	60bb      	str	r3, [r7, #8]
      break;
 8004b06:	e002      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b0a:	60bb      	str	r3, [r7, #8]
      break;
 8004b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	00f42400 	.word	0x00f42400
 8004b24:	007a1200 	.word	0x007a1200

08004b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b2c:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20000000 	.word	0x20000000

08004b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b44:	f7ff fff0 	bl	8004b28 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0a9b      	lsrs	r3, r3, #10
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800
 8004b64:	080084a0 	.word	0x080084a0

08004b68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d035      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b90:	4b62      	ldr	r3, [pc, #392]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b96:	f7fc f91b 	bl	8000dd0 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b9e:	f7fc f917 	bl	8000dd0 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e0b0      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb0:	4b5b      	ldr	r3, [pc, #364]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f0      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	019a      	lsls	r2, r3, #6
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	071b      	lsls	r3, r3, #28
 8004bc8:	4955      	ldr	r1, [pc, #340]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bd0:	4b52      	ldr	r3, [pc, #328]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd6:	f7fc f8fb 	bl	8000dd0 <HAL_GetTick>
 8004bda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bde:	f7fc f8f7 	bl	8000dd0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e090      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bf0:	4b4b      	ldr	r3, [pc, #300]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8083 	beq.w	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	4b44      	ldr	r3, [pc, #272]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	4a43      	ldr	r2, [pc, #268]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1a:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c26:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a3e      	ldr	r2, [pc, #248]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c32:	f7fc f8cd 	bl	8000dd0 <HAL_GetTick>
 8004c36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c3a:	f7fc f8c9 	bl	8000dd0 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e062      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c4c:	4b35      	ldr	r3, [pc, #212]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c58:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d02f      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d028      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c76:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c80:	4b29      	ldr	r3, [pc, #164]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c86:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c8c:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c92:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d114      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c9e:	f7fc f897 	bl	8000dd0 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fc f893 	bl	8000dd0 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e02a      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ee      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd4:	d10d      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cd6:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cea:	490d      	ldr	r1, [pc, #52]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]
 8004cf0:	e005      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cfc:	6093      	str	r3, [r2, #8]
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0a:	4905      	ldr	r1, [pc, #20]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	42470068 	.word	0x42470068
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40007000 	.word	0x40007000
 8004d28:	42470e40 	.word	0x42470e40

08004d2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d13e      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d4a:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d12f      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d60:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d62:	617b      	str	r3, [r7, #20]
          break;
 8004d64:	e02f      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d66:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d72:	d108      	bne.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d74:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d7c:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	e007      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d8e:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9c:	099b      	lsrs	r3, r3, #6
 8004d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db0:	0f1b      	lsrs	r3, r3, #28
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]
          break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
          break;
 8004dc4:	bf00      	nop
        }
      }
      break;
 8004dc6:	bf00      	nop
    }
  }
  return frequency;
 8004dc8:	697b      	ldr	r3, [r7, #20]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	00bb8000 	.word	0x00bb8000
 8004de0:	007a1200 	.word	0x007a1200
 8004de4:	00f42400 	.word	0x00f42400

08004de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e07b      	b.n	8004ef2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d108      	bne.n	8004e14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0a:	d009      	beq.n	8004e20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	61da      	str	r2, [r3, #28]
 8004e12:	e005      	b.n	8004e20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fb fe74 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	ea42 0103 	orr.w	r1, r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	f003 0104 	and.w	r1, r3, #4
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f003 0210 	and.w	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004efa:	b084      	sub	sp, #16
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	f107 001c 	add.w	r0, r7, #28
 8004f08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d122      	bne.n	8004f58 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f99f 	bl	8005290 <USB_CoreReset>
 8004f52:	4603      	mov	r3, r0
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	e01a      	b.n	8004f8e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f993 	bl	8005290 <USB_CoreReset>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f80:	e005      	b.n	8004f8e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d10b      	bne.n	8004fac <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f043 0206 	orr.w	r2, r3, #6
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f043 0220 	orr.w	r2, r3, #32
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fb8:	b004      	add	sp, #16
 8004fba:	4770      	bx	lr

08004fbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f043 0201 	orr.w	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f023 0201 	bic.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d115      	bne.n	800504e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800502e:	2001      	movs	r0, #1
 8005030:	f7fb feda 	bl	8000de8 <HAL_Delay>
      ms++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3301      	adds	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f919 	bl	8005272 <USB_GetMode>
 8005040:	4603      	mov	r3, r0
 8005042:	2b01      	cmp	r3, #1
 8005044:	d01e      	beq.n	8005084 <USB_SetCurrentMode+0x84>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b31      	cmp	r3, #49	; 0x31
 800504a:	d9f0      	bls.n	800502e <USB_SetCurrentMode+0x2e>
 800504c:	e01a      	b.n	8005084 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d115      	bne.n	8005080 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005060:	2001      	movs	r0, #1
 8005062:	f7fb fec1 	bl	8000de8 <HAL_Delay>
      ms++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3301      	adds	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f900 	bl	8005272 <USB_GetMode>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <USB_SetCurrentMode+0x84>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b31      	cmp	r3, #49	; 0x31
 800507c:	d9f0      	bls.n	8005060 <USB_SetCurrentMode+0x60>
 800507e:	e001      	b.n	8005084 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e005      	b.n	8005090 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b32      	cmp	r3, #50	; 0x32
 8005088:	d101      	bne.n	800508e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3301      	adds	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	4a08      	ldr	r2, [pc, #32]	; (80050dc <USB_FlushTxFifo+0x44>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e006      	b.n	80050d0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d0f1      	beq.n	80050b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	00030d40 	.word	0x00030d40

080050e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2210      	movs	r2, #16
 80050f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	4a08      	ldr	r2, [pc, #32]	; (800511c <USB_FlushRxFifo+0x3c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e006      	b.n	8005110 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d0f1      	beq.n	80050f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	00030d40 	.word	0x00030d40

08005120 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005120:	b480      	push	{r7}
 8005122:	b089      	sub	sp, #36	; 0x24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	460b      	mov	r3, r1
 8005130:	71fb      	strb	r3, [r7, #7]
 8005132:	4613      	mov	r3, r2
 8005134:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800513e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005142:	2b00      	cmp	r3, #0
 8005144:	d123      	bne.n	800518e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005146:	88bb      	ldrh	r3, [r7, #4]
 8005148:	3303      	adds	r3, #3
 800514a:	089b      	lsrs	r3, r3, #2
 800514c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e018      	b.n	8005186 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	031a      	lsls	r2, r3, #12
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005160:	461a      	mov	r2, r3
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	3301      	adds	r3, #1
 800516c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	3301      	adds	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	3301      	adds	r3, #1
 8005178:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3301      	adds	r3, #1
 800517e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	3301      	adds	r3, #1
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	429a      	cmp	r2, r3
 800518c:	d3e2      	bcc.n	8005154 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3724      	adds	r7, #36	; 0x24
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800519c:	b480      	push	{r7}
 800519e:	b08b      	sub	sp, #44	; 0x2c
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	e014      	b.n	80051f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	3301      	adds	r3, #1
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	3301      	adds	r3, #1
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	3301      	adds	r3, #1
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	3301      	adds	r3, #1
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	3301      	adds	r3, #1
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	6a3a      	ldr	r2, [r7, #32]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d3e6      	bcc.n	80051c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051fa:	8bfb      	ldrh	r3, [r7, #30]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01e      	beq.n	800523e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520a:	461a      	mov	r2, r3
 800520c:	f107 0310 	add.w	r3, r7, #16
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
 8005220:	b2da      	uxtb	r2, r3
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	701a      	strb	r2, [r3, #0]
      i++;
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	3301      	adds	r3, #1
 800522a:	623b      	str	r3, [r7, #32]
      pDest++;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	3301      	adds	r3, #1
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005232:	8bfb      	ldrh	r3, [r7, #30]
 8005234:	3b01      	subs	r3, #1
 8005236:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005238:	8bfb      	ldrh	r3, [r7, #30]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1ea      	bne.n	8005214 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005240:	4618      	mov	r0, r3
 8005242:	372c      	adds	r7, #44	; 0x2c
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4013      	ands	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005264:	68fb      	ldr	r3, [r7, #12]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0301 	and.w	r3, r3, #1
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <USB_CoreReset+0x60>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e01a      	b.n	80052e2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	daf3      	bge.n	800529c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3301      	adds	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <USB_CoreReset+0x60>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d901      	bls.n	80052d4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e006      	b.n	80052e2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d0f1      	beq.n	80052c4 <USB_CoreReset+0x34>

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	00030d40 	.word	0x00030d40

080052f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052f4:	b084      	sub	sp, #16
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	f107 001c 	add.w	r0, r7, #28
 8005302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d018      	beq.n	8005378 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10a      	bne.n	8005362 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	e014      	b.n	800538c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e009      	b.n	800538c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005386:	f023 0304 	bic.w	r3, r3, #4
 800538a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800538c:	2110      	movs	r1, #16
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fe82 	bl	8005098 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fea3 	bl	80050e0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e015      	b.n	80053cc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	461a      	mov	r2, r3
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c0:	461a      	mov	r2, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d3e5      	bcc.n	80053a0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f04f 32ff 	mov.w	r2, #4294967295
 80053e0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <USB_HostInit+0x154>)
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a13      	ldr	r2, [pc, #76]	; (800544c <USB_HostInit+0x158>)
 8005400:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005404:	e009      	b.n	800541a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2280      	movs	r2, #128	; 0x80
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a10      	ldr	r2, [pc, #64]	; (8005450 <USB_HostInit+0x15c>)
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a0f      	ldr	r2, [pc, #60]	; (8005454 <USB_HostInit+0x160>)
 8005416:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f043 0210 	orr.w	r2, r3, #16
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <USB_HostInit+0x164>)
 8005432:	4313      	orrs	r3, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005444:	b004      	add	sp, #16
 8005446:	4770      	bx	lr
 8005448:	01000200 	.word	0x01000200
 800544c:	00e00300 	.word	0x00e00300
 8005450:	00600080 	.word	0x00600080
 8005454:	004000e0 	.word	0x004000e0
 8005458:	a3200008 	.word	0xa3200008

0800545c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d107      	bne.n	80054ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a4:	461a      	mov	r2, r3
 80054a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054aa:	6053      	str	r3, [r2, #4]
 80054ac:	e009      	b.n	80054c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d106      	bne.n	80054c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ba:	461a      	mov	r2, r3
 80054bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80054c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005500:	2064      	movs	r0, #100	; 0x64
 8005502:	f7fb fc71 	bl	8000de8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800550e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005512:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005514:	200a      	movs	r0, #10
 8005516:	f7fb fc67 	bl	8000de8 <HAL_Delay>

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005548:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <USB_DriveVbus+0x44>
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d106      	bne.n	8005568 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005562:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005566:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d109      	bne.n	8005588 <USB_DriveVbus+0x64>
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005586:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	0c5b      	lsrs	r3, r3, #17
 80055b4:	f003 0303 	and.w	r3, r3, #3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	b29b      	uxth	r3, r3
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	461a      	mov	r2, r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	70fb      	strb	r3, [r7, #3]
 80055fa:	460b      	mov	r3, r1
 80055fc:	70bb      	strb	r3, [r7, #2]
 80055fe:	4613      	mov	r3, r2
 8005600:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005616:	461a      	mov	r2, r3
 8005618:	f04f 33ff 	mov.w	r3, #4294967295
 800561c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800561e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005622:	2b03      	cmp	r3, #3
 8005624:	d87e      	bhi.n	8005724 <USB_HC_Init+0x13c>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <USB_HC_Init+0x44>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	0800563d 	.word	0x0800563d
 8005630:	080056e7 	.word	0x080056e7
 8005634:	0800563d 	.word	0x0800563d
 8005638:	080056a9 	.word	0x080056a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005648:	461a      	mov	r2, r3
 800564a:	f240 439d 	movw	r3, #1181	; 0x49d
 800564e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005650:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005654:	2b00      	cmp	r3, #0
 8005656:	da10      	bge.n	800567a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	440a      	add	r2, r1
 800566e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005676:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005678:	e057      	b.n	800572a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d051      	beq.n	800572a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	78fa      	ldrb	r2, [r7, #3]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	440a      	add	r2, r1
 800569c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056a4:	60d3      	str	r3, [r2, #12]
      break;
 80056a6:	e040      	b.n	800572a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b4:	461a      	mov	r2, r3
 80056b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80056ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	da34      	bge.n	800572e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056e4:	e023      	b.n	800572e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f2:	461a      	mov	r2, r3
 80056f4:	f240 2325 	movw	r3, #549	; 0x225
 80056f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	da17      	bge.n	8005732 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	440a      	add	r2, r1
 8005718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800571c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005720:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005722:	e006      	b.n	8005732 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	77fb      	strb	r3, [r7, #31]
      break;
 8005728:	e004      	b.n	8005734 <USB_HC_Init+0x14c>
      break;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <USB_HC_Init+0x14c>
      break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <USB_HC_Init+0x14c>
      break;
 8005732:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	2101      	movs	r1, #1
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	6939      	ldr	r1, [r7, #16]
 800574a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800574e:	4313      	orrs	r3, r2
 8005750:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800575e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005762:	2b00      	cmp	r3, #0
 8005764:	da03      	bge.n	800576e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e001      	b.n	8005772 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ff0f 	bl	8005596 <USB_GetHostSpeed>
 8005778:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800577a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800577e:	2b02      	cmp	r3, #2
 8005780:	d106      	bne.n	8005790 <USB_HC_Init+0x1a8>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d003      	beq.n	8005790 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e001      	b.n	8005794 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005794:	787b      	ldrb	r3, [r7, #1]
 8005796:	059b      	lsls	r3, r3, #22
 8005798:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800579c:	78bb      	ldrb	r3, [r7, #2]
 800579e:	02db      	lsls	r3, r3, #11
 80057a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057aa:	049b      	lsls	r3, r3, #18
 80057ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	0159      	lsls	r1, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057d0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80057d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d10f      	bne.n	80057fa <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	0151      	lsls	r1, r2, #5
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	440a      	add	r2, r1
 80057f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057f8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	; 0x30
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800581c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005820:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d02d      	beq.n	800588a <USB_HC_StartXfer+0x86>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	791b      	ldrb	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d129      	bne.n	800588a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d117      	bne.n	800586c <USB_HC_StartXfer+0x68>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	79db      	ldrb	r3, [r3, #7]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <USB_HC_StartXfer+0x48>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	79db      	ldrb	r3, [r3, #7]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d10f      	bne.n	800586c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	6a3a      	ldr	r2, [r7, #32]
 8005860:	440a      	add	r2, r1
 8005862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <USB_HC_StartXfer+0x86>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	795b      	ldrb	r3, [r3, #5]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d107      	bne.n	800588a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	4619      	mov	r1, r3
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 fa2f 	bl	8005ce4 <USB_DoPing>
      return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e0f8      	b.n	8005a7c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d018      	beq.n	80058c4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	8912      	ldrh	r2, [r2, #8]
 800589a:	4413      	add	r3, r2
 800589c:	3b01      	subs	r3, #1
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	8912      	ldrh	r2, [r2, #8]
 80058a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80058a6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80058a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80058aa:	8b7b      	ldrh	r3, [r7, #26]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d90b      	bls.n	80058c8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80058b0:	8b7b      	ldrh	r3, [r7, #26]
 80058b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	8912      	ldrh	r2, [r2, #8]
 80058ba:	fb02 f203 	mul.w	r2, r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	611a      	str	r2, [r3, #16]
 80058c2:	e001      	b.n	80058c8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80058c4:	2301      	movs	r3, #1
 80058c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	78db      	ldrb	r3, [r3, #3]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	8912      	ldrh	r2, [r2, #8]
 80058d6:	fb02 f203 	mul.w	r2, r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	611a      	str	r2, [r3, #16]
 80058de:	e003      	b.n	80058e8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058f2:	04d9      	lsls	r1, r3, #19
 80058f4:	4b63      	ldr	r3, [pc, #396]	; (8005a84 <USB_HC_StartXfer+0x280>)
 80058f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	7a9b      	ldrb	r3, [r3, #10]
 80058fe:	075b      	lsls	r3, r3, #29
 8005900:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	0148      	lsls	r0, r1, #5
 8005908:	6a39      	ldr	r1, [r7, #32]
 800590a:	4401      	add	r1, r0
 800590c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005910:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005912:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592a:	460a      	mov	r2, r1
 800592c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf0c      	ite	eq
 800593e:	2301      	moveq	r3, #1
 8005940:	2300      	movne	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	4413      	add	r3, r2
 800594e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	6a3a      	ldr	r2, [r7, #32]
 800595a:	440a      	add	r2, r1
 800595c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005960:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005964:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	4413      	add	r3, r2
 800596e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	7e7b      	ldrb	r3, [r7, #25]
 8005976:	075b      	lsls	r3, r3, #29
 8005978:	69f9      	ldr	r1, [r7, #28]
 800597a:	0148      	lsls	r0, r1, #5
 800597c:	6a39      	ldr	r1, [r7, #32]
 800597e:	4401      	add	r1, r0
 8005980:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800599e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	78db      	ldrb	r3, [r3, #3]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	e003      	b.n	80059ba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059b8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	461a      	mov	r2, r3
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	e04e      	b.n	8005a7c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	78db      	ldrb	r3, [r3, #3]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d149      	bne.n	8005a7a <USB_HC_StartXfer+0x276>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d045      	beq.n	8005a7a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	79db      	ldrb	r3, [r3, #7]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d830      	bhi.n	8005a58 <USB_HC_StartXfer+0x254>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <USB_HC_StartXfer+0x1f8>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a31 	.word	0x08005a31
 8005a04:	08005a0d 	.word	0x08005a0d
 8005a08:	08005a31 	.word	0x08005a31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	3303      	adds	r3, #3
 8005a12:	089b      	lsrs	r3, r3, #2
 8005a14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a16:	8afa      	ldrh	r2, [r7, #22]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d91c      	bls.n	8005a5c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a2e:	e015      	b.n	8005a5c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	3303      	adds	r3, #3
 8005a36:	089b      	lsrs	r3, r3, #2
 8005a38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a3a:	8afa      	ldrh	r2, [r7, #22]
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d90a      	bls.n	8005a60 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a56:	e003      	b.n	8005a60 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a58:	bf00      	nop
 8005a5a:	e002      	b.n	8005a62 <USB_HC_StartXfer+0x25e>
        break;
 8005a5c:	bf00      	nop
 8005a5e:	e000      	b.n	8005a62 <USB_HC_StartXfer+0x25e>
        break;
 8005a60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	68d9      	ldr	r1, [r3, #12]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	785a      	ldrb	r2, [r3, #1]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2000      	movs	r0, #0
 8005a72:	9000      	str	r0, [sp, #0]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff fb53 	bl	8005120 <USB_WritePacket>
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3728      	adds	r7, #40	; 0x28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	1ff80000 	.word	0x1ff80000

08005a88 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	b29b      	uxth	r3, r3
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b089      	sub	sp, #36	; 0x24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	0c9b      	lsrs	r3, r3, #18
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	0fdb      	lsrs	r3, r3, #31
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d104      	bne.n	8005b04 <USB_HC_Halt+0x5a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e0e8      	b.n	8005cd6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <USB_HC_Halt+0x66>
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d173      	bne.n	8005bf8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b2e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f040 80cb 	bne.w	8005cd4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d143      	bne.n	8005bd2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b68:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b88:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ba8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	3301      	adds	r3, #1
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb6:	d81d      	bhi.n	8005bf4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bce:	d0ec      	beq.n	8005baa <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bd0:	e080      	b.n	8005cd4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bf0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bf2:	e06f      	b.n	8005cd4 <USB_HC_Halt+0x22a>
            break;
 8005bf4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bf6:	e06d      	b.n	8005cd4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c16:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d143      	bne.n	8005cb0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c86:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c94:	d81d      	bhi.n	8005cd2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cac:	d0ec      	beq.n	8005c88 <USB_HC_Halt+0x1de>
 8005cae:	e011      	b.n	8005cd4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	e000      	b.n	8005cd4 <USB_HC_Halt+0x22a>
          break;
 8005cd2:	bf00      	nop
    }
  }

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3724      	adds	r7, #36	; 0x24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	04da      	lsls	r2, r3, #19
 8005d00:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <USB_DoPing+0x74>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d2c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d34:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d42:	461a      	mov	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	1ff80000 	.word	0x1ff80000

08005d5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff f936 	bl	8004fde <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005d72:	2110      	movs	r1, #16
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff f98f 	bl	8005098 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff f9b0 	bl	80050e0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	e01f      	b.n	8005dc6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005da4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b0f      	cmp	r3, #15
 8005dca:	d9dc      	bls.n	8005d86 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	e034      	b.n	8005e3c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005de8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005df8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	461a      	mov	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e18:	d80c      	bhi.n	8005e34 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e30:	d0ec      	beq.n	8005e0c <USB_StopHost+0xb0>
 8005e32:	e000      	b.n	8005e36 <USB_StopHost+0xda>
        break;
 8005e34:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b0f      	cmp	r3, #15
 8005e40:	d9c7      	bls.n	8005dd2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f04f 32ff 	mov.w	r2, #4294967295
 8005e56:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff f8af 	bl	8004fbc <USB_EnableGlobalInt>

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af04      	add	r7, sp, #16
 8005e6e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e70:	2301      	movs	r3, #1
 8005e72:	2202      	movs	r2, #2
 8005e74:	2102      	movs	r1, #2
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fc66 	bl	8006748 <USBH_FindInterface>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2bff      	cmp	r3, #255	; 0xff
 8005e84:	d002      	beq.n	8005e8c <USBH_CDC_InterfaceInit+0x24>
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d901      	bls.n	8005e90 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e13d      	b.n	800610c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fc3b 	bl	8006710 <USBH_SelectInterface>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e131      	b.n	800610c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005eae:	2050      	movs	r0, #80	; 0x50
 8005eb0:	f002 fa00 	bl	80082b4 <malloc>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e11f      	b.n	800610c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005ecc:	2250      	movs	r2, #80	; 0x50
 8005ece:	2100      	movs	r1, #0
 8005ed0:	68b8      	ldr	r0, [r7, #8]
 8005ed2:	f002 f9ff 	bl	80082d4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	211a      	movs	r1, #26
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da15      	bge.n	8005f1a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	211a      	movs	r1, #26
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	4413      	add	r3, r2
 8005efa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005efe:	781a      	ldrb	r2, [r3, #0]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	211a      	movs	r1, #26
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f14:	881a      	ldrh	r2, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 fe32 	bl	8007b8a <USBH_AllocPipe>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	7819      	ldrb	r1, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	7858      	ldrb	r0, [r3, #1]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	8952      	ldrh	r2, [r2, #10]
 8005f46:	9202      	str	r2, [sp, #8]
 8005f48:	2203      	movs	r2, #3
 8005f4a:	9201      	str	r2, [sp, #4]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	4623      	mov	r3, r4
 8005f50:	4602      	mov	r2, r0
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 fdea 	bl	8007b2c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f002 f8f9 	bl	8008158 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f66:	2300      	movs	r3, #0
 8005f68:	2200      	movs	r2, #0
 8005f6a:	210a      	movs	r1, #10
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fbeb 	bl	8006748 <USBH_FindInterface>
 8005f72:	4603      	mov	r3, r0
 8005f74:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2bff      	cmp	r3, #255	; 0xff
 8005f7a:	d002      	beq.n	8005f82 <USBH_CDC_InterfaceInit+0x11a>
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d901      	bls.n	8005f86 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f82:	2302      	movs	r3, #2
 8005f84:	e0c2      	b.n	800610c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	211a      	movs	r1, #26
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	b25b      	sxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da16      	bge.n	8005fcc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	211a      	movs	r1, #26
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	4413      	add	r3, r2
 8005faa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	211a      	movs	r1, #26
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fc4:	881a      	ldrh	r2, [r3, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	835a      	strh	r2, [r3, #26]
 8005fca:	e015      	b.n	8005ff8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	211a      	movs	r1, #26
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fdc:	781a      	ldrb	r2, [r3, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	211a      	movs	r1, #26
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ff2:	881a      	ldrh	r2, [r3, #0]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	211a      	movs	r1, #26
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	4413      	add	r3, r2
 8006004:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b25b      	sxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	da16      	bge.n	800603e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	211a      	movs	r1, #26
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	211a      	movs	r1, #26
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	4413      	add	r3, r2
 8006032:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006036:	881a      	ldrh	r2, [r3, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	835a      	strh	r2, [r3, #26]
 800603c:	e015      	b.n	800606a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	211a      	movs	r1, #26
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	4413      	add	r3, r2
 800604a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800604e:	781a      	ldrb	r2, [r3, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	211a      	movs	r1, #26
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	4413      	add	r3, r2
 8006060:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	7b9b      	ldrb	r3, [r3, #14]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 fd8a 	bl	8007b8a <USBH_AllocPipe>
 8006076:	4603      	mov	r3, r0
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	7bdb      	ldrb	r3, [r3, #15]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fd80 	bl	8007b8a <USBH_AllocPipe>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	7b59      	ldrb	r1, [r3, #13]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	7b98      	ldrb	r0, [r3, #14]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	8b12      	ldrh	r2, [r2, #24]
 80060aa:	9202      	str	r2, [sp, #8]
 80060ac:	2202      	movs	r2, #2
 80060ae:	9201      	str	r2, [sp, #4]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	4623      	mov	r3, r4
 80060b4:	4602      	mov	r2, r0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 fd38 	bl	8007b2c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	7b19      	ldrb	r1, [r3, #12]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	7bd8      	ldrb	r0, [r3, #15]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	8b52      	ldrh	r2, [r2, #26]
 80060d4:	9202      	str	r2, [sp, #8]
 80060d6:	2202      	movs	r2, #2
 80060d8:	9201      	str	r2, [sp, #4]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	4623      	mov	r3, r4
 80060de:	4602      	mov	r2, r0
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fd23 	bl	8007b2c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	7b5b      	ldrb	r3, [r3, #13]
 80060f2:	2200      	movs	r2, #0
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f002 f82e 	bl	8008158 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	7b1b      	ldrb	r3, [r3, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f002 f827 	bl	8008158 <USBH_LL_SetToggle>

  return USBH_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	bd90      	pop	{r4, r7, pc}

08006114 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00e      	beq.n	800614c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fd18 	bl	8007b6a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f001 fd43 	bl	8007bcc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	7b1b      	ldrb	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	7b1b      	ldrb	r3, [r3, #12]
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f001 fd05 	bl	8007b6a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	7b1b      	ldrb	r3, [r3, #12]
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fd30 	bl	8007bcc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	7b5b      	ldrb	r3, [r3, #13]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00e      	beq.n	8006198 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	7b5b      	ldrb	r3, [r3, #13]
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 fcf2 	bl	8007b6a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	7b5b      	ldrb	r3, [r3, #13]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fd1d 	bl	8007bcc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f002 f889 	bl	80082c4 <free>
    phost->pActiveClass->pData = 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b8:	2200      	movs	r2, #0
 80061ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3340      	adds	r3, #64	; 0x40
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f8b1 	bl	8006346 <GetLineCoding>
 80061e4:	4603      	mov	r3, r0
 80061e6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061e8:	7afb      	ldrb	r3, [r7, #11]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d105      	bne.n	80061fa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061f4:	2102      	movs	r1, #2
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061fa:	7afb      	ldrb	r3, [r7, #11]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006224:	2b04      	cmp	r3, #4
 8006226:	d877      	bhi.n	8006318 <USBH_CDC_Process+0x114>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <USBH_CDC_Process+0x2c>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006245 	.word	0x08006245
 8006234:	0800624b 	.word	0x0800624b
 8006238:	0800627b 	.word	0x0800627b
 800623c:	080062ef 	.word	0x080062ef
 8006240:	080062fd 	.word	0x080062fd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
      break;
 8006248:	e06d      	b.n	8006326 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f897 	bl	8006384 <SetLineCoding>
 8006256:	4603      	mov	r3, r0
 8006258:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006268:	e058      	b.n	800631c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d055      	beq.n	800631c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2204      	movs	r2, #4
 8006274:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006278:	e050      	b.n	800631c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	3340      	adds	r3, #64	; 0x40
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f860 	bl	8006346 <GetLineCoding>
 8006286:	4603      	mov	r3, r0
 8006288:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d126      	bne.n	80062de <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a2:	791b      	ldrb	r3, [r3, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d13b      	bne.n	8006320 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d133      	bne.n	8006320 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d12b      	bne.n	8006320 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d124      	bne.n	8006320 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f958 	bl	800658c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062dc:	e020      	b.n	8006320 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80062de:	7bbb      	ldrb	r3, [r7, #14]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d01d      	beq.n	8006320 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2204      	movs	r2, #4
 80062e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062ec:	e018      	b.n	8006320 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f867 	bl	80063c2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f8da 	bl	80064ae <CDC_ProcessReception>
      break;
 80062fa:	e014      	b.n	8006326 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062fc:	2100      	movs	r1, #0
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 ffe3 	bl	80072ca <USBH_ClrFeature>
 8006304:	4603      	mov	r3, r0
 8006306:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006316:	e005      	b.n	8006324 <USBH_CDC_Process+0x120>

    default:
      break;
 8006318:	bf00      	nop
 800631a:	e004      	b.n	8006326 <USBH_CDC_Process+0x122>
      break;
 800631c:	bf00      	nop
 800631e:	e002      	b.n	8006326 <USBH_CDC_Process+0x122>
      break;
 8006320:	bf00      	nop
 8006322:	e000      	b.n	8006326 <USBH_CDC_Process+0x122>
      break;
 8006324:	bf00      	nop

  }

  return status;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	22a1      	movs	r2, #161	; 0xa1
 8006354:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2221      	movs	r2, #33	; 0x21
 800635a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2207      	movs	r2, #7
 800636c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2207      	movs	r2, #7
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f988 	bl	800768a <USBH_CtlReq>
 800637a:	4603      	mov	r3, r0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2221      	movs	r2, #33	; 0x21
 8006392:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2207      	movs	r2, #7
 80063aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2207      	movs	r2, #7
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 f969 	bl	800768a <USBH_CtlReq>
 80063b8:	4603      	mov	r3, r0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af02      	add	r7, sp, #8
 80063c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d002      	beq.n	80063e8 <CDC_ProcessTransmission+0x26>
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d023      	beq.n	800642e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80063e6:	e05e      	b.n	80064a6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	8b12      	ldrh	r2, [r2, #24]
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d90b      	bls.n	800640c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	69d9      	ldr	r1, [r3, #28]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8b1a      	ldrh	r2, [r3, #24]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	7b5b      	ldrb	r3, [r3, #13]
 8006400:	2001      	movs	r0, #1
 8006402:	9000      	str	r0, [sp, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fb4e 	bl	8007aa6 <USBH_BulkSendData>
 800640a:	e00b      	b.n	8006424 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	7b5b      	ldrb	r3, [r3, #13]
 800641a:	2001      	movs	r0, #1
 800641c:	9000      	str	r0, [sp, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 fb41 	bl	8007aa6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800642c:	e03b      	b.n	80064a6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	7b5b      	ldrb	r3, [r3, #13]
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fe65 	bl	8008104 <USBH_LL_GetURBState>
 800643a:	4603      	mov	r3, r0
 800643c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d128      	bne.n	8006496 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	8b12      	ldrh	r2, [r2, #24]
 800644c:	4293      	cmp	r3, r2
 800644e:	d90e      	bls.n	800646e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	8b12      	ldrh	r2, [r2, #24]
 8006458:	1a9a      	subs	r2, r3, r2
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	8b12      	ldrh	r2, [r2, #24]
 8006466:	441a      	add	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	61da      	str	r2, [r3, #28]
 800646c:	e002      	b.n	8006474 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006484:	e00e      	b.n	80064a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f868 	bl	8006564 <USBH_CDC_TransmitCallback>
      break;
 8006494:	e006      	b.n	80064a4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	2b02      	cmp	r3, #2
 800649a:	d103      	bne.n	80064a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80064a4:	bf00      	nop
  }
}
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d002      	beq.n	80064d4 <CDC_ProcessReception+0x26>
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d00e      	beq.n	80064f0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80064d2:	e043      	b.n	800655c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	6a19      	ldr	r1, [r3, #32]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	8b5a      	ldrh	r2, [r3, #26]
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	7b1b      	ldrb	r3, [r3, #12]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fb05 	bl	8007af0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2204      	movs	r2, #4
 80064ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064ee:	e035      	b.n	800655c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	7b1b      	ldrb	r3, [r3, #12]
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 fe04 	bl	8008104 <USBH_LL_GetURBState>
 80064fc:	4603      	mov	r3, r0
 80064fe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006500:	7cfb      	ldrb	r3, [r7, #19]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d129      	bne.n	800655a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	7b1b      	ldrb	r3, [r3, #12]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fd67 	bl	8007fe0 <USBH_LL_GetLastXferSize>
 8006512:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	429a      	cmp	r2, r3
 800651c:	d016      	beq.n	800654c <CDC_ProcessReception+0x9e>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	8b5b      	ldrh	r3, [r3, #26]
 8006522:	461a      	mov	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4293      	cmp	r3, r2
 8006528:	d910      	bls.n	800654c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad2      	subs	r2, r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	6a1a      	ldr	r2, [r3, #32]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	441a      	add	r2, r3
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2203      	movs	r2, #3
 8006546:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800654a:	e006      	b.n	800655a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f80f 	bl	8006578 <USBH_CDC_ReceiveCallback>
      break;
 800655a:	bf00      	nop
  }
}
 800655c:	bf00      	nop
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80065b4:	2302      	movs	r3, #2
 80065b6:	e029      	b.n	800660c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	79fa      	ldrb	r2, [r7, #7]
 80065bc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f81f 	bl	8006614 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f001 fc37 	bl	8007e78 <USBH_LL_Init>

  return USBH_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e009      	b.n	800663a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	33e0      	adds	r3, #224	; 0xe0
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	2200      	movs	r2, #0
 8006632:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b0e      	cmp	r3, #14
 800663e:	d9f2      	bls.n	8006626 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e009      	b.n	800665a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3301      	adds	r3, #1
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006660:	d3f1      	bcc.n	8006646 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2240      	movs	r2, #64	; 0x40
 8006686:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d016      	beq.n	80066fe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10e      	bne.n	80066f8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066e0:	1c59      	adds	r1, r3, #1
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	33de      	adds	r3, #222	; 0xde
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
 80066f6:	e004      	b.n	8006702 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066f8:	2302      	movs	r3, #2
 80066fa:	73fb      	strb	r3, [r7, #15]
 80066fc:	e001      	b.n	8006702 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066fe:	2302      	movs	r3, #2
 8006700:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	429a      	cmp	r2, r3
 800672a:	d204      	bcs.n	8006736 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	78fa      	ldrb	r2, [r7, #3]
 8006730:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006734:	e001      	b.n	800673a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006736:	2302      	movs	r3, #2
 8006738:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	4608      	mov	r0, r1
 8006752:	4611      	mov	r1, r2
 8006754:	461a      	mov	r2, r3
 8006756:	4603      	mov	r3, r0
 8006758:	70fb      	strb	r3, [r7, #3]
 800675a:	460b      	mov	r3, r1
 800675c:	70bb      	strb	r3, [r7, #2]
 800675e:	4613      	mov	r3, r2
 8006760:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006766:	2300      	movs	r3, #0
 8006768:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006770:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006772:	e025      	b.n	80067c0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	221a      	movs	r2, #26
 8006778:	fb02 f303 	mul.w	r3, r2, r3
 800677c:	3308      	adds	r3, #8
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	3302      	adds	r3, #2
 8006784:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	795b      	ldrb	r3, [r3, #5]
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	429a      	cmp	r2, r3
 800678e:	d002      	beq.n	8006796 <USBH_FindInterface+0x4e>
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	2bff      	cmp	r3, #255	; 0xff
 8006794:	d111      	bne.n	80067ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800679a:	78ba      	ldrb	r2, [r7, #2]
 800679c:	429a      	cmp	r2, r3
 800679e:	d002      	beq.n	80067a6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067a0:	78bb      	ldrb	r3, [r7, #2]
 80067a2:	2bff      	cmp	r3, #255	; 0xff
 80067a4:	d109      	bne.n	80067ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067aa:	787a      	ldrb	r2, [r7, #1]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d002      	beq.n	80067b6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80067b0:	787b      	ldrb	r3, [r7, #1]
 80067b2:	2bff      	cmp	r3, #255	; 0xff
 80067b4:	d101      	bne.n	80067ba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	e006      	b.n	80067c8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	3301      	adds	r3, #1
 80067be:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d9d6      	bls.n	8006774 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80067c6:	23ff      	movs	r3, #255	; 0xff
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f001 fb87 	bl	8007ef0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80067e2:	2101      	movs	r1, #1
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 fca0 	bl	800812a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af04      	add	r7, sp, #16
 80067fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067fc:	2302      	movs	r3, #2
 80067fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	d102      	bne.n	8006816 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2203      	movs	r2, #3
 8006814:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b0b      	cmp	r3, #11
 800681e:	f200 81b3 	bhi.w	8006b88 <USBH_Process+0x394>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <USBH_Process+0x34>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006859 	.word	0x08006859
 800682c:	0800688b 	.word	0x0800688b
 8006830:	080068f3 	.word	0x080068f3
 8006834:	08006b23 	.word	0x08006b23
 8006838:	08006b89 	.word	0x08006b89
 800683c:	08006997 	.word	0x08006997
 8006840:	08006ac9 	.word	0x08006ac9
 8006844:	080069cd 	.word	0x080069cd
 8006848:	080069ed 	.word	0x080069ed
 800684c:	08006a0d 	.word	0x08006a0d
 8006850:	08006a3b 	.word	0x08006a3b
 8006854:	08006b0b 	.word	0x08006b0b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8193 	beq.w	8006b8c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800686c:	20c8      	movs	r0, #200	; 0xc8
 800686e:	f001 fca3 	bl	80081b8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 fb99 	bl	8007faa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006888:	e180      	b.n	8006b8c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006890:	2b01      	cmp	r3, #1
 8006892:	d107      	bne.n	80068a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80068a2:	e182      	b.n	8006baa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ae:	d914      	bls.n	80068da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80068b6:	3301      	adds	r3, #1
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d903      	bls.n	80068d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	220d      	movs	r2, #13
 80068ce:	701a      	strb	r2, [r3, #0]
      break;
 80068d0:	e16b      	b.n	8006baa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]
      break;
 80068d8:	e167      	b.n	8006baa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068e0:	f103 020a 	add.w	r2, r3, #10
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80068ea:	200a      	movs	r0, #10
 80068ec:	f001 fc64 	bl	80081b8 <USBH_Delay>
      break;
 80068f0:	e15b      	b.n	8006baa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006902:	2104      	movs	r1, #4
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006908:	2064      	movs	r0, #100	; 0x64
 800690a:	f001 fc55 	bl	80081b8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fb24 	bl	8007f5c <USBH_LL_GetSpeed>
 8006914:	4603      	mov	r3, r0
 8006916:	461a      	mov	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2205      	movs	r2, #5
 8006922:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006924:	2100      	movs	r1, #0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 f92f 	bl	8007b8a <USBH_AllocPipe>
 800692c:	4603      	mov	r3, r0
 800692e:	461a      	mov	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006934:	2180      	movs	r1, #128	; 0x80
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 f927 	bl	8007b8a <USBH_AllocPipe>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	7919      	ldrb	r1, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006958:	b292      	uxth	r2, r2
 800695a:	9202      	str	r2, [sp, #8]
 800695c:	2200      	movs	r2, #0
 800695e:	9201      	str	r2, [sp, #4]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	4603      	mov	r3, r0
 8006964:	2280      	movs	r2, #128	; 0x80
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f8e0 	bl	8007b2c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	7959      	ldrb	r1, [r3, #5]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006980:	b292      	uxth	r2, r2
 8006982:	9202      	str	r2, [sp, #8]
 8006984:	2200      	movs	r2, #0
 8006986:	9201      	str	r2, [sp, #4]
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	4603      	mov	r3, r0
 800698c:	2200      	movs	r2, #0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 f8cc 	bl	8007b2c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006994:	e109      	b.n	8006baa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f90c 	bl	8006bb4 <USBH_HandleEnum>
 800699c:	4603      	mov	r3, r0
 800699e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f040 80f3 	bne.w	8006b90 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d103      	bne.n	80069c4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2208      	movs	r2, #8
 80069c0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80069c2:	e0e5      	b.n	8006b90 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2207      	movs	r2, #7
 80069c8:	701a      	strb	r2, [r3, #0]
      break;
 80069ca:	e0e1      	b.n	8006b90 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80de 	beq.w	8006b94 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069de:	2101      	movs	r1, #1
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2208      	movs	r2, #8
 80069e8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80069ea:	e0d3      	b.n	8006b94 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fc20 	bl	800723c <USBH_SetCfg>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f040 80ca 	bne.w	8006b98 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2209      	movs	r2, #9
 8006a08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a0a:	e0c5      	b.n	8006b98 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00b      	beq.n	8006a32 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc30 	bl	8007282 <USBH_SetFeature>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f040 80b9 	bne.w	8006b9c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	220a      	movs	r2, #10
 8006a2e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a30:	e0b4      	b.n	8006b9c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	220a      	movs	r2, #10
 8006a36:	701a      	strb	r2, [r3, #0]
      break;
 8006a38:	e0b0      	b.n	8006b9c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80ad 	beq.w	8006ba0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
 8006a52:	e016      	b.n	8006a82 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a54:	7bfa      	ldrb	r2, [r7, #15]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	32de      	adds	r2, #222	; 0xde
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	791a      	ldrb	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d108      	bne.n	8006a7c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a6a:	7bfa      	ldrb	r2, [r7, #15]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	32de      	adds	r2, #222	; 0xde
 8006a70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a7a:	e005      	b.n	8006a88 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0e5      	beq.n	8006a54 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d016      	beq.n	8006ac0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2206      	movs	r2, #6
 8006aa8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ab0:	2103      	movs	r1, #3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ab6:	e073      	b.n	8006ba0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	220d      	movs	r2, #13
 8006abc:	701a      	strb	r2, [r3, #0]
      break;
 8006abe:	e06f      	b.n	8006ba0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	220d      	movs	r2, #13
 8006ac4:	701a      	strb	r2, [r3, #0]
      break;
 8006ac6:	e06b      	b.n	8006ba0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d017      	beq.n	8006b02 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	220b      	movs	r2, #11
 8006aee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006af0:	e058      	b.n	8006ba4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d154      	bne.n	8006ba4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	220d      	movs	r2, #13
 8006afe:	701a      	strb	r2, [r3, #0]
      break;
 8006b00:	e050      	b.n	8006ba4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	220d      	movs	r2, #13
 8006b06:	701a      	strb	r2, [r3, #0]
      break;
 8006b08:	e04c      	b.n	8006ba4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d049      	beq.n	8006ba8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
      }
      break;
 8006b20:	e042      	b.n	8006ba8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff fd72 	bl	8006614 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b5e:	2105      	movs	r1, #5
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d107      	bne.n	8006b80 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff fe2b 	bl	80067d4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b7e:	e014      	b.n	8006baa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f9b5 	bl	8007ef0 <USBH_LL_Start>
      break;
 8006b86:	e010      	b.n	8006baa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b88:	bf00      	nop
 8006b8a:	e00e      	b.n	8006baa <USBH_Process+0x3b6>
      break;
 8006b8c:	bf00      	nop
 8006b8e:	e00c      	b.n	8006baa <USBH_Process+0x3b6>
      break;
 8006b90:	bf00      	nop
 8006b92:	e00a      	b.n	8006baa <USBH_Process+0x3b6>
    break;
 8006b94:	bf00      	nop
 8006b96:	e008      	b.n	8006baa <USBH_Process+0x3b6>
      break;
 8006b98:	bf00      	nop
 8006b9a:	e006      	b.n	8006baa <USBH_Process+0x3b6>
      break;
 8006b9c:	bf00      	nop
 8006b9e:	e004      	b.n	8006baa <USBH_Process+0x3b6>
      break;
 8006ba0:	bf00      	nop
 8006ba2:	e002      	b.n	8006baa <USBH_Process+0x3b6>
      break;
 8006ba4:	bf00      	nop
 8006ba6:	e000      	b.n	8006baa <USBH_Process+0x3b6>
      break;
 8006ba8:	bf00      	nop
  }
  return USBH_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af04      	add	r7, sp, #16
 8006bba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	785b      	ldrb	r3, [r3, #1]
 8006bc8:	2b07      	cmp	r3, #7
 8006bca:	f200 81c1 	bhi.w	8006f50 <USBH_HandleEnum+0x39c>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <USBH_HandleEnum+0x20>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006bf5 	.word	0x08006bf5
 8006bd8:	08006cb3 	.word	0x08006cb3
 8006bdc:	08006d1d 	.word	0x08006d1d
 8006be0:	08006dab 	.word	0x08006dab
 8006be4:	08006e15 	.word	0x08006e15
 8006be8:	08006e85 	.word	0x08006e85
 8006bec:	08006ecb 	.word	0x08006ecb
 8006bf0:	08006f11 	.word	0x08006f11
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006bf4:	2108      	movs	r1, #8
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa50 	bl	800709c <USBH_Get_DevDesc>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d130      	bne.n	8006c68 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7919      	ldrb	r1, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c2a:	b292      	uxth	r2, r2
 8006c2c:	9202      	str	r2, [sp, #8]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	9201      	str	r2, [sp, #4]
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	4603      	mov	r3, r0
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 ff77 	bl	8007b2c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	7959      	ldrb	r1, [r3, #5]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c52:	b292      	uxth	r2, r2
 8006c54:	9202      	str	r2, [sp, #8]
 8006c56:	2200      	movs	r2, #0
 8006c58:	9201      	str	r2, [sp, #4]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2200      	movs	r2, #0
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 ff63 	bl	8007b2c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c66:	e175      	b.n	8006f54 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	f040 8172 	bne.w	8006f54 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c76:	3301      	adds	r3, #1
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d903      	bls.n	8006c92 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	220d      	movs	r2, #13
 8006c8e:	701a      	strb	r2, [r3, #0]
      break;
 8006c90:	e160      	b.n	8006f54 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	795b      	ldrb	r3, [r3, #5]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 ff97 	bl	8007bcc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	791b      	ldrb	r3, [r3, #4]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 ff91 	bl	8007bcc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
      break;
 8006cb0:	e150      	b.n	8006f54 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006cb2:	2112      	movs	r1, #18
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9f1 	bl	800709c <USBH_Get_DevDesc>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d103      	bne.n	8006ccc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cca:	e145      	b.n	8006f58 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	f040 8142 	bne.w	8006f58 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cda:	3301      	adds	r3, #1
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d903      	bls.n	8006cf6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	220d      	movs	r2, #13
 8006cf2:	701a      	strb	r2, [r3, #0]
      break;
 8006cf4:	e130      	b.n	8006f58 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	795b      	ldrb	r3, [r3, #5]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 ff65 	bl	8007bcc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	791b      	ldrb	r3, [r3, #4]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 ff5f 	bl	8007bcc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
      break;
 8006d1a:	e11d      	b.n	8006f58 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa68 	bl	80071f4 <USBH_SetAddress>
 8006d24:	4603      	mov	r3, r0
 8006d26:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d132      	bne.n	8006d94 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d2e:	2002      	movs	r0, #2
 8006d30:	f001 fa42 	bl	80081b8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2203      	movs	r2, #3
 8006d40:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	7919      	ldrb	r1, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d56:	b292      	uxth	r2, r2
 8006d58:	9202      	str	r2, [sp, #8]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	9201      	str	r2, [sp, #4]
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	4603      	mov	r3, r0
 8006d62:	2280      	movs	r2, #128	; 0x80
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fee1 	bl	8007b2c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	7959      	ldrb	r1, [r3, #5]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d7e:	b292      	uxth	r2, r2
 8006d80:	9202      	str	r2, [sp, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	9201      	str	r2, [sp, #4]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fecd 	bl	8007b2c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d92:	e0e3      	b.n	8006f5c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	f040 80e0 	bne.w	8006f5c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	220d      	movs	r2, #13
 8006da0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	705a      	strb	r2, [r3, #1]
      break;
 8006da8:	e0d8      	b.n	8006f5c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006daa:	2109      	movs	r1, #9
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f99d 	bl	80070ec <USBH_Get_CfgDesc>
 8006db2:	4603      	mov	r3, r0
 8006db4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d103      	bne.n	8006dc4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2204      	movs	r2, #4
 8006dc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dc2:	e0cd      	b.n	8006f60 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	f040 80ca 	bne.w	8006f60 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d903      	bls.n	8006dee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	220d      	movs	r2, #13
 8006dea:	701a      	strb	r2, [r3, #0]
      break;
 8006dec:	e0b8      	b.n	8006f60 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	795b      	ldrb	r3, [r3, #5]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fee9 	bl	8007bcc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	791b      	ldrb	r3, [r3, #4]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fee3 	bl	8007bcc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]
      break;
 8006e12:	e0a5      	b.n	8006f60 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f965 	bl	80070ec <USBH_Get_CfgDesc>
 8006e22:	4603      	mov	r3, r0
 8006e24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d103      	bne.n	8006e34 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2205      	movs	r2, #5
 8006e30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e32:	e097      	b.n	8006f64 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	f040 8094 	bne.w	8006f64 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e42:	3301      	adds	r3, #1
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d903      	bls.n	8006e5e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	220d      	movs	r2, #13
 8006e5a:	701a      	strb	r2, [r3, #0]
      break;
 8006e5c:	e082      	b.n	8006f64 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	795b      	ldrb	r3, [r3, #5]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 feb1 	bl	8007bcc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	791b      	ldrb	r3, [r3, #4]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 feab 	bl	8007bcc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	701a      	strb	r2, [r3, #0]
      break;
 8006e82:	e06f      	b.n	8006f64 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d019      	beq.n	8006ec2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e9a:	23ff      	movs	r3, #255	; 0xff
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f949 	bl	8007134 <USBH_Get_StringDesc>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2206      	movs	r2, #6
 8006eb0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006eb2:	e059      	b.n	8006f68 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d156      	bne.n	8006f68 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2206      	movs	r2, #6
 8006ebe:	705a      	strb	r2, [r3, #1]
      break;
 8006ec0:	e052      	b.n	8006f68 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2206      	movs	r2, #6
 8006ec6:	705a      	strb	r2, [r3, #1]
      break;
 8006ec8:	e04e      	b.n	8006f68 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d019      	beq.n	8006f08 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ee0:	23ff      	movs	r3, #255	; 0xff
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f926 	bl	8007134 <USBH_Get_StringDesc>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2207      	movs	r2, #7
 8006ef6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ef8:	e038      	b.n	8006f6c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d135      	bne.n	8006f6c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2207      	movs	r2, #7
 8006f04:	705a      	strb	r2, [r3, #1]
      break;
 8006f06:	e031      	b.n	8006f6c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2207      	movs	r2, #7
 8006f0c:	705a      	strb	r2, [r3, #1]
      break;
 8006f0e:	e02d      	b.n	8006f6c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d017      	beq.n	8006f4a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f26:	23ff      	movs	r3, #255	; 0xff
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f903 	bl	8007134 <USBH_Get_StringDesc>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f3c:	e018      	b.n	8006f70 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d115      	bne.n	8006f70 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]
      break;
 8006f48:	e012      	b.n	8006f70 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f4e:	e00f      	b.n	8006f70 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f50:	bf00      	nop
 8006f52:	e00e      	b.n	8006f72 <USBH_HandleEnum+0x3be>
      break;
 8006f54:	bf00      	nop
 8006f56:	e00c      	b.n	8006f72 <USBH_HandleEnum+0x3be>
      break;
 8006f58:	bf00      	nop
 8006f5a:	e00a      	b.n	8006f72 <USBH_HandleEnum+0x3be>
      break;
 8006f5c:	bf00      	nop
 8006f5e:	e008      	b.n	8006f72 <USBH_HandleEnum+0x3be>
      break;
 8006f60:	bf00      	nop
 8006f62:	e006      	b.n	8006f72 <USBH_HandleEnum+0x3be>
      break;
 8006f64:	bf00      	nop
 8006f66:	e004      	b.n	8006f72 <USBH_HandleEnum+0x3be>
      break;
 8006f68:	bf00      	nop
 8006f6a:	e002      	b.n	8006f72 <USBH_HandleEnum+0x3be>
      break;
 8006f6c:	bf00      	nop
 8006f6e:	e000      	b.n	8006f72 <USBH_HandleEnum+0x3be>
      break;
 8006f70:	bf00      	nop
  }
  return Status;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f804 	bl	8006fbe <USBH_HandleSof>
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b0b      	cmp	r3, #11
 8006fce:	d10a      	bne.n	8006fe6 <USBH_HandleSof+0x28>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d005      	beq.n	8006fe6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
  }
}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006ffe:	bf00      	nop
}
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800701a:	bf00      	nop
}
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 ff56 	bl	8007f26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fda3 	bl	8007bcc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	795b      	ldrb	r3, [r3, #5]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fd9d 	bl	8007bcc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	4613      	mov	r3, r2
 80070b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ba:	2100      	movs	r1, #0
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f864 	bl	800718a <USBH_GetDescriptor>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070d8:	78fa      	ldrb	r2, [r7, #3]
 80070da:	b292      	uxth	r2, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	f000 f918 	bl	8007312 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	331c      	adds	r3, #28
 80070fc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070fe:	887b      	ldrh	r3, [r7, #2]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007108:	2100      	movs	r1, #0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f83d 	bl	800718a <USBH_GetDescriptor>
 8007110:	4603      	mov	r3, r0
 8007112:	72fb      	strb	r3, [r7, #11]
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d107      	bne.n	800712a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007120:	887a      	ldrh	r2, [r7, #2]
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f964 	bl	80073f2 <USBH_ParseCfgDesc>
  }

  return status;
 800712a:	7afb      	ldrb	r3, [r7, #11]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af02      	add	r7, sp, #8
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	461a      	mov	r2, r3
 8007140:	460b      	mov	r3, r1
 8007142:	72fb      	strb	r3, [r7, #11]
 8007144:	4613      	mov	r3, r2
 8007146:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	b29b      	uxth	r3, r3
 800714c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007150:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007158:	893b      	ldrh	r3, [r7, #8]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	460b      	mov	r3, r1
 800715e:	2100      	movs	r1, #0
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f812 	bl	800718a <USBH_GetDescriptor>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d107      	bne.n	8007180 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007176:	893a      	ldrh	r2, [r7, #8]
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fa37 	bl	80075ee <USBH_ParseStringDesc>
  }

  return status;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	607b      	str	r3, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	72fb      	strb	r3, [r7, #11]
 8007198:	4613      	mov	r3, r2
 800719a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	789b      	ldrb	r3, [r3, #2]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d11c      	bne.n	80071de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2206      	movs	r2, #6
 80071b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	893a      	ldrh	r2, [r7, #8]
 80071ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80071bc:	893b      	ldrh	r3, [r7, #8]
 80071be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071c6:	d104      	bne.n	80071d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f240 4209 	movw	r2, #1033	; 0x409
 80071ce:	829a      	strh	r2, [r3, #20]
 80071d0:	e002      	b.n	80071d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8b3a      	ldrh	r2, [r7, #24]
 80071dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80071de:	8b3b      	ldrh	r3, [r7, #24]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fa50 	bl	800768a <USBH_CtlReq>
 80071ea:	4603      	mov	r3, r0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	789b      	ldrb	r3, [r3, #2]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d10f      	bne.n	8007228 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2205      	movs	r2, #5
 8007212:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	b29a      	uxth	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fa2c 	bl	800768a <USBH_CtlReq>
 8007232:	4603      	mov	r3, r0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	789b      	ldrb	r3, [r3, #2]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d10e      	bne.n	800726e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2209      	movs	r2, #9
 800725a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	887a      	ldrh	r2, [r7, #2]
 8007260:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800726e:	2200      	movs	r2, #0
 8007270:	2100      	movs	r1, #0
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa09 	bl	800768a <USBH_CtlReq>
 8007278:	4603      	mov	r3, r0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	789b      	ldrb	r3, [r3, #2]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d10f      	bne.n	80072b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2203      	movs	r2, #3
 80072a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80072b6:	2200      	movs	r2, #0
 80072b8:	2100      	movs	r1, #0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f9e5 	bl	800768a <USBH_CtlReq>
 80072c0:	4603      	mov	r3, r0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	789b      	ldrb	r3, [r3, #2]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d10f      	bne.n	80072fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2202      	movs	r2, #2
 80072e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80072fe:	2200      	movs	r2, #0
 8007300:	2100      	movs	r1, #0
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9c1 	bl	800768a <USBH_CtlReq>
 8007308:	4603      	mov	r3, r0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	4613      	mov	r3, r2
 800731e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	781a      	ldrb	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	785a      	ldrb	r2, [r3, #1]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	3302      	adds	r3, #2
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	b29a      	uxth	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	3303      	adds	r3, #3
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	b29b      	uxth	r3, r3
 8007344:	4313      	orrs	r3, r2
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	791a      	ldrb	r2, [r3, #4]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	795a      	ldrb	r2, [r3, #5]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	799a      	ldrb	r2, [r3, #6]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	79da      	ldrb	r2, [r3, #7]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	2b08      	cmp	r3, #8
 8007370:	d939      	bls.n	80073e6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	3308      	adds	r3, #8
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	b29a      	uxth	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	3309      	adds	r3, #9
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	b29b      	uxth	r3, r3
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	b29b      	uxth	r3, r3
 8007386:	4313      	orrs	r3, r2
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	330a      	adds	r3, #10
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	b29a      	uxth	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	330b      	adds	r3, #11
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	4313      	orrs	r3, r2
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	330c      	adds	r3, #12
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	330d      	adds	r3, #13
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	021b      	lsls	r3, r3, #8
 80073bc:	b29b      	uxth	r3, r3
 80073be:	4313      	orrs	r3, r2
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	7b9a      	ldrb	r2, [r3, #14]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	7bda      	ldrb	r2, [r3, #15]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	7c1a      	ldrb	r2, [r3, #16]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	7c5a      	ldrb	r2, [r3, #17]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	745a      	strb	r2, [r3, #17]
  }
}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b08a      	sub	sp, #40	; 0x28
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	4613      	mov	r3, r2
 80073fe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	785a      	ldrb	r2, [r3, #1]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	3302      	adds	r3, #2
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	b29a      	uxth	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	3303      	adds	r3, #3
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	b29b      	uxth	r3, r3
 8007438:	4313      	orrs	r3, r2
 800743a:	b29a      	uxth	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	791a      	ldrb	r2, [r3, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	795a      	ldrb	r2, [r3, #5]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	799a      	ldrb	r2, [r3, #6]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	79da      	ldrb	r2, [r3, #7]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	7a1a      	ldrb	r2, [r3, #8]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007468:	88fb      	ldrh	r3, [r7, #6]
 800746a:	2b09      	cmp	r3, #9
 800746c:	d95f      	bls.n	800752e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800746e:	2309      	movs	r3, #9
 8007470:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007472:	2300      	movs	r3, #0
 8007474:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007476:	e051      	b.n	800751c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007478:	f107 0316 	add.w	r3, r7, #22
 800747c:	4619      	mov	r1, r3
 800747e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007480:	f000 f8e8 	bl	8007654 <USBH_GetNextDesc>
 8007484:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b04      	cmp	r3, #4
 800748c:	d146      	bne.n	800751c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800748e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007492:	221a      	movs	r2, #26
 8007494:	fb02 f303 	mul.w	r3, r2, r3
 8007498:	3308      	adds	r3, #8
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	3302      	adds	r3, #2
 80074a0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80074a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074a4:	69f8      	ldr	r0, [r7, #28]
 80074a6:	f000 f846 	bl	8007536 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074b4:	e022      	b.n	80074fc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074b6:	f107 0316 	add.w	r3, r7, #22
 80074ba:	4619      	mov	r1, r3
 80074bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074be:	f000 f8c9 	bl	8007654 <USBH_GetNextDesc>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	d117      	bne.n	80074fc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80074cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80074d4:	3201      	adds	r2, #1
 80074d6:	00d2      	lsls	r2, r2, #3
 80074d8:	211a      	movs	r1, #26
 80074da:	fb01 f303 	mul.w	r3, r1, r3
 80074de:	4413      	add	r3, r2
 80074e0:	3308      	adds	r3, #8
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80074ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ec:	69b8      	ldr	r0, [r7, #24]
 80074ee:	f000 f851 	bl	8007594 <USBH_ParseEPDesc>
            ep_ix++;
 80074f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80074f6:	3301      	adds	r3, #1
 80074f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	791b      	ldrb	r3, [r3, #4]
 8007500:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007504:	429a      	cmp	r2, r3
 8007506:	d204      	bcs.n	8007512 <USBH_ParseCfgDesc+0x120>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	885a      	ldrh	r2, [r3, #2]
 800750c:	8afb      	ldrh	r3, [r7, #22]
 800750e:	429a      	cmp	r2, r3
 8007510:	d8d1      	bhi.n	80074b6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007516:	3301      	adds	r3, #1
 8007518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800751c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007520:	2b01      	cmp	r3, #1
 8007522:	d804      	bhi.n	800752e <USBH_ParseCfgDesc+0x13c>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	885a      	ldrh	r2, [r3, #2]
 8007528:	8afb      	ldrh	r3, [r7, #22]
 800752a:	429a      	cmp	r2, r3
 800752c:	d8a4      	bhi.n	8007478 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800752e:	bf00      	nop
 8007530:	3728      	adds	r7, #40	; 0x28
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781a      	ldrb	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	785a      	ldrb	r2, [r3, #1]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	789a      	ldrb	r2, [r3, #2]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	78da      	ldrb	r2, [r3, #3]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	791a      	ldrb	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	795a      	ldrb	r2, [r3, #5]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	799a      	ldrb	r2, [r3, #6]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	79da      	ldrb	r2, [r3, #7]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	7a1a      	ldrb	r2, [r3, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	721a      	strb	r2, [r3, #8]
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781a      	ldrb	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	785a      	ldrb	r2, [r3, #1]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	789a      	ldrb	r2, [r3, #2]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	78da      	ldrb	r2, [r3, #3]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	3304      	adds	r3, #4
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	3305      	adds	r3, #5
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	4313      	orrs	r3, r2
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	799a      	ldrb	r2, [r3, #6]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	719a      	strb	r2, [r3, #6]
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b087      	sub	sp, #28
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	4613      	mov	r3, r2
 80075fa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3301      	adds	r3, #1
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b03      	cmp	r3, #3
 8007604:	d120      	bne.n	8007648 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	1e9a      	subs	r2, r3, #2
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	4293      	cmp	r3, r2
 8007610:	bf28      	it	cs
 8007612:	4613      	movcs	r3, r2
 8007614:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3302      	adds	r3, #2
 800761a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800761c:	2300      	movs	r3, #0
 800761e:	82fb      	strh	r3, [r7, #22]
 8007620:	e00b      	b.n	800763a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007622:	8afb      	ldrh	r3, [r7, #22]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	3301      	adds	r3, #1
 8007632:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007634:	8afb      	ldrh	r3, [r7, #22]
 8007636:	3302      	adds	r3, #2
 8007638:	82fb      	strh	r3, [r7, #22]
 800763a:	8afa      	ldrh	r2, [r7, #22]
 800763c:	8abb      	ldrh	r3, [r7, #20]
 800763e:	429a      	cmp	r2, r3
 8007640:	d3ef      	bcc.n	8007622 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2200      	movs	r2, #0
 8007646:	701a      	strb	r2, [r3, #0]
  }
}
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	881a      	ldrh	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	4413      	add	r3, r2
 800766a:	b29a      	uxth	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800767c:	68fb      	ldr	r3, [r7, #12]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	4613      	mov	r3, r2
 8007696:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007698:	2301      	movs	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	789b      	ldrb	r3, [r3, #2]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d002      	beq.n	80076aa <USBH_CtlReq+0x20>
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d00f      	beq.n	80076c8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80076a8:	e027      	b.n	80076fa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	88fa      	ldrh	r2, [r7, #6]
 80076b4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2202      	movs	r2, #2
 80076c0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]
      break;
 80076c6:	e018      	b.n	80076fa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f81b 	bl	8007704 <USBH_HandleControl>
 80076ce:	4603      	mov	r3, r0
 80076d0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <USBH_CtlReq+0x54>
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d106      	bne.n	80076ec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	761a      	strb	r2, [r3, #24]
      break;
 80076ea:	e005      	b.n	80076f8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d102      	bne.n	80076f8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	709a      	strb	r2, [r3, #2]
      break;
 80076f8:	bf00      	nop
  }
  return status;
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af02      	add	r7, sp, #8
 800770a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007710:	2300      	movs	r3, #0
 8007712:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	7e1b      	ldrb	r3, [r3, #24]
 8007718:	3b01      	subs	r3, #1
 800771a:	2b0a      	cmp	r3, #10
 800771c:	f200 8156 	bhi.w	80079cc <USBH_HandleControl+0x2c8>
 8007720:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <USBH_HandleControl+0x24>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	08007755 	.word	0x08007755
 800772c:	0800776f 	.word	0x0800776f
 8007730:	080077d9 	.word	0x080077d9
 8007734:	080077ff 	.word	0x080077ff
 8007738:	08007837 	.word	0x08007837
 800773c:	08007861 	.word	0x08007861
 8007740:	080078b3 	.word	0x080078b3
 8007744:	080078d5 	.word	0x080078d5
 8007748:	08007911 	.word	0x08007911
 800774c:	08007937 	.word	0x08007937
 8007750:	08007975 	.word	0x08007975
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f103 0110 	add.w	r1, r3, #16
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	795b      	ldrb	r3, [r3, #5]
 800775e:	461a      	mov	r2, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f943 	bl	80079ec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2202      	movs	r2, #2
 800776a:	761a      	strb	r2, [r3, #24]
      break;
 800776c:	e139      	b.n	80079e2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	795b      	ldrb	r3, [r3, #5]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fcc5 	bl	8008104 <USBH_LL_GetURBState>
 800777a:	4603      	mov	r3, r0
 800777c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d11e      	bne.n	80077c2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	7c1b      	ldrb	r3, [r3, #16]
 8007788:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800778c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8adb      	ldrh	r3, [r3, #22]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007796:	7b7b      	ldrb	r3, [r7, #13]
 8007798:	2b80      	cmp	r3, #128	; 0x80
 800779a:	d103      	bne.n	80077a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2203      	movs	r2, #3
 80077a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80077a2:	e115      	b.n	80079d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2205      	movs	r2, #5
 80077a8:	761a      	strb	r2, [r3, #24]
      break;
 80077aa:	e111      	b.n	80079d0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80077ac:	7b7b      	ldrb	r3, [r7, #13]
 80077ae:	2b80      	cmp	r3, #128	; 0x80
 80077b0:	d103      	bne.n	80077ba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2209      	movs	r2, #9
 80077b6:	761a      	strb	r2, [r3, #24]
      break;
 80077b8:	e10a      	b.n	80079d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2207      	movs	r2, #7
 80077be:	761a      	strb	r2, [r3, #24]
      break;
 80077c0:	e106      	b.n	80079d0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	d003      	beq.n	80077d0 <USBH_HandleControl+0xcc>
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	f040 8100 	bne.w	80079d0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	220b      	movs	r2, #11
 80077d4:	761a      	strb	r2, [r3, #24]
      break;
 80077d6:	e0fb      	b.n	80079d0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6899      	ldr	r1, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	899a      	ldrh	r2, [r3, #12]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	791b      	ldrb	r3, [r3, #4]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f93a 	bl	8007a6a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2204      	movs	r2, #4
 80077fa:	761a      	strb	r2, [r3, #24]
      break;
 80077fc:	e0f1      	b.n	80079e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	791b      	ldrb	r3, [r3, #4]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fc7d 	bl	8008104 <USBH_LL_GetURBState>
 800780a:	4603      	mov	r3, r0
 800780c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d102      	bne.n	800781a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2209      	movs	r2, #9
 8007818:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b05      	cmp	r3, #5
 800781e:	d102      	bne.n	8007826 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007820:	2303      	movs	r3, #3
 8007822:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007824:	e0d6      	b.n	80079d4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2b04      	cmp	r3, #4
 800782a:	f040 80d3 	bne.w	80079d4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	220b      	movs	r2, #11
 8007832:	761a      	strb	r2, [r3, #24]
      break;
 8007834:	e0ce      	b.n	80079d4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6899      	ldr	r1, [r3, #8]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	899a      	ldrh	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	795b      	ldrb	r3, [r3, #5]
 8007842:	2001      	movs	r0, #1
 8007844:	9000      	str	r0, [sp, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f8ea 	bl	8007a20 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007852:	b29a      	uxth	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2206      	movs	r2, #6
 800785c:	761a      	strb	r2, [r3, #24]
      break;
 800785e:	e0c0      	b.n	80079e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	795b      	ldrb	r3, [r3, #5]
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fc4c 	bl	8008104 <USBH_LL_GetURBState>
 800786c:	4603      	mov	r3, r0
 800786e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d103      	bne.n	800787e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2207      	movs	r2, #7
 800787a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800787c:	e0ac      	b.n	80079d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	2b05      	cmp	r3, #5
 8007882:	d105      	bne.n	8007890 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	220c      	movs	r2, #12
 8007888:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800788a:	2303      	movs	r3, #3
 800788c:	73fb      	strb	r3, [r7, #15]
      break;
 800788e:	e0a3      	b.n	80079d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d103      	bne.n	800789e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2205      	movs	r2, #5
 800789a:	761a      	strb	r2, [r3, #24]
      break;
 800789c:	e09c      	b.n	80079d8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	f040 8099 	bne.w	80079d8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	220b      	movs	r2, #11
 80078aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80078ac:	2302      	movs	r3, #2
 80078ae:	73fb      	strb	r3, [r7, #15]
      break;
 80078b0:	e092      	b.n	80079d8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	791b      	ldrb	r3, [r3, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	2100      	movs	r1, #0
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8d5 	bl	8007a6a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2208      	movs	r2, #8
 80078d0:	761a      	strb	r2, [r3, #24]

      break;
 80078d2:	e086      	b.n	80079e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	791b      	ldrb	r3, [r3, #4]
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fc12 	bl	8008104 <USBH_LL_GetURBState>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d105      	bne.n	80078f6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	220d      	movs	r2, #13
 80078ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078f4:	e072      	b.n	80079dc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d103      	bne.n	8007904 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	220b      	movs	r2, #11
 8007900:	761a      	strb	r2, [r3, #24]
      break;
 8007902:	e06b      	b.n	80079dc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b05      	cmp	r3, #5
 8007908:	d168      	bne.n	80079dc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800790a:	2303      	movs	r3, #3
 800790c:	73fb      	strb	r3, [r7, #15]
      break;
 800790e:	e065      	b.n	80079dc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	795b      	ldrb	r3, [r3, #5]
 8007914:	2201      	movs	r2, #1
 8007916:	9200      	str	r2, [sp, #0]
 8007918:	2200      	movs	r2, #0
 800791a:	2100      	movs	r1, #0
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f87f 	bl	8007a20 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007928:	b29a      	uxth	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	220a      	movs	r2, #10
 8007932:	761a      	strb	r2, [r3, #24]
      break;
 8007934:	e055      	b.n	80079e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fbe1 	bl	8008104 <USBH_LL_GetURBState>
 8007942:	4603      	mov	r3, r0
 8007944:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d105      	bne.n	8007958 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	220d      	movs	r2, #13
 8007954:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007956:	e043      	b.n	80079e0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d103      	bne.n	8007966 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2209      	movs	r2, #9
 8007962:	761a      	strb	r2, [r3, #24]
      break;
 8007964:	e03c      	b.n	80079e0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b04      	cmp	r3, #4
 800796a:	d139      	bne.n	80079e0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	220b      	movs	r2, #11
 8007970:	761a      	strb	r2, [r3, #24]
      break;
 8007972:	e035      	b.n	80079e0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	7e5b      	ldrb	r3, [r3, #25]
 8007978:	3301      	adds	r3, #1
 800797a:	b2da      	uxtb	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	765a      	strb	r2, [r3, #25]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	7e5b      	ldrb	r3, [r3, #25]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d806      	bhi.n	8007996 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007994:	e025      	b.n	80079e2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800799c:	2106      	movs	r1, #6
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	795b      	ldrb	r3, [r3, #5]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f90c 	bl	8007bcc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	791b      	ldrb	r3, [r3, #4]
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f906 	bl	8007bcc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80079c6:	2302      	movs	r3, #2
 80079c8:	73fb      	strb	r3, [r7, #15]
      break;
 80079ca:	e00a      	b.n	80079e2 <USBH_HandleControl+0x2de>

    default:
      break;
 80079cc:	bf00      	nop
 80079ce:	e008      	b.n	80079e2 <USBH_HandleControl+0x2de>
      break;
 80079d0:	bf00      	nop
 80079d2:	e006      	b.n	80079e2 <USBH_HandleControl+0x2de>
      break;
 80079d4:	bf00      	nop
 80079d6:	e004      	b.n	80079e2 <USBH_HandleControl+0x2de>
      break;
 80079d8:	bf00      	nop
 80079da:	e002      	b.n	80079e2 <USBH_HandleControl+0x2de>
      break;
 80079dc:	bf00      	nop
 80079de:	e000      	b.n	80079e2 <USBH_HandleControl+0x2de>
      break;
 80079e0:	bf00      	nop
  }

  return status;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af04      	add	r7, sp, #16
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80079fa:	79f9      	ldrb	r1, [r7, #7]
 80079fc:	2300      	movs	r3, #0
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	2308      	movs	r3, #8
 8007a02:	9302      	str	r3, [sp, #8]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fb46 	bl	80080a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af04      	add	r7, sp, #16
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	460b      	mov	r3, r1
 8007a30:	80fb      	strh	r3, [r7, #6]
 8007a32:	4613      	mov	r3, r2
 8007a34:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a44:	7979      	ldrb	r1, [r7, #5]
 8007a46:	7e3b      	ldrb	r3, [r7, #24]
 8007a48:	9303      	str	r3, [sp, #12]
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	9302      	str	r3, [sp, #8]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	2301      	movs	r3, #1
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	2300      	movs	r3, #0
 8007a58:	2200      	movs	r2, #0
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 fb21 	bl	80080a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b088      	sub	sp, #32
 8007a6e:	af04      	add	r7, sp, #16
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	4611      	mov	r1, r2
 8007a76:	461a      	mov	r2, r3
 8007a78:	460b      	mov	r3, r1
 8007a7a:	80fb      	strh	r3, [r7, #6]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a80:	7979      	ldrb	r1, [r7, #5]
 8007a82:	2300      	movs	r3, #0
 8007a84:	9303      	str	r3, [sp, #12]
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	9302      	str	r3, [sp, #8]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	2201      	movs	r2, #1
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fb03 	bl	80080a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007a9c:	2300      	movs	r3, #0

}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b088      	sub	sp, #32
 8007aaa:	af04      	add	r7, sp, #16
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	80fb      	strh	r3, [r7, #6]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007aca:	7979      	ldrb	r1, [r7, #5]
 8007acc:	7e3b      	ldrb	r3, [r7, #24]
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	9302      	str	r3, [sp, #8]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	2301      	movs	r3, #1
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fade 	bl	80080a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af04      	add	r7, sp, #16
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4611      	mov	r1, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	460b      	mov	r3, r1
 8007b00:	80fb      	strh	r3, [r7, #6]
 8007b02:	4613      	mov	r3, r2
 8007b04:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b06:	7979      	ldrb	r1, [r7, #5]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9303      	str	r3, [sp, #12]
 8007b0c:	88fb      	ldrh	r3, [r7, #6]
 8007b0e:	9302      	str	r3, [sp, #8]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	2301      	movs	r3, #1
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	2302      	movs	r3, #2
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 fac0 	bl	80080a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af04      	add	r7, sp, #16
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	70fb      	strb	r3, [r7, #3]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70bb      	strb	r3, [r7, #2]
 8007b42:	4613      	mov	r3, r2
 8007b44:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b46:	7878      	ldrb	r0, [r7, #1]
 8007b48:	78ba      	ldrb	r2, [r7, #2]
 8007b4a:	78f9      	ldrb	r1, [r7, #3]
 8007b4c:	8b3b      	ldrh	r3, [r7, #24]
 8007b4e:	9302      	str	r3, [sp, #8]
 8007b50:	7d3b      	ldrb	r3, [r7, #20]
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	7c3b      	ldrb	r3, [r7, #16]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	4603      	mov	r3, r0
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa53 	bl	8008006 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007b76:	78fb      	ldrb	r3, [r7, #3]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fa72 	bl	8008064 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f836 	bl	8007c08 <USBH_GetFreePipe>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007ba0:	89fb      	ldrh	r3, [r7, #14]
 8007ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00a      	beq.n	8007bc0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	89fb      	ldrh	r3, [r7, #14]
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	33e0      	adds	r3, #224	; 0xe0
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007bc0:	89fb      	ldrh	r3, [r7, #14]
 8007bc2:	b2db      	uxtb	r3, r3
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	2b0a      	cmp	r3, #10
 8007bdc:	d80d      	bhi.n	8007bfa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007bde:	78fb      	ldrb	r3, [r7, #3]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	33e0      	adds	r3, #224	; 0xe0
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	33e0      	adds	r3, #224	; 0xe0
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
 8007c18:	e00f      	b.n	8007c3a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	33e0      	adds	r3, #224	; 0xe0
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d102      	bne.n	8007c34 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	e007      	b.n	8007c44 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	3301      	adds	r3, #1
 8007c38:	73fb      	strb	r3, [r7, #15]
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b0a      	cmp	r3, #10
 8007c3e:	d9ec      	bls.n	8007c1a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c54:	2201      	movs	r2, #1
 8007c56:	490e      	ldr	r1, [pc, #56]	; (8007c90 <MX_USB_HOST_Init+0x40>)
 8007c58:	480e      	ldr	r0, [pc, #56]	; (8007c94 <MX_USB_HOST_Init+0x44>)
 8007c5a:	f7fe fca1 	bl	80065a0 <USBH_Init>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007c64:	f7f8 fe6a 	bl	800093c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007c68:	490b      	ldr	r1, [pc, #44]	; (8007c98 <MX_USB_HOST_Init+0x48>)
 8007c6a:	480a      	ldr	r0, [pc, #40]	; (8007c94 <MX_USB_HOST_Init+0x44>)
 8007c6c:	f7fe fd26 	bl	80066bc <USBH_RegisterClass>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007c76:	f7f8 fe61 	bl	800093c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007c7a:	4806      	ldr	r0, [pc, #24]	; (8007c94 <MX_USB_HOST_Init+0x44>)
 8007c7c:	f7fe fdaa 	bl	80067d4 <USBH_Start>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007c86:	f7f8 fe59 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007c8a:	bf00      	nop
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	08007cb1 	.word	0x08007cb1
 8007c94:	200001b4 	.word	0x200001b4
 8007c98:	2000000c 	.word	0x2000000c

08007c9c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007ca0:	4802      	ldr	r0, [pc, #8]	; (8007cac <MX_USB_HOST_Process+0x10>)
 8007ca2:	f7fe fda7 	bl	80067f4 <USBH_Process>
}
 8007ca6:	bf00      	nop
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	200001b4 	.word	0x200001b4

08007cb0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d819      	bhi.n	8007cf8 <USBH_UserProcess+0x48>
 8007cc4:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <USBH_UserProcess+0x1c>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007cf9 	.word	0x08007cf9
 8007cd0:	08007ce9 	.word	0x08007ce9
 8007cd4:	08007cf9 	.word	0x08007cf9
 8007cd8:	08007cf1 	.word	0x08007cf1
 8007cdc:	08007ce1 	.word	0x08007ce1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007ce0:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <USBH_UserProcess+0x58>)
 8007ce2:	2203      	movs	r2, #3
 8007ce4:	701a      	strb	r2, [r3, #0]
  break;
 8007ce6:	e008      	b.n	8007cfa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007ce8:	4b07      	ldr	r3, [pc, #28]	; (8007d08 <USBH_UserProcess+0x58>)
 8007cea:	2202      	movs	r2, #2
 8007cec:	701a      	strb	r2, [r3, #0]
  break;
 8007cee:	e004      	b.n	8007cfa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007cf0:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <USBH_UserProcess+0x58>)
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	701a      	strb	r2, [r3, #0]
  break;
 8007cf6:	e000      	b.n	8007cfa <USBH_UserProcess+0x4a>

  default:
  break;
 8007cf8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	200000b0 	.word	0x200000b0

08007d0c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08a      	sub	sp, #40	; 0x28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d14:	f107 0314 	add.w	r3, r7, #20
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	605a      	str	r2, [r3, #4]
 8007d1e:	609a      	str	r2, [r3, #8]
 8007d20:	60da      	str	r2, [r3, #12]
 8007d22:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d2c:	d147      	bne.n	8007dbe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d2e:	2300      	movs	r3, #0
 8007d30:	613b      	str	r3, [r7, #16]
 8007d32:	4b25      	ldr	r3, [pc, #148]	; (8007dc8 <HAL_HCD_MspInit+0xbc>)
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	4a24      	ldr	r2, [pc, #144]	; (8007dc8 <HAL_HCD_MspInit+0xbc>)
 8007d38:	f043 0301 	orr.w	r3, r3, #1
 8007d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d3e:	4b22      	ldr	r3, [pc, #136]	; (8007dc8 <HAL_HCD_MspInit+0xbc>)
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d58:	f107 0314 	add.w	r3, r7, #20
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	481b      	ldr	r0, [pc, #108]	; (8007dcc <HAL_HCD_MspInit+0xc0>)
 8007d60:	f7f9 f978 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d64:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d72:	2300      	movs	r3, #0
 8007d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d76:	230a      	movs	r3, #10
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d7a:	f107 0314 	add.w	r3, r7, #20
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4812      	ldr	r0, [pc, #72]	; (8007dcc <HAL_HCD_MspInit+0xc0>)
 8007d82:	f7f9 f967 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d86:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <HAL_HCD_MspInit+0xbc>)
 8007d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8a:	4a0f      	ldr	r2, [pc, #60]	; (8007dc8 <HAL_HCD_MspInit+0xbc>)
 8007d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d90:	6353      	str	r3, [r2, #52]	; 0x34
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <HAL_HCD_MspInit+0xbc>)
 8007d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9a:	4a0b      	ldr	r2, [pc, #44]	; (8007dc8 <HAL_HCD_MspInit+0xbc>)
 8007d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007da0:	6453      	str	r3, [r2, #68]	; 0x44
 8007da2:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <HAL_HCD_MspInit+0xbc>)
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dae:	2200      	movs	r2, #0
 8007db0:	2100      	movs	r1, #0
 8007db2:	2043      	movs	r0, #67	; 0x43
 8007db4:	f7f9 f917 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007db8:	2043      	movs	r0, #67	; 0x43
 8007dba:	f7f9 f930 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3728      	adds	r7, #40	; 0x28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	40020000 	.word	0x40020000

08007dd0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff f8db 	bl	8006f9a <USBH_LL_IncTimer>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7ff f913 	bl	8007026 <USBH_LL_Connect>
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff f91c 	bl	8007054 <USBH_LL_Disconnect>
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
 8007e30:	4613      	mov	r3, r2
 8007e32:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff f8cd 	bl	8006fee <USBH_LL_PortEnabled>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff f8cd 	bl	800700a <USBH_LL_PortDisabled>
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d12a      	bne.n	8007ee0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007e8a:	4a18      	ldr	r2, [pc, #96]	; (8007eec <USBH_LL_Init+0x74>)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a15      	ldr	r2, [pc, #84]	; (8007eec <USBH_LL_Init+0x74>)
 8007e96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e9a:	4b14      	ldr	r3, [pc, #80]	; (8007eec <USBH_LL_Init+0x74>)
 8007e9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ea0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <USBH_LL_Init+0x74>)
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ea8:	4b10      	ldr	r3, [pc, #64]	; (8007eec <USBH_LL_Init+0x74>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007eae:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <USBH_LL_Init+0x74>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007eb4:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <USBH_LL_Init+0x74>)
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <USBH_LL_Init+0x74>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ec0:	480a      	ldr	r0, [pc, #40]	; (8007eec <USBH_LL_Init+0x74>)
 8007ec2:	f7f9 fa7c 	bl	80013be <HAL_HCD_Init>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007ecc:	f7f8 fd36 	bl	800093c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007ed0:	4806      	ldr	r0, [pc, #24]	; (8007eec <USBH_LL_Init+0x74>)
 8007ed2:	f7f9 fe60 	bl	8001b96 <HAL_HCD_GetCurrentFrame>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff f84e 	bl	8006f7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	2000058c 	.word	0x2000058c

08007ef0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7f9 fdcf 	bl	8001aaa <HAL_HCD_Start>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 f95c 	bl	80081d0 <USBH_Get_USB_Status>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7f9 fdd7 	bl	8001af0 <HAL_HCD_Stop>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 f941 	bl	80081d0 <USBH_Get_USB_Status>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007f64:	2301      	movs	r3, #1
 8007f66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7f9 fe1f 	bl	8001bb2 <HAL_HCD_GetCurrentSpeed>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d00c      	beq.n	8007f94 <USBH_LL_GetSpeed+0x38>
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d80d      	bhi.n	8007f9a <USBH_LL_GetSpeed+0x3e>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <USBH_LL_GetSpeed+0x2c>
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d003      	beq.n	8007f8e <USBH_LL_GetSpeed+0x32>
 8007f86:	e008      	b.n	8007f9a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f8c:	e008      	b.n	8007fa0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	73fb      	strb	r3, [r7, #15]
    break;
 8007f92:	e005      	b.n	8007fa0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007f94:	2302      	movs	r3, #2
 8007f96:	73fb      	strb	r3, [r7, #15]
    break;
 8007f98:	e002      	b.n	8007fa0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f9e:	bf00      	nop
  }
  return  speed;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7f9 fdb2 	bl	8001b2a <HAL_HCD_ResetPort>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 f8ff 	bl	80081d0 <USBH_Get_USB_Status>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ff2:	78fa      	ldrb	r2, [r7, #3]
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7f9 fdb9 	bl	8001b6e <HAL_HCD_HC_GetXferCount>
 8007ffc:	4603      	mov	r3, r0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008006:	b590      	push	{r4, r7, lr}
 8008008:	b089      	sub	sp, #36	; 0x24
 800800a:	af04      	add	r7, sp, #16
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	4608      	mov	r0, r1
 8008010:	4611      	mov	r1, r2
 8008012:	461a      	mov	r2, r3
 8008014:	4603      	mov	r3, r0
 8008016:	70fb      	strb	r3, [r7, #3]
 8008018:	460b      	mov	r3, r1
 800801a:	70bb      	strb	r3, [r7, #2]
 800801c:	4613      	mov	r3, r2
 800801e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800802e:	787c      	ldrb	r4, [r7, #1]
 8008030:	78ba      	ldrb	r2, [r7, #2]
 8008032:	78f9      	ldrb	r1, [r7, #3]
 8008034:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008036:	9302      	str	r3, [sp, #8]
 8008038:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	4623      	mov	r3, r4
 8008046:	f7f9 fa1c 	bl	8001482 <HAL_HCD_HC_Init>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f8bd 	bl	80081d0 <USBH_Get_USB_Status>
 8008056:	4603      	mov	r3, r0
 8008058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800805a:	7bbb      	ldrb	r3, [r7, #14]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	bd90      	pop	{r4, r7, pc}

08008064 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	4611      	mov	r1, r2
 8008082:	4618      	mov	r0, r3
 8008084:	f7f9 fa8c 	bl	80015a0 <HAL_HCD_HC_Halt>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f89e 	bl	80081d0 <USBH_Get_USB_Status>
 8008094:	4603      	mov	r3, r0
 8008096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008098:	7bbb      	ldrb	r3, [r7, #14]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80080a2:	b590      	push	{r4, r7, lr}
 80080a4:	b089      	sub	sp, #36	; 0x24
 80080a6:	af04      	add	r7, sp, #16
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	4608      	mov	r0, r1
 80080ac:	4611      	mov	r1, r2
 80080ae:	461a      	mov	r2, r3
 80080b0:	4603      	mov	r3, r0
 80080b2:	70fb      	strb	r3, [r7, #3]
 80080b4:	460b      	mov	r3, r1
 80080b6:	70bb      	strb	r3, [r7, #2]
 80080b8:	4613      	mov	r3, r2
 80080ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080ca:	787c      	ldrb	r4, [r7, #1]
 80080cc:	78ba      	ldrb	r2, [r7, #2]
 80080ce:	78f9      	ldrb	r1, [r7, #3]
 80080d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080d4:	9303      	str	r3, [sp, #12]
 80080d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080d8:	9302      	str	r3, [sp, #8]
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	4623      	mov	r3, r4
 80080e6:	f7f9 fa7f 	bl	80015e8 <HAL_HCD_HC_SubmitRequest>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 f86d 	bl	80081d0 <USBH_Get_USB_Status>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	bd90      	pop	{r4, r7, pc}

08008104 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f7f9 fd13 	bl	8001b46 <HAL_HCD_HC_GetURBState>
 8008120:	4603      	mov	r3, r0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800813c:	2b01      	cmp	r3, #1
 800813e:	d103      	bne.n	8008148 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 f870 	bl	8008228 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008148:	20c8      	movs	r0, #200	; 0xc8
 800814a:	f7f8 fe4d 	bl	8000de8 <HAL_Delay>
  return USBH_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
 8008164:	4613      	mov	r3, r2
 8008166:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800816e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	212c      	movs	r1, #44	; 0x2c
 8008176:	fb01 f303 	mul.w	r3, r1, r3
 800817a:	4413      	add	r3, r2
 800817c:	333b      	adds	r3, #59	; 0x3b
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d009      	beq.n	8008198 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	212c      	movs	r1, #44	; 0x2c
 800818a:	fb01 f303 	mul.w	r3, r1, r3
 800818e:	4413      	add	r3, r2
 8008190:	3354      	adds	r3, #84	; 0x54
 8008192:	78ba      	ldrb	r2, [r7, #2]
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e008      	b.n	80081aa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	212c      	movs	r1, #44	; 0x2c
 800819e:	fb01 f303 	mul.w	r3, r1, r3
 80081a2:	4413      	add	r3, r2
 80081a4:	3355      	adds	r3, #85	; 0x55
 80081a6:	78ba      	ldrb	r2, [r7, #2]
 80081a8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7f8 fe11 	bl	8000de8 <HAL_Delay>
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d817      	bhi.n	8008214 <USBH_Get_USB_Status+0x44>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <USBH_Get_USB_Status+0x1c>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	080081fd 	.word	0x080081fd
 80081f0:	08008203 	.word	0x08008203
 80081f4:	08008209 	.word	0x08008209
 80081f8:	0800820f 	.word	0x0800820f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008200:	e00b      	b.n	800821a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008202:	2302      	movs	r3, #2
 8008204:	73fb      	strb	r3, [r7, #15]
    break;
 8008206:	e008      	b.n	800821a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008208:	2301      	movs	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
    break;
 800820c:	e005      	b.n	800821a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800820e:	2302      	movs	r3, #2
 8008210:	73fb      	strb	r3, [r7, #15]
    break;
 8008212:	e002      	b.n	800821a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008214:	2302      	movs	r3, #2
 8008216:	73fb      	strb	r3, [r7, #15]
    break;
 8008218:	bf00      	nop
  }
  return usb_status;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
 8008240:	e001      	b.n	8008246 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008242:	2301      	movs	r3, #1
 8008244:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	461a      	mov	r2, r3
 800824a:	2101      	movs	r1, #1
 800824c:	4803      	ldr	r0, [pc, #12]	; (800825c <MX_DriverVbusFS+0x34>)
 800824e:	f7f9 f89d 	bl	800138c <HAL_GPIO_WritePin>
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	40020800 	.word	0x40020800

08008260 <__errno>:
 8008260:	4b01      	ldr	r3, [pc, #4]	; (8008268 <__errno+0x8>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	2000002c 	.word	0x2000002c

0800826c <__libc_init_array>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	4d0d      	ldr	r5, [pc, #52]	; (80082a4 <__libc_init_array+0x38>)
 8008270:	4c0d      	ldr	r4, [pc, #52]	; (80082a8 <__libc_init_array+0x3c>)
 8008272:	1b64      	subs	r4, r4, r5
 8008274:	10a4      	asrs	r4, r4, #2
 8008276:	2600      	movs	r6, #0
 8008278:	42a6      	cmp	r6, r4
 800827a:	d109      	bne.n	8008290 <__libc_init_array+0x24>
 800827c:	4d0b      	ldr	r5, [pc, #44]	; (80082ac <__libc_init_array+0x40>)
 800827e:	4c0c      	ldr	r4, [pc, #48]	; (80082b0 <__libc_init_array+0x44>)
 8008280:	f000 f8f8 	bl	8008474 <_init>
 8008284:	1b64      	subs	r4, r4, r5
 8008286:	10a4      	asrs	r4, r4, #2
 8008288:	2600      	movs	r6, #0
 800828a:	42a6      	cmp	r6, r4
 800828c:	d105      	bne.n	800829a <__libc_init_array+0x2e>
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	f855 3b04 	ldr.w	r3, [r5], #4
 8008294:	4798      	blx	r3
 8008296:	3601      	adds	r6, #1
 8008298:	e7ee      	b.n	8008278 <__libc_init_array+0xc>
 800829a:	f855 3b04 	ldr.w	r3, [r5], #4
 800829e:	4798      	blx	r3
 80082a0:	3601      	adds	r6, #1
 80082a2:	e7f2      	b.n	800828a <__libc_init_array+0x1e>
 80082a4:	080084b0 	.word	0x080084b0
 80082a8:	080084b0 	.word	0x080084b0
 80082ac:	080084b0 	.word	0x080084b0
 80082b0:	080084b4 	.word	0x080084b4

080082b4 <malloc>:
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <malloc+0xc>)
 80082b6:	4601      	mov	r1, r0
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	f000 b863 	b.w	8008384 <_malloc_r>
 80082be:	bf00      	nop
 80082c0:	2000002c 	.word	0x2000002c

080082c4 <free>:
 80082c4:	4b02      	ldr	r3, [pc, #8]	; (80082d0 <free+0xc>)
 80082c6:	4601      	mov	r1, r0
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	f000 b80b 	b.w	80082e4 <_free_r>
 80082ce:	bf00      	nop
 80082d0:	2000002c 	.word	0x2000002c

080082d4 <memset>:
 80082d4:	4402      	add	r2, r0
 80082d6:	4603      	mov	r3, r0
 80082d8:	4293      	cmp	r3, r2
 80082da:	d100      	bne.n	80082de <memset+0xa>
 80082dc:	4770      	bx	lr
 80082de:	f803 1b01 	strb.w	r1, [r3], #1
 80082e2:	e7f9      	b.n	80082d8 <memset+0x4>

080082e4 <_free_r>:
 80082e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082e6:	2900      	cmp	r1, #0
 80082e8:	d048      	beq.n	800837c <_free_r+0x98>
 80082ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ee:	9001      	str	r0, [sp, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f1a1 0404 	sub.w	r4, r1, #4
 80082f6:	bfb8      	it	lt
 80082f8:	18e4      	addlt	r4, r4, r3
 80082fa:	f000 f8ad 	bl	8008458 <__malloc_lock>
 80082fe:	4a20      	ldr	r2, [pc, #128]	; (8008380 <_free_r+0x9c>)
 8008300:	9801      	ldr	r0, [sp, #4]
 8008302:	6813      	ldr	r3, [r2, #0]
 8008304:	4615      	mov	r5, r2
 8008306:	b933      	cbnz	r3, 8008316 <_free_r+0x32>
 8008308:	6063      	str	r3, [r4, #4]
 800830a:	6014      	str	r4, [r2, #0]
 800830c:	b003      	add	sp, #12
 800830e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008312:	f000 b8a7 	b.w	8008464 <__malloc_unlock>
 8008316:	42a3      	cmp	r3, r4
 8008318:	d90b      	bls.n	8008332 <_free_r+0x4e>
 800831a:	6821      	ldr	r1, [r4, #0]
 800831c:	1862      	adds	r2, r4, r1
 800831e:	4293      	cmp	r3, r2
 8008320:	bf04      	itt	eq
 8008322:	681a      	ldreq	r2, [r3, #0]
 8008324:	685b      	ldreq	r3, [r3, #4]
 8008326:	6063      	str	r3, [r4, #4]
 8008328:	bf04      	itt	eq
 800832a:	1852      	addeq	r2, r2, r1
 800832c:	6022      	streq	r2, [r4, #0]
 800832e:	602c      	str	r4, [r5, #0]
 8008330:	e7ec      	b.n	800830c <_free_r+0x28>
 8008332:	461a      	mov	r2, r3
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	b10b      	cbz	r3, 800833c <_free_r+0x58>
 8008338:	42a3      	cmp	r3, r4
 800833a:	d9fa      	bls.n	8008332 <_free_r+0x4e>
 800833c:	6811      	ldr	r1, [r2, #0]
 800833e:	1855      	adds	r5, r2, r1
 8008340:	42a5      	cmp	r5, r4
 8008342:	d10b      	bne.n	800835c <_free_r+0x78>
 8008344:	6824      	ldr	r4, [r4, #0]
 8008346:	4421      	add	r1, r4
 8008348:	1854      	adds	r4, r2, r1
 800834a:	42a3      	cmp	r3, r4
 800834c:	6011      	str	r1, [r2, #0]
 800834e:	d1dd      	bne.n	800830c <_free_r+0x28>
 8008350:	681c      	ldr	r4, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	6053      	str	r3, [r2, #4]
 8008356:	4421      	add	r1, r4
 8008358:	6011      	str	r1, [r2, #0]
 800835a:	e7d7      	b.n	800830c <_free_r+0x28>
 800835c:	d902      	bls.n	8008364 <_free_r+0x80>
 800835e:	230c      	movs	r3, #12
 8008360:	6003      	str	r3, [r0, #0]
 8008362:	e7d3      	b.n	800830c <_free_r+0x28>
 8008364:	6825      	ldr	r5, [r4, #0]
 8008366:	1961      	adds	r1, r4, r5
 8008368:	428b      	cmp	r3, r1
 800836a:	bf04      	itt	eq
 800836c:	6819      	ldreq	r1, [r3, #0]
 800836e:	685b      	ldreq	r3, [r3, #4]
 8008370:	6063      	str	r3, [r4, #4]
 8008372:	bf04      	itt	eq
 8008374:	1949      	addeq	r1, r1, r5
 8008376:	6021      	streq	r1, [r4, #0]
 8008378:	6054      	str	r4, [r2, #4]
 800837a:	e7c7      	b.n	800830c <_free_r+0x28>
 800837c:	b003      	add	sp, #12
 800837e:	bd30      	pop	{r4, r5, pc}
 8008380:	200000b4 	.word	0x200000b4

08008384 <_malloc_r>:
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	1ccd      	adds	r5, r1, #3
 8008388:	f025 0503 	bic.w	r5, r5, #3
 800838c:	3508      	adds	r5, #8
 800838e:	2d0c      	cmp	r5, #12
 8008390:	bf38      	it	cc
 8008392:	250c      	movcc	r5, #12
 8008394:	2d00      	cmp	r5, #0
 8008396:	4606      	mov	r6, r0
 8008398:	db01      	blt.n	800839e <_malloc_r+0x1a>
 800839a:	42a9      	cmp	r1, r5
 800839c:	d903      	bls.n	80083a6 <_malloc_r+0x22>
 800839e:	230c      	movs	r3, #12
 80083a0:	6033      	str	r3, [r6, #0]
 80083a2:	2000      	movs	r0, #0
 80083a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a6:	f000 f857 	bl	8008458 <__malloc_lock>
 80083aa:	4921      	ldr	r1, [pc, #132]	; (8008430 <_malloc_r+0xac>)
 80083ac:	680a      	ldr	r2, [r1, #0]
 80083ae:	4614      	mov	r4, r2
 80083b0:	b99c      	cbnz	r4, 80083da <_malloc_r+0x56>
 80083b2:	4f20      	ldr	r7, [pc, #128]	; (8008434 <_malloc_r+0xb0>)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	b923      	cbnz	r3, 80083c2 <_malloc_r+0x3e>
 80083b8:	4621      	mov	r1, r4
 80083ba:	4630      	mov	r0, r6
 80083bc:	f000 f83c 	bl	8008438 <_sbrk_r>
 80083c0:	6038      	str	r0, [r7, #0]
 80083c2:	4629      	mov	r1, r5
 80083c4:	4630      	mov	r0, r6
 80083c6:	f000 f837 	bl	8008438 <_sbrk_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d123      	bne.n	8008416 <_malloc_r+0x92>
 80083ce:	230c      	movs	r3, #12
 80083d0:	6033      	str	r3, [r6, #0]
 80083d2:	4630      	mov	r0, r6
 80083d4:	f000 f846 	bl	8008464 <__malloc_unlock>
 80083d8:	e7e3      	b.n	80083a2 <_malloc_r+0x1e>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	1b5b      	subs	r3, r3, r5
 80083de:	d417      	bmi.n	8008410 <_malloc_r+0x8c>
 80083e0:	2b0b      	cmp	r3, #11
 80083e2:	d903      	bls.n	80083ec <_malloc_r+0x68>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	441c      	add	r4, r3
 80083e8:	6025      	str	r5, [r4, #0]
 80083ea:	e004      	b.n	80083f6 <_malloc_r+0x72>
 80083ec:	6863      	ldr	r3, [r4, #4]
 80083ee:	42a2      	cmp	r2, r4
 80083f0:	bf0c      	ite	eq
 80083f2:	600b      	streq	r3, [r1, #0]
 80083f4:	6053      	strne	r3, [r2, #4]
 80083f6:	4630      	mov	r0, r6
 80083f8:	f000 f834 	bl	8008464 <__malloc_unlock>
 80083fc:	f104 000b 	add.w	r0, r4, #11
 8008400:	1d23      	adds	r3, r4, #4
 8008402:	f020 0007 	bic.w	r0, r0, #7
 8008406:	1ac2      	subs	r2, r0, r3
 8008408:	d0cc      	beq.n	80083a4 <_malloc_r+0x20>
 800840a:	1a1b      	subs	r3, r3, r0
 800840c:	50a3      	str	r3, [r4, r2]
 800840e:	e7c9      	b.n	80083a4 <_malloc_r+0x20>
 8008410:	4622      	mov	r2, r4
 8008412:	6864      	ldr	r4, [r4, #4]
 8008414:	e7cc      	b.n	80083b0 <_malloc_r+0x2c>
 8008416:	1cc4      	adds	r4, r0, #3
 8008418:	f024 0403 	bic.w	r4, r4, #3
 800841c:	42a0      	cmp	r0, r4
 800841e:	d0e3      	beq.n	80083e8 <_malloc_r+0x64>
 8008420:	1a21      	subs	r1, r4, r0
 8008422:	4630      	mov	r0, r6
 8008424:	f000 f808 	bl	8008438 <_sbrk_r>
 8008428:	3001      	adds	r0, #1
 800842a:	d1dd      	bne.n	80083e8 <_malloc_r+0x64>
 800842c:	e7cf      	b.n	80083ce <_malloc_r+0x4a>
 800842e:	bf00      	nop
 8008430:	200000b4 	.word	0x200000b4
 8008434:	200000b8 	.word	0x200000b8

08008438 <_sbrk_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d06      	ldr	r5, [pc, #24]	; (8008454 <_sbrk_r+0x1c>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	f7f8 fbec 	bl	8000c20 <_sbrk>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_sbrk_r+0x1a>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_sbrk_r+0x1a>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	20000890 	.word	0x20000890

08008458 <__malloc_lock>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__malloc_lock+0x8>)
 800845a:	f000 b809 	b.w	8008470 <__retarget_lock_acquire_recursive>
 800845e:	bf00      	nop
 8008460:	20000898 	.word	0x20000898

08008464 <__malloc_unlock>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__malloc_unlock+0x8>)
 8008466:	f000 b804 	b.w	8008472 <__retarget_lock_release_recursive>
 800846a:	bf00      	nop
 800846c:	20000898 	.word	0x20000898

08008470 <__retarget_lock_acquire_recursive>:
 8008470:	4770      	bx	lr

08008472 <__retarget_lock_release_recursive>:
 8008472:	4770      	bx	lr

08008474 <_init>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr

08008480 <_fini>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr
