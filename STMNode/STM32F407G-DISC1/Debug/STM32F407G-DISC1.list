
STM32F407G-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007c6c  08007c6c  00017c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c88  08007c88  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007c88  08007c88  00017c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c90  08007c90  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c90  08007c90  00017c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000810  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a064  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a15  00000000  00000000  0003a124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0003db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  0003ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002579e  00000000  00000000  0003fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017027  00000000  00000000  0006538e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd29  00000000  00000000  0007c3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001480de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004878  00000000  00000000  00148134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c54 	.word	0x08007c54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007c54 	.word	0x08007c54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc14 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f818 	bl	80004fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f92e 	bl	800072c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80004d0:	f000 f888 	bl	80005e4 <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 80004d4:	f000 f8ba 	bl	800064c <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 80004d8:	f000 f8ec 	bl	80006b4 <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 80004dc:	f006 ffa8 	bl	8007430 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <main+0x38>)
 80004e6:	f000 ff60 	bl	80013aa <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80004ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ee:	f000 fc71 	bl	8000dd4 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f2:	f006 ffc3 	bl	800747c <MX_USB_HOST_Process>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004f6:	e7f3      	b.n	80004e0 <main+0x20>
 80004f8:	40020c00 	.word	0x40020c00

080004fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f007 fad2 	bl	8007ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <_Z18SystemClock_Configv+0xe0>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <_Z18SystemClock_Configv+0xe0>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <_Z18SystemClock_Configv+0xe0>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <_Z18SystemClock_Configv+0xe4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a26      	ldr	r2, [pc, #152]	; (80005e0 <_Z18SystemClock_Configv+0xe4>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <_Z18SystemClock_Configv+0xe4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800056c:	2308      	movs	r3, #8
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fa80 	bl	8003a88 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000598:	f000 f9c6 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fcdc 	bl	8003f78 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bf14      	ite	ne
 80005c6:	2301      	movne	r3, #1
 80005c8:	2300      	moveq	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 80005d0:	f000 f9aa 	bl	8000928 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	; 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 80005ea:	4a16      	ldr	r2, [pc, #88]	; (8000644 <_ZL12MX_I2C1_Initv+0x60>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 80005f0:	4a15      	ldr	r2, [pc, #84]	; (8000648 <_ZL12MX_I2C1_Initv+0x64>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 8000602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <_ZL12MX_I2C1_Initv+0x5c>)
 8000622:	f002 fc4d 	bl	8002ec0 <HAL_I2C_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2301      	movne	r3, #1
 800062e:	2300      	moveq	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000636:	f000 f977 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000ac 	.word	0x200000ac
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <_ZL12MX_I2S3_Initv+0x60>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <_ZL12MX_I2S3_Initv+0x64>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <_ZL12MX_I2S3_Initv+0x5c>)
 800068c:	f002 fd5c 	bl	8003148 <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf14      	ite	ne
 8000696:	2301      	movne	r3, #1
 8000698:	2300      	moveq	r3, #0
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 80006a0:	f000 f942 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000100 	.word	0x20000100
 80006ac:	40003c00 	.word	0x40003c00
 80006b0:	00017700 	.word	0x00017700

080006b4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006ba:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <_ZL12MX_SPI1_Initv+0x74>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <_ZL12MX_SPI1_Initv+0x70>)
 8000706:	f003 ff5f 	bl	80045c8 <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800071a:	f000 f905 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000148 	.word	0x20000148
 8000728:	40013000 	.word	0x40013000

0800072c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4b72      	ldr	r3, [pc, #456]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a71      	ldr	r2, [pc, #452]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b6f      	ldr	r3, [pc, #444]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b6b      	ldr	r3, [pc, #428]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a6a      	ldr	r2, [pc, #424]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b68      	ldr	r3, [pc, #416]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b64      	ldr	r3, [pc, #400]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a63      	ldr	r2, [pc, #396]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b61      	ldr	r3, [pc, #388]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b5d      	ldr	r3, [pc, #372]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a5c      	ldr	r2, [pc, #368]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b5a      	ldr	r3, [pc, #360]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b56      	ldr	r3, [pc, #344]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a55      	ldr	r2, [pc, #340]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b53      	ldr	r3, [pc, #332]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b4f      	ldr	r3, [pc, #316]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a4e      	ldr	r2, [pc, #312]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <_ZL12MX_GPIO_Initv+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4849      	ldr	r0, [pc, #292]	; (8000914 <_ZL12MX_GPIO_Initv+0x1e8>)
 80007f0:	f000 fdc2 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	4847      	ldr	r0, [pc, #284]	; (8000918 <_ZL12MX_GPIO_Initv+0x1ec>)
 80007fa:	f000 fdbd 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fe:	2200      	movs	r2, #0
 8000800:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000804:	4845      	ldr	r0, [pc, #276]	; (800091c <_ZL12MX_GPIO_Initv+0x1f0>)
 8000806:	f000 fdb7 	bl	8001378 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	483c      	ldr	r0, [pc, #240]	; (8000914 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000822:	f000 fc0d 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <_ZL12MX_GPIO_Initv+0x1ec>)
 800083e:	f000 fbff 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	482e      	ldr	r0, [pc, #184]	; (8000918 <_ZL12MX_GPIO_Initv+0x1ec>)
 800085e:	f000 fbef 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000866:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000878:	f000 fbe2 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087c:	2304      	movs	r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4825      	ldr	r0, [pc, #148]	; (8000924 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000890:	f000 fbd6 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481c      	ldr	r0, [pc, #112]	; (8000924 <_ZL12MX_GPIO_Initv+0x1f8>)
 80008b2:	f000 fbc5 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <_ZL12MX_GPIO_Initv+0x1f0>)
 80008d0:	f000 fbb6 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <_ZL12MX_GPIO_Initv+0x1f0>)
 80008e8:	f000 fbaa 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000902:	f000 fb9d 	bl	8001040 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	; 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40020000 	.word	0x40020000
 8000924:	40020400 	.word	0x40020400

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000972:	2007      	movs	r0, #7
 8000974:	f000 fb22 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_I2C_MspInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12c      	bne.n	8000a00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d4:	2304      	movs	r3, #4
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <HAL_I2C_MspInit+0x8c>)
 80009e0:	f000 fb2e 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400

08000a14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a31      	ldr	r2, [pc, #196]	; (8000b04 <HAL_I2S_MspInit+0xf0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d15a      	bne.n	8000afa <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a44:	2301      	movs	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a48:	23c0      	movs	r3, #192	; 0xc0
 8000a4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 fc77 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a60:	f7ff ff62 	bl	8000928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a1f      	ldr	r2, [pc, #124]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac8:	2306      	movs	r3, #6
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480e      	ldr	r0, [pc, #56]	; (8000b0c <HAL_I2S_MspInit+0xf8>)
 8000ad4:	f000 fab4 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ad8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aea:	2306      	movs	r3, #6
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <HAL_I2S_MspInit+0xfc>)
 8000af6:	f000 faa3 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	; 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40003c00 	.word	0x40003c00
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40020800 	.word	0x40020800

08000b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_SPI_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b6e:	23e0      	movs	r3, #224	; 0xe0
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_SPI_MspInit+0x8c>)
 8000b8a:	f000 fa59 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f8d0 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <OTG_FS_IRQHandler+0x10>)
 8000bfe:	f000 fe59 	bl	80018b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000058c 	.word	0x2000058c

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f006 ff00 	bl	8007a40 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20020000 	.word	0x20020000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	200001a0 	.word	0x200001a0
 8000c74:	200008a0 	.word	0x200008a0

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ffd7 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f006 febf 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fbf7 	bl	80004c0 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ce0:	08007c98 	.word	0x08007c98
  ldr r2, =_sbss
 8000ce4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ce8:	200008a0 	.word	0x200008a0

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f94f 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 f808 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fe06 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f967 	bl	8001026 <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f92f 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200001b0 	.word	0x200001b0

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200001b0 	.word	0x200001b0

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e16b      	b.n	8001334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 815a 	bne.w	800132e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d005      	beq.n	8001092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	2b02      	cmp	r3, #2
 8001090:	d130      	bne.n	80010f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 0201 	and.w	r2, r3, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d017      	beq.n	8001130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80b4 	beq.w	800132e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b60      	ldr	r3, [pc, #384]	; (800134c <HAL_GPIO_Init+0x30c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a5f      	ldr	r2, [pc, #380]	; (800134c <HAL_GPIO_Init+0x30c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b5d      	ldr	r3, [pc, #372]	; (800134c <HAL_GPIO_Init+0x30c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a5b      	ldr	r2, [pc, #364]	; (8001350 <HAL_GPIO_Init+0x310>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a52      	ldr	r2, [pc, #328]	; (8001354 <HAL_GPIO_Init+0x314>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x318>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a50      	ldr	r2, [pc, #320]	; (800135c <HAL_GPIO_Init+0x31c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <HAL_GPIO_Init+0x320>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <HAL_GPIO_Init+0x324>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x216>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x328>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x212>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_GPIO_Init+0x32c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x20e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20a>
 8001246:	2307      	movs	r3, #7
 8001248:	e00e      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124a:	2308      	movs	r3, #8
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124e:	2306      	movs	r3, #6
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	; (8001350 <HAL_GPIO_Init+0x310>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <HAL_GPIO_Init+0x334>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012aa:	4a32      	ldr	r2, [pc, #200]	; (8001374 <HAL_GPIO_Init+0x334>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_GPIO_Init+0x334>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d4:	4a27      	ldr	r2, [pc, #156]	; (8001374 <HAL_GPIO_Init+0x334>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_GPIO_Init+0x334>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <HAL_GPIO_Init+0x334>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_GPIO_Init+0x334>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <HAL_GPIO_Init+0x334>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae90 	bls.w	800105c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021400 	.word	0x40021400
 800136c:	40021800 	.word	0x40021800
 8001370:	40021c00 	.word	0x40021c00
 8001374:	40013c00 	.word	0x40013c00

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	041a      	lsls	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013bc:	887a      	ldrh	r2, [r7, #2]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	041a      	lsls	r2, r3, #16
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	400b      	ands	r3, r1
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e0:	b08f      	sub	sp, #60	; 0x3c
 80013e2:	af0a      	add	r7, sp, #40	; 0x28
 80013e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e054      	b.n	800149a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f006 f86e 	bl	80074ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2203      	movs	r2, #3
 8001414:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f9c5 	bl	80047be <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	687e      	ldr	r6, [r7, #4]
 800143c:	466d      	mov	r5, sp
 800143e:	f106 0410 	add.w	r4, r6, #16
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001452:	1d33      	adds	r3, r6, #4
 8001454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f003 f93f 	bl	80046da <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	4618      	mov	r0, r3
 8001464:	f003 f9bc 	bl	80047e0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	687e      	ldr	r6, [r7, #4]
 8001470:	466d      	mov	r5, sp
 8001472:	f106 0410 	add.w	r4, r6, #16
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001482:	e885 0003 	stmia.w	r5, {r0, r1}
 8001486:	1d33      	adds	r3, r6, #4
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f003 fb22 	bl	8004ad4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014a2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014a2:	b590      	push	{r4, r7, lr}
 80014a4:	b089      	sub	sp, #36	; 0x24
 80014a6:	af04      	add	r7, sp, #16
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	4608      	mov	r0, r1
 80014ac:	4611      	mov	r1, r2
 80014ae:	461a      	mov	r2, r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	70fb      	strb	r3, [r7, #3]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70bb      	strb	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_HCD_HC_Init+0x28>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e076      	b.n	80015b8 <HAL_HCD_HC_Init+0x116>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	212c      	movs	r1, #44	; 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	333d      	adds	r3, #61	; 0x3d
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	3338      	adds	r3, #56	; 0x38
 80014f2:	787a      	ldrb	r2, [r7, #1]
 80014f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	212c      	movs	r1, #44	; 0x2c
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	3340      	adds	r3, #64	; 0x40
 8001504:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001506:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	3339      	adds	r3, #57	; 0x39
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	212c      	movs	r1, #44	; 0x2c
 8001520:	fb01 f303 	mul.w	r3, r1, r3
 8001524:	4413      	add	r3, r2
 8001526:	333f      	adds	r3, #63	; 0x3f
 8001528:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800152c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	78ba      	ldrb	r2, [r7, #2]
 8001532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001536:	b2d0      	uxtb	r0, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	212c      	movs	r1, #44	; 0x2c
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	4413      	add	r3, r2
 8001542:	333a      	adds	r3, #58	; 0x3a
 8001544:	4602      	mov	r2, r0
 8001546:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001548:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800154c:	2b00      	cmp	r3, #0
 800154e:	da09      	bge.n	8001564 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	212c      	movs	r1, #44	; 0x2c
 8001556:	fb01 f303 	mul.w	r3, r1, r3
 800155a:	4413      	add	r3, r2
 800155c:	333b      	adds	r3, #59	; 0x3b
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	e008      	b.n	8001576 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	212c      	movs	r1, #44	; 0x2c
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	4413      	add	r3, r2
 8001570:	333b      	adds	r3, #59	; 0x3b
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	212c      	movs	r1, #44	; 0x2c
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	333c      	adds	r3, #60	; 0x3c
 8001584:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001588:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	787c      	ldrb	r4, [r7, #1]
 8001590:	78ba      	ldrb	r2, [r7, #2]
 8001592:	78f9      	ldrb	r1, [r7, #3]
 8001594:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4623      	mov	r3, r4
 80015a6:	f003 fc0f 	bl	8004dc8 <USB_HC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}

080015c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_HCD_HC_Halt+0x1e>
 80015da:	2302      	movs	r3, #2
 80015dc:	e00f      	b.n	80015fe <HAL_HCD_HC_Halt+0x3e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	78fa      	ldrb	r2, [r7, #3]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 fe4b 	bl	800528a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	70fb      	strb	r3, [r7, #3]
 800161a:	460b      	mov	r3, r1
 800161c:	70bb      	strb	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	212c      	movs	r1, #44	; 0x2c
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	333b      	adds	r3, #59	; 0x3b
 8001630:	78ba      	ldrb	r2, [r7, #2]
 8001632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	212c      	movs	r1, #44	; 0x2c
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	333f      	adds	r3, #63	; 0x3f
 8001642:	787a      	ldrb	r2, [r7, #1]
 8001644:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001646:	7c3b      	ldrb	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d112      	bne.n	8001672 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	212c      	movs	r1, #44	; 0x2c
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	4413      	add	r3, r2
 8001658:	3342      	adds	r3, #66	; 0x42
 800165a:	2203      	movs	r2, #3
 800165c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	212c      	movs	r1, #44	; 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	333d      	adds	r3, #61	; 0x3d
 800166c:	7f3a      	ldrb	r2, [r7, #28]
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e008      	b.n	8001684 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	212c      	movs	r1, #44	; 0x2c
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	3342      	adds	r3, #66	; 0x42
 8001680:	2202      	movs	r2, #2
 8001682:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b03      	cmp	r3, #3
 8001688:	f200 80c6 	bhi.w	8001818 <HAL_HCD_HC_SubmitRequest+0x210>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016a5 	.word	0x080016a5
 8001698:	08001805 	.word	0x08001805
 800169c:	08001709 	.word	0x08001709
 80016a0:	08001787 	.word	0x08001787
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016a4:	7c3b      	ldrb	r3, [r7, #16]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	f040 80b8 	bne.w	800181c <HAL_HCD_HC_SubmitRequest+0x214>
 80016ac:	78bb      	ldrb	r3, [r7, #2]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 80b4 	bne.w	800181c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016b4:	8b3b      	ldrh	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	212c      	movs	r1, #44	; 0x2c
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	3355      	adds	r3, #85	; 0x55
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	212c      	movs	r1, #44	; 0x2c
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	3355      	adds	r3, #85	; 0x55
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	3342      	adds	r3, #66	; 0x42
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016f2:	e093      	b.n	800181c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	212c      	movs	r1, #44	; 0x2c
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	3342      	adds	r3, #66	; 0x42
 8001702:	2202      	movs	r2, #2
 8001704:	701a      	strb	r2, [r3, #0]
      break;
 8001706:	e089      	b.n	800181c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001708:	78bb      	ldrb	r3, [r7, #2]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d11d      	bne.n	800174a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	3355      	adds	r3, #85	; 0x55
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	212c      	movs	r1, #44	; 0x2c
 8001728:	fb01 f303 	mul.w	r3, r1, r3
 800172c:	4413      	add	r3, r2
 800172e:	3342      	adds	r3, #66	; 0x42
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001734:	e073      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	3342      	adds	r3, #66	; 0x42
 8001744:	2202      	movs	r2, #2
 8001746:	701a      	strb	r2, [r3, #0]
      break;
 8001748:	e069      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3354      	adds	r3, #84	; 0x54
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3342      	adds	r3, #66	; 0x42
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
      break;
 8001770:	e055      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	3342      	adds	r3, #66	; 0x42
 8001780:	2202      	movs	r2, #2
 8001782:	701a      	strb	r2, [r3, #0]
      break;
 8001784:	e04b      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d11d      	bne.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	212c      	movs	r1, #44	; 0x2c
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	3355      	adds	r3, #85	; 0x55
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3342      	adds	r3, #66	; 0x42
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017b2:	e034      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	3342      	adds	r3, #66	; 0x42
 80017c2:	2202      	movs	r2, #2
 80017c4:	701a      	strb	r2, [r3, #0]
      break;
 80017c6:	e02a      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3354      	adds	r3, #84	; 0x54
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d109      	bne.n	80017f0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e016      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	212c      	movs	r1, #44	; 0x2c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3342      	adds	r3, #66	; 0x42
 80017fe:	2202      	movs	r2, #2
 8001800:	701a      	strb	r2, [r3, #0]
      break;
 8001802:	e00c      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3342      	adds	r3, #66	; 0x42
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e002      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001818:	bf00      	nop
 800181a:	e000      	b.n	800181e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800181c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3344      	adds	r3, #68	; 0x44
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	8b3a      	ldrh	r2, [r7, #24]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	202c      	movs	r0, #44	; 0x2c
 8001838:	fb00 f303 	mul.w	r3, r0, r3
 800183c:	440b      	add	r3, r1
 800183e:	334c      	adds	r3, #76	; 0x4c
 8001840:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3360      	adds	r3, #96	; 0x60
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	3350      	adds	r3, #80	; 0x50
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	212c      	movs	r1, #44	; 0x2c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3339      	adds	r3, #57	; 0x39
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3361      	adds	r3, #97	; 0x61
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	222c      	movs	r2, #44	; 0x2c
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	3338      	adds	r3, #56	; 0x38
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	18d1      	adds	r1, r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	f003 fb9e 	bl	8004fe4 <USB_HC_StartXfer>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop

080018b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 f8c1 	bl	8004a52 <USB_GetMode>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	f040 80f6 	bne.w	8001ac4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 f8a5 	bl	8004a2c <USB_ReadInterrupts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80ec 	beq.w	8001ac2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f89c 	bl	8004a2c <USB_ReadInterrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018fe:	d104      	bne.n	800190a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001908:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f003 f88c 	bl	8004a2c <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800191e:	d104      	bne.n	800192a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001928:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f87c 	bl	8004a2c <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800193a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800193e:	d104      	bne.n	800194a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001948:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 f86c 	bl	8004a2c <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b02      	cmp	r3, #2
 800195c:	d103      	bne.n	8001966 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2202      	movs	r2, #2
 8001964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f85e 	bl	8004a2c <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800197a:	d11c      	bne.n	80019b6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001984:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001996:	2110      	movs	r1, #16
 8001998:	6938      	ldr	r0, [r7, #16]
 800199a:	f002 ff6d 	bl	8004878 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800199e:	6938      	ldr	r0, [r7, #16]
 80019a0:	f002 ff8e 	bl	80048c0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 f946 	bl	8004c3c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f005 fe19 	bl	80075e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f836 	bl	8004a2c <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ca:	d102      	bne.n	80019d2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f001 fa03 	bl	8002dd8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 f828 	bl	8004a2c <USB_ReadInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d106      	bne.n	80019f4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f005 fde2 	bl	80075b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2208      	movs	r2, #8
 80019f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 f817 	bl	8004a2c <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b10      	cmp	r3, #16
 8001a06:	d101      	bne.n	8001a0c <HAL_HCD_IRQHandler+0x158>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_HCD_IRQHandler+0x15a>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d012      	beq.n	8001a38 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0210 	bic.w	r2, r2, #16
 8001a20:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f001 f906 	bl	8002c34 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0210 	orr.w	r2, r2, #16
 8001a36:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 fff5 	bl	8004a2c <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a4c:	d13a      	bne.n	8001ac4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fc08 	bl	8005268 <USB_HC_ReadInterrupt>
 8001a58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e025      	b.n	8001aac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d018      	beq.n	8001aa6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a8a:	d106      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8ab 	bl	8001bee <HCD_HC_IN_IRQHandler>
 8001a98:	e005      	b.n	8001aa6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fcc6 	bl	8002432 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d3d4      	bcc.n	8001a60 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	e000      	b.n	8001ac4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001ac2:	bf00      	nop
    }
  }
}
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_HCD_Start+0x16>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e013      	b.n	8001b08 <HAL_HCD_Start+0x3e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 f908 	bl	8004d04 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fe4f 	bl	800479c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_HCD_Stop+0x16>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e00d      	b.n	8001b42 <HAL_HCD_Stop+0x32>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fd02 	bl	800553c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 f8aa 	bl	8004cb0 <USB_ResetPort>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3360      	adds	r3, #96	; 0x60
 8001b80:	781b      	ldrb	r3, [r3, #0]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3350      	adds	r3, #80	; 0x50
 8001ba8:	681b      	ldr	r3, [r3, #0]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 f8ee 	bl	8004da4 <USB_GetCurrentFrame>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 f8c9 	bl	8004d76 <USB_GetHostSpeed>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d119      	bne.n	8001c52 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	0151      	lsls	r1, r2, #5
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	440a      	add	r2, r1
 8001c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	60d3      	str	r3, [r2, #12]
 8001c50:	e101      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c68:	d12b      	bne.n	8001cc2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c76:	461a      	mov	r2, r3
 8001c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	3361      	adds	r3, #97	; 0x61
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	0151      	lsls	r1, r2, #5
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	440a      	add	r2, r1
 8001ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fae5 	bl	800528a <USB_HC_Halt>
 8001cc0:	e0c9      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b20      	cmp	r3, #32
 8001cd6:	d109      	bne.n	8001cec <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	6093      	str	r3, [r2, #8]
 8001cea:	e0b4      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d133      	bne.n	8001d6a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	0151      	lsls	r1, r2, #5
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	440a      	add	r2, r1
 8001d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3361      	adds	r3, #97	; 0x61
 8001d30:	2205      	movs	r2, #5
 8001d32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	461a      	mov	r2, r3
 8001d42:	2310      	movs	r3, #16
 8001d44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	461a      	mov	r2, r3
 8001d54:	2308      	movs	r3, #8
 8001d56:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fa91 	bl	800528a <USB_HC_Halt>
 8001d68:	e075      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d80:	d134      	bne.n	8001dec <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	0151      	lsls	r1, r2, #5
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	440a      	add	r2, r1
 8001d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3361      	adds	r3, #97	; 0x61
 8001db0:	2208      	movs	r2, #8
 8001db2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fa50 	bl	800528a <USB_HC_Halt>
 8001dea:	e034      	b.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d129      	bne.n	8001e56 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	0151      	lsls	r1, r2, #5
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	440a      	add	r2, r1
 8001e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3361      	adds	r3, #97	; 0x61
 8001e30:	2206      	movs	r2, #6
 8001e32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fa23 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6c:	d122      	bne.n	8001eb4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	0151      	lsls	r1, r2, #5
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	440a      	add	r2, r1
 8001e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 f9f6 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001eb2:	e2ba      	b.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	f040 811b 	bne.w	8002102 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d019      	beq.n	8001f08 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3348      	adds	r3, #72	; 0x48
 8001ee2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	0159      	lsls	r1, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	440b      	add	r3, r1
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ef6:	1ad2      	subs	r2, r2, r3
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	202c      	movs	r0, #44	; 0x2c
 8001efe:	fb00 f303 	mul.w	r3, r0, r3
 8001f02:	440b      	add	r3, r1
 8001f04:	3350      	adds	r3, #80	; 0x50
 8001f06:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3361      	adds	r3, #97	; 0x61
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	212c      	movs	r1, #44	; 0x2c
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	335c      	adds	r3, #92	; 0x5c
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333f      	adds	r3, #63	; 0x3f
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	333f      	adds	r3, #63	; 0x3f
 8001f60:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d121      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 f97a 	bl	800528a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	6093      	str	r3, [r2, #8]
 8001fa8:	e066      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	333f      	adds	r3, #63	; 0x3f
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d127      	bne.n	800200e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	0151      	lsls	r1, r2, #5
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	440a      	add	r2, r1
 8001fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fdc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3360      	adds	r3, #96	; 0x60
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	b2d9      	uxtb	r1, r3
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	202c      	movs	r0, #44	; 0x2c
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3360      	adds	r3, #96	; 0x60
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f005 fafc 	bl	8007604 <HAL_HCD_HC_NotifyURBChange_Callback>
 800200c:	e034      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	212c      	movs	r1, #44	; 0x2c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	333f      	adds	r3, #63	; 0x3f
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d12a      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3360      	adds	r3, #96	; 0x60
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3354      	adds	r3, #84	; 0x54
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2d8      	uxtb	r0, r3
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3354      	adds	r3, #84	; 0x54
 8002058:	4602      	mov	r2, r0
 800205a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	b2d9      	uxtb	r1, r3
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	202c      	movs	r0, #44	; 0x2c
 8002066:	fb00 f303 	mul.w	r3, r0, r3
 800206a:	4413      	add	r3, r2
 800206c:	3360      	adds	r3, #96	; 0x60
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f005 fac6 	bl	8007604 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d12b      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3348      	adds	r3, #72	; 0x48
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	202c      	movs	r0, #44	; 0x2c
 8002096:	fb00 f202 	mul.w	r2, r0, r2
 800209a:	440a      	add	r2, r1
 800209c:	3240      	adds	r2, #64	; 0x40
 800209e:	8812      	ldrh	r2, [r2, #0]
 80020a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 81be 	beq.w	800242a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3354      	adds	r3, #84	; 0x54
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f083 0301 	eor.w	r3, r3, #1
 80020c2:	b2d8      	uxtb	r0, r3
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3354      	adds	r3, #84	; 0x54
 80020d2:	4602      	mov	r2, r0
 80020d4:	701a      	strb	r2, [r3, #0]
}
 80020d6:	e1a8      	b.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3354      	adds	r3, #84	; 0x54
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	f083 0301 	eor.w	r3, r3, #1
 80020ec:	b2d8      	uxtb	r0, r3
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3354      	adds	r3, #84	; 0x54
 80020fc:	4602      	mov	r2, r0
 80020fe:	701a      	strb	r2, [r3, #0]
}
 8002100:	e193      	b.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b02      	cmp	r3, #2
 8002116:	f040 8106 	bne.w	8002326 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	0151      	lsls	r1, r2, #5
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	440a      	add	r2, r1
 8002130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002134:	f023 0302 	bic.w	r3, r3, #2
 8002138:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3361      	adds	r3, #97	; 0x61
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d109      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3360      	adds	r3, #96	; 0x60
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e0c9      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3361      	adds	r3, #97	; 0x61
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d109      	bne.n	800218a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3360      	adds	r3, #96	; 0x60
 8002184:	2205      	movs	r2, #5
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e0b5      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3361      	adds	r3, #97	; 0x61
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b06      	cmp	r3, #6
 800219c:	d009      	beq.n	80021b2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3361      	adds	r3, #97	; 0x61
 80021ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d150      	bne.n	8002254 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	335c      	adds	r3, #92	; 0x5c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	202c      	movs	r0, #44	; 0x2c
 80021ca:	fb00 f303 	mul.w	r3, r0, r3
 80021ce:	440b      	add	r3, r1
 80021d0:	335c      	adds	r3, #92	; 0x5c
 80021d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	335c      	adds	r3, #92	; 0x5c
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d912      	bls.n	800220e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	335c      	adds	r3, #92	; 0x5c
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3360      	adds	r3, #96	; 0x60
 8002208:	2204      	movs	r2, #4
 800220a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800220c:	e073      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	3360      	adds	r3, #96	; 0x60
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002236:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800223e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002252:	e050      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3361      	adds	r3, #97	; 0x61
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d122      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	3360      	adds	r3, #96	; 0x60
 8002276:	2202      	movs	r2, #2
 8002278:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002290:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002298:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e023      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3361      	adds	r3, #97	; 0x61
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b07      	cmp	r3, #7
 80022c0:	d119      	bne.n	80022f6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	335c      	adds	r3, #92	; 0x5c
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	202c      	movs	r0, #44	; 0x2c
 80022da:	fb00 f303 	mul.w	r3, r0, r3
 80022de:	440b      	add	r3, r1
 80022e0:	335c      	adds	r3, #92	; 0x5c
 80022e2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3360      	adds	r3, #96	; 0x60
 80022f2:	2204      	movs	r2, #4
 80022f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2302      	movs	r3, #2
 8002306:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	b2d9      	uxtb	r1, r3
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	202c      	movs	r0, #44	; 0x2c
 8002312:	fb00 f303 	mul.w	r3, r0, r3
 8002316:	4413      	add	r3, r2
 8002318:	3360      	adds	r3, #96	; 0x60
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f005 f970 	bl	8007604 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002324:	e081      	b.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b10      	cmp	r3, #16
 800233a:	d176      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	333f      	adds	r3, #63	; 0x3f
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d121      	bne.n	8002394 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	335c      	adds	r3, #92	; 0x5c
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	440a      	add	r2, r1
 8002378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f002 ff7c 	bl	800528a <USB_HC_Halt>
 8002392:	e041      	b.n	8002418 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	333f      	adds	r3, #63	; 0x3f
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	333f      	adds	r3, #63	; 0x3f
 80023b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d12d      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	335c      	adds	r3, #92	; 0x5c
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d120      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3361      	adds	r3, #97	; 0x61
 80023e4:	2203      	movs	r2, #3
 80023e6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	0151      	lsls	r1, r2, #5
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	440a      	add	r2, r1
 80023fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f002 ff39 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	2310      	movs	r3, #16
 8002428:	6093      	str	r3, [r2, #8]
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b088      	sub	sp, #32
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b04      	cmp	r3, #4
 8002460:	d119      	bne.n	8002496 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	461a      	mov	r2, r3
 8002470:	2304      	movs	r3, #4
 8002472:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	0151      	lsls	r1, r2, #5
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	440a      	add	r2, r1
 800248a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002494:	e3ca      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d13e      	bne.n	800252a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2320      	movs	r3, #32
 80024bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	333d      	adds	r3, #61	; 0x3d
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 83ac 	bne.w	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	333d      	adds	r3, #61	; 0x3d
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3360      	adds	r3, #96	; 0x60
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	0151      	lsls	r1, r2, #5
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	440a      	add	r2, r1
 800250e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f002 feb1 	bl	800528a <USB_HC_Halt>
}
 8002528:	e380      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002540:	d122      	bne.n	8002588 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	0151      	lsls	r1, r2, #5
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	440a      	add	r2, r1
 8002558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f002 fe8c 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	461a      	mov	r2, r3
 8002580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002584:	6093      	str	r3, [r2, #8]
}
 8002586:	e351      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d150      	bne.n	8002640 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	335c      	adds	r3, #92	; 0x5c
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d111      	bne.n	80025ea <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	333d      	adds	r3, #61	; 0x3d
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	2340      	movs	r3, #64	; 0x40
 80025e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	0151      	lsls	r1, r2, #5
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	440a      	add	r2, r1
 8002600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f002 fe38 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	461a      	mov	r2, r3
 8002628:	2301      	movs	r3, #1
 800262a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
}
 800263e:	e2f5      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d13c      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3361      	adds	r3, #97	; 0x61
 8002664:	2204      	movs	r2, #4
 8002666:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	333d      	adds	r3, #61	; 0x3d
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 fde7 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	2340      	movs	r3, #64	; 0x40
 80026cc:	6093      	str	r3, [r2, #8]
}
 80026ce:	e2ad      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d12a      	bne.n	800273c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	461a      	mov	r2, r3
 80026f4:	2308      	movs	r3, #8
 80026f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	0151      	lsls	r1, r2, #5
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	440a      	add	r2, r1
 800270e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fdb1 	bl	800528a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3361      	adds	r3, #97	; 0x61
 8002736:	2205      	movs	r2, #5
 8002738:	701a      	strb	r2, [r3, #0]
}
 800273a:	e277      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b10      	cmp	r3, #16
 8002750:	d150      	bne.n	80027f4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	335c      	adds	r3, #92	; 0x5c
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3361      	adds	r3, #97	; 0x61
 8002772:	2203      	movs	r2, #3
 8002774:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	333d      	adds	r3, #61	; 0x3d
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d112      	bne.n	80027b0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	333c      	adds	r3, #60	; 0x3c
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	333d      	adds	r3, #61	; 0x3d
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	0151      	lsls	r1, r2, #5
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	440a      	add	r2, r1
 80027c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fd55 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	461a      	mov	r2, r3
 80027ee:	2310      	movs	r3, #16
 80027f0:	6093      	str	r3, [r2, #8]
}
 80027f2:	e21b      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b80      	cmp	r3, #128	; 0x80
 8002808:	d174      	bne.n	80028f4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d121      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3361      	adds	r3, #97	; 0x61
 8002820:	2206      	movs	r2, #6
 8002822:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	0151      	lsls	r1, r2, #5
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	440a      	add	r2, r1
 800283a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fd1b 	bl	800528a <USB_HC_Halt>
 8002854:	e044      	b.n	80028e0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	335c      	adds	r3, #92	; 0x5c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	202c      	movs	r0, #44	; 0x2c
 800286e:	fb00 f303 	mul.w	r3, r0, r3
 8002872:	440b      	add	r3, r1
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	335c      	adds	r3, #92	; 0x5c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d920      	bls.n	80028ce <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	335c      	adds	r3, #92	; 0x5c
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3360      	adds	r3, #96	; 0x60
 80028ac:	2204      	movs	r2, #4
 80028ae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	b2d9      	uxtb	r1, r3
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	202c      	movs	r0, #44	; 0x2c
 80028ba:	fb00 f303 	mul.w	r3, r0, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3360      	adds	r3, #96	; 0x60
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f004 fe9c 	bl	8007604 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028cc:	e008      	b.n	80028e0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3360      	adds	r3, #96	; 0x60
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	461a      	mov	r2, r3
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	6093      	str	r3, [r2, #8]
}
 80028f2:	e19b      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d134      	bne.n	8002976 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	0151      	lsls	r1, r2, #5
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	440a      	add	r2, r1
 8002922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fca7 	bl	800528a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	2310      	movs	r3, #16
 800294c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	461a      	mov	r2, r3
 800295c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002960:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3361      	adds	r3, #97	; 0x61
 8002970:	2208      	movs	r2, #8
 8002972:	701a      	strb	r2, [r3, #0]
}
 8002974:	e15a      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	f040 814f 	bne.w	8002c2c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	0151      	lsls	r1, r2, #5
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	440a      	add	r2, r1
 80029a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a8:	f023 0302 	bic.w	r3, r3, #2
 80029ac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3361      	adds	r3, #97	; 0x61
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d17d      	bne.n	8002abe <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3360      	adds	r3, #96	; 0x60
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	333f      	adds	r3, #63	; 0x3f
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d00a      	beq.n	80029fe <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	333f      	adds	r3, #63	; 0x3f
 80029f6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	f040 8100 	bne.w	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d113      	bne.n	8002a2e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3355      	adds	r3, #85	; 0x55
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	f083 0301 	eor.w	r3, r3, #1
 8002a1a:	b2d8      	uxtb	r0, r3
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3355      	adds	r3, #85	; 0x55
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	f040 80e3 	bne.w	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	334c      	adds	r3, #76	; 0x4c
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80d8 	beq.w	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	334c      	adds	r3, #76	; 0x4c
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	202c      	movs	r0, #44	; 0x2c
 8002a64:	fb00 f202 	mul.w	r2, r0, r2
 8002a68:	440a      	add	r2, r1
 8002a6a:	3240      	adds	r2, #64	; 0x40
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b01      	subs	r3, #1
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	202c      	movs	r0, #44	; 0x2c
 8002a78:	fb00 f202 	mul.w	r2, r0, r2
 8002a7c:	440a      	add	r2, r1
 8002a7e:	3240      	adds	r2, #64	; 0x40
 8002a80:	8812      	ldrh	r2, [r2, #0]
 8002a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80b5 	beq.w	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3355      	adds	r3, #85	; 0x55
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f083 0301 	eor.w	r3, r3, #1
 8002aa8:	b2d8      	uxtb	r0, r3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3355      	adds	r3, #85	; 0x55
 8002ab8:	4602      	mov	r2, r0
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e09f      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3361      	adds	r3, #97	; 0x61
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d109      	bne.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3360      	adds	r3, #96	; 0x60
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e08b      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3361      	adds	r3, #97	; 0x61
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d109      	bne.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3360      	adds	r3, #96	; 0x60
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e077      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3361      	adds	r3, #97	; 0x61
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d109      	bne.n	8002b36 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3360      	adds	r3, #96	; 0x60
 8002b30:	2205      	movs	r2, #5
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e063      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3361      	adds	r3, #97	; 0x61
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d009      	beq.n	8002b5e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3361      	adds	r3, #97	; 0x61
 8002b58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d14f      	bne.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	335c      	adds	r3, #92	; 0x5c
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	202c      	movs	r0, #44	; 0x2c
 8002b76:	fb00 f303 	mul.w	r3, r0, r3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	335c      	adds	r3, #92	; 0x5c
 8002b7e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	335c      	adds	r3, #92	; 0x5c
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d912      	bls.n	8002bba <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	335c      	adds	r3, #92	; 0x5c
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3360      	adds	r3, #96	; 0x60
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e021      	b.n	8002bfe <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	2202      	movs	r2, #2
 8002bca:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002be2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bea:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	b2d9      	uxtb	r1, r3
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	202c      	movs	r0, #44	; 0x2c
 8002c1a:	fb00 f303 	mul.w	r3, r0, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f004 fcec 	bl	8007604 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c2c:	bf00      	nop
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	0c5b      	lsrs	r3, r3, #17
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c68:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d004      	beq.n	8002c7a <HCD_RXQLVL_IRQHandler+0x46>
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	f000 80a9 	beq.w	8002dca <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c78:	e0aa      	b.n	8002dd0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a6 	beq.w	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3344      	adds	r3, #68	; 0x44
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 809b 	beq.w	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3350      	adds	r3, #80	; 0x50
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	441a      	add	r2, r3
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	202c      	movs	r0, #44	; 0x2c
 8002cb2:	fb00 f303 	mul.w	r3, r0, r3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	334c      	adds	r3, #76	; 0x4c
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d87a      	bhi.n	8002db6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3344      	adds	r3, #68	; 0x44
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f001 fe4f 	bl	800497c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3344      	adds	r3, #68	; 0x44
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	441a      	add	r2, r3
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	202c      	movs	r0, #44	; 0x2c
 8002cf8:	fb00 f303 	mul.w	r3, r0, r3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3344      	adds	r3, #68	; 0x44
 8002d00:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3350      	adds	r3, #80	; 0x50
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	441a      	add	r2, r3
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	202c      	movs	r0, #44	; 0x2c
 8002d1c:	fb00 f303 	mul.w	r3, r0, r3
 8002d20:	440b      	add	r3, r1
 8002d22:	3350      	adds	r3, #80	; 0x50
 8002d24:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	0cdb      	lsrs	r3, r3, #19
 8002d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3340      	adds	r3, #64	; 0x40
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d13c      	bne.n	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d039      	beq.n	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d70:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d78:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	461a      	mov	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3354      	adds	r3, #84	; 0x54
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2d8      	uxtb	r0, r3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3354      	adds	r3, #84	; 0x54
 8002db0:	4602      	mov	r2, r0
 8002db2:	701a      	strb	r2, [r3, #0]
      break;
 8002db4:	e00b      	b.n	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3360      	adds	r3, #96	; 0x60
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	701a      	strb	r2, [r3, #0]
      break;
 8002dc8:	e001      	b.n	8002dce <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002dce:	bf00      	nop
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e04:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d10b      	bne.n	8002e28 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f004 fbd6 	bl	80075cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d132      	bne.n	8002e98 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f043 0308 	orr.w	r3, r3, #8
 8002e38:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d126      	bne.n	8002e92 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d113      	bne.n	8002e74 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e56:	d106      	bne.n	8002e66 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 feec 	bl	8004c3c <USB_InitFSLSPClkSel>
 8002e64:	e011      	b.n	8002e8a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 fee5 	bl	8004c3c <USB_InitFSLSPClkSel>
 8002e72:	e00a      	b.n	8002e8a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e82:	461a      	mov	r2, r3
 8002e84:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e88:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f004 fbc8 	bl	8007620 <HAL_HCD_PortEnabled_Callback>
 8002e90:	e002      	b.n	8002e98 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f004 fbd2 	bl	800763c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d103      	bne.n	8002eaa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f043 0320 	orr.w	r3, r3, #32
 8002ea8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6013      	str	r3, [r2, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e12b      	b.n	800312a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd fd4c 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f24:	f001 f9fc 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 8002f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a81      	ldr	r2, [pc, #516]	; (8003134 <HAL_I2C_Init+0x274>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d807      	bhi.n	8002f44 <HAL_I2C_Init+0x84>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a80      	ldr	r2, [pc, #512]	; (8003138 <HAL_I2C_Init+0x278>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	bf94      	ite	ls
 8002f3c:	2301      	movls	r3, #1
 8002f3e:	2300      	movhi	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e006      	b.n	8002f52 <HAL_I2C_Init+0x92>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a7d      	ldr	r2, [pc, #500]	; (800313c <HAL_I2C_Init+0x27c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	bf94      	ite	ls
 8002f4c:	2301      	movls	r3, #1
 8002f4e:	2300      	movhi	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0e7      	b.n	800312a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a78      	ldr	r2, [pc, #480]	; (8003140 <HAL_I2C_Init+0x280>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	0c9b      	lsrs	r3, r3, #18
 8002f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a6a      	ldr	r2, [pc, #424]	; (8003134 <HAL_I2C_Init+0x274>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d802      	bhi.n	8002f94 <HAL_I2C_Init+0xd4>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3301      	adds	r3, #1
 8002f92:	e009      	b.n	8002fa8 <HAL_I2C_Init+0xe8>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	4a69      	ldr	r2, [pc, #420]	; (8003144 <HAL_I2C_Init+0x284>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	495c      	ldr	r1, [pc, #368]	; (8003134 <HAL_I2C_Init+0x274>)
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	d819      	bhi.n	8002ffc <HAL_I2C_Init+0x13c>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e59      	subs	r1, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd6:	1c59      	adds	r1, r3, #1
 8002fd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fdc:	400b      	ands	r3, r1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_I2C_Init+0x138>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1e59      	subs	r1, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	e051      	b.n	800309c <HAL_I2C_Init+0x1dc>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	e04f      	b.n	800309c <HAL_I2C_Init+0x1dc>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d111      	bne.n	8003028 <HAL_I2C_Init+0x168>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e58      	subs	r0, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e012      	b.n	800304e <HAL_I2C_Init+0x18e>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Init+0x196>
 8003052:	2301      	movs	r3, #1
 8003054:	e022      	b.n	800309c <HAL_I2C_Init+0x1dc>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10e      	bne.n	800307c <HAL_I2C_Init+0x1bc>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e58      	subs	r0, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	440b      	add	r3, r1
 800306c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003070:	3301      	adds	r3, #1
 8003072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307a:	e00f      	b.n	800309c <HAL_I2C_Init+0x1dc>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e58      	subs	r0, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	0099      	lsls	r1, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	6809      	ldr	r1, [r1, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6911      	ldr	r1, [r2, #16]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68d2      	ldr	r2, [r2, #12]
 80030d6:	4311      	orrs	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	000186a0 	.word	0x000186a0
 8003138:	001e847f 	.word	0x001e847f
 800313c:	003d08ff 	.word	0x003d08ff
 8003140:	431bde83 	.word	0x431bde83
 8003144:	10624dd3 	.word	0x10624dd3

08003148 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e128      	b.n	80033ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a90      	ldr	r2, [pc, #576]	; (80033b4 <HAL_I2S_Init+0x26c>)
 8003172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd fc4d 	bl	8000a14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003190:	f023 030f 	bic.w	r3, r3, #15
 8003194:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2202      	movs	r2, #2
 800319c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d060      	beq.n	8003268 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031ae:	2310      	movs	r3, #16
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e001      	b.n	80031b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d802      	bhi.n	80031c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031c6:	2001      	movs	r0, #1
 80031c8:	f001 f9a0 	bl	800450c <HAL_RCCEx_GetPeriphCLKFreq>
 80031cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d6:	d125      	bne.n	8003224 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d010      	beq.n	8003202 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	3305      	adds	r3, #5
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	e01f      	b.n	8003242 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	fbb2 f2f3 	udiv	r2, r2, r3
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	3305      	adds	r3, #5
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	e00e      	b.n	8003242 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	fbb2 f2f3 	udiv	r2, r2, r3
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	461a      	mov	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	3305      	adds	r3, #5
 8003240:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4a5c      	ldr	r2, [pc, #368]	; (80033b8 <HAL_I2S_Init+0x270>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	08db      	lsrs	r3, r3, #3
 800324c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e003      	b.n	8003270 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003268:	2302      	movs	r3, #2
 800326a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d902      	bls.n	800327c <HAL_I2S_Init+0x134>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2bff      	cmp	r3, #255	; 0xff
 800327a:	d907      	bls.n	800328c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f043 0210 	orr.w	r2, r3, #16
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e08f      	b.n	80033ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	ea42 0103 	orr.w	r1, r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	430a      	orrs	r2, r1
 800329e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032aa:	f023 030f 	bic.w	r3, r3, #15
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6851      	ldr	r1, [r2, #4]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6892      	ldr	r2, [r2, #8]
 80032b6:	4311      	orrs	r1, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68d2      	ldr	r2, [r2, #12]
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6992      	ldr	r2, [r2, #24]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d161      	bne.n	800339c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a38      	ldr	r2, [pc, #224]	; (80033bc <HAL_I2S_Init+0x274>)
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a37      	ldr	r2, [pc, #220]	; (80033c0 <HAL_I2S_Init+0x278>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_I2S_Init+0x1a4>
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_I2S_Init+0x27c>)
 80032ea:	e001      	b.n	80032f0 <HAL_I2S_Init+0x1a8>
 80032ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4932      	ldr	r1, [pc, #200]	; (80033c0 <HAL_I2S_Init+0x278>)
 80032f8:	428a      	cmp	r2, r1
 80032fa:	d101      	bne.n	8003300 <HAL_I2S_Init+0x1b8>
 80032fc:	4a31      	ldr	r2, [pc, #196]	; (80033c4 <HAL_I2S_Init+0x27c>)
 80032fe:	e001      	b.n	8003304 <HAL_I2S_Init+0x1bc>
 8003300:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003304:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003308:	f023 030f 	bic.w	r3, r3, #15
 800330c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_I2S_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_I2S_Init+0x1d4>
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <HAL_I2S_Init+0x27c>)
 800331a:	e001      	b.n	8003320 <HAL_I2S_Init+0x1d8>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003320:	2202      	movs	r2, #2
 8003322:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <HAL_I2S_Init+0x278>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_I2S_Init+0x1ea>
 800332e:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_I2S_Init+0x27c>)
 8003330:	e001      	b.n	8003336 <HAL_I2S_Init+0x1ee>
 8003332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003342:	d003      	beq.n	800334c <HAL_I2S_Init+0x204>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800334c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e001      	b.n	8003358 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003362:	4313      	orrs	r3, r2
 8003364:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800336c:	4313      	orrs	r3, r2
 800336e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003376:	4313      	orrs	r3, r2
 8003378:	b29a      	uxth	r2, r3
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	4313      	orrs	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003384:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_I2S_Init+0x278>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_I2S_Init+0x24c>
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_I2S_Init+0x27c>)
 8003392:	e001      	b.n	8003398 <HAL_I2S_Init+0x250>
 8003394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003398:	897a      	ldrh	r2, [r7, #10]
 800339a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	080034bf 	.word	0x080034bf
 80033b8:	cccccccd 	.word	0xcccccccd
 80033bc:	080035d5 	.word	0x080035d5
 80033c0:	40003800 	.word	0x40003800
 80033c4:	40003400 	.word	0x40003400

080033c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	881a      	ldrh	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	1c9a      	adds	r2, r3, #2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003448:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffb8 	bl	80033c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	b292      	uxth	r2, r2
 8003474:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	1c9a      	adds	r2, r3, #2
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10e      	bne.n	80034b6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff93 	bl	80033dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d13a      	bne.n	8003550 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d109      	bne.n	80034f8 <I2S_IRQHandler+0x3a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d102      	bne.n	80034f8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ffb4 	bl	8003460 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d126      	bne.n	8003550 <I2S_IRQHandler+0x92>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b20      	cmp	r3, #32
 800350e:	d11f      	bne.n	8003550 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800351e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ff50 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d136      	bne.n	80035ca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d109      	bne.n	800357a <I2S_IRQHandler+0xbc>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d102      	bne.n	800357a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff45 	bl	8003404 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d122      	bne.n	80035ca <I2S_IRQHandler+0x10c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d11b      	bne.n	80035ca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff13 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4aa2      	ldr	r2, [pc, #648]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035ee:	4ba2      	ldr	r3, [pc, #648]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f0:	e001      	b.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a9b      	ldr	r2, [pc, #620]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800360c:	4b9a      	ldr	r3, [pc, #616]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800360e:	e001      	b.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003620:	d004      	beq.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8099 	bne.w	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f925 	bl	8003890 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d107      	bne.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9c8 	bl	80039f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d13a      	bne.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d035      	beq.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a7e      	ldr	r2, [pc, #504]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800367e:	4b7e      	ldr	r3, [pc, #504]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003680:	e001      	b.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4979      	ldr	r1, [pc, #484]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800368e:	428b      	cmp	r3, r1
 8003690:	d101      	bne.n	8003696 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003692:	4b79      	ldr	r3, [pc, #484]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003694:	e001      	b.n	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800369e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fe88 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	f040 80be 	bne.w	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80b8 	beq.w	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003706:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a59      	ldr	r2, [pc, #356]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003712:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003714:	e001      	b.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4954      	ldr	r1, [pc, #336]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003722:	428b      	cmp	r3, r1
 8003724:	d101      	bne.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003726:	4b54      	ldr	r3, [pc, #336]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003728:	e001      	b.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800372a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800372e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003732:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0204 	orr.w	r2, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fe4a 	bl	80033f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800375c:	e084      	b.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b02      	cmp	r3, #2
 8003766:	d107      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8be 	bl	80038f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8fd 	bl	800398c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	d12f      	bne.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02a      	beq.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037c0:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c2:	e001      	b.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4929      	ldr	r1, [pc, #164]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037d4:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037d6:	e001      	b.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f043 0202 	orr.w	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fdfa 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b08      	cmp	r3, #8
 8003804:	d131      	bne.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02c      	beq.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800381c:	e001      	b.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4912      	ldr	r1, [pc, #72]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800382a:	428b      	cmp	r3, r1
 800382c:	d101      	bne.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003830:	e001      	b.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003836:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800383a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f043 0204 	orr.w	r2, r3, #4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fdc5 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003866:	e000      	b.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003868:	bf00      	nop
}
 800386a:	bf00      	nop
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40003800 	.word	0x40003800
 8003878:	40003400 	.word	0x40003400

0800387c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c99      	adds	r1, r3, #2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6251      	str	r1, [r2, #36]	; 0x24
 80038a2:	881a      	ldrh	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d113      	bne.n	80038ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ffc9 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c99      	adds	r1, r3, #2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6251      	str	r1, [r2, #36]	; 0x24
 8003906:	8819      	ldrh	r1, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <I2SEx_TxISR_I2SExt+0x90>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <I2SEx_TxISR_I2SExt+0x22>
 8003912:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <I2SEx_TxISR_I2SExt+0x94>)
 8003914:	e001      	b.n	800391a <I2SEx_TxISR_I2SExt+0x26>
 8003916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391a:	460a      	mov	r2, r1
 800391c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d121      	bne.n	800397a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <I2SEx_TxISR_I2SExt+0x90>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <I2SEx_TxISR_I2SExt+0x50>
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <I2SEx_TxISR_I2SExt+0x94>)
 8003942:	e001      	b.n	8003948 <I2SEx_TxISR_I2SExt+0x54>
 8003944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	490d      	ldr	r1, [pc, #52]	; (8003984 <I2SEx_TxISR_I2SExt+0x90>)
 8003950:	428b      	cmp	r3, r1
 8003952:	d101      	bne.n	8003958 <I2SEx_TxISR_I2SExt+0x64>
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <I2SEx_TxISR_I2SExt+0x94>)
 8003956:	e001      	b.n	800395c <I2SEx_TxISR_I2SExt+0x68>
 8003958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003960:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff81 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40003800 	.word	0x40003800
 8003988:	40003400 	.word	0x40003400

0800398c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68d8      	ldr	r0, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	1c99      	adds	r1, r3, #2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039a4:	b282      	uxth	r2, r0
 80039a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ff4a 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <I2SEx_RxISR_I2SExt+0x90>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <I2SEx_RxISR_I2SExt+0x16>
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <I2SEx_RxISR_I2SExt+0x94>)
 8003a04:	e001      	b.n	8003a0a <I2SEx_RxISR_I2SExt+0x1a>
 8003a06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0a:	68d8      	ldr	r0, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	1c99      	adds	r1, r3, #2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a16:	b282      	uxth	r2, r0
 8003a18:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d121      	bne.n	8003a76 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <I2SEx_RxISR_I2SExt+0x90>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <I2SEx_RxISR_I2SExt+0x50>
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <I2SEx_RxISR_I2SExt+0x94>)
 8003a3e:	e001      	b.n	8003a44 <I2SEx_RxISR_I2SExt+0x54>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	490d      	ldr	r1, [pc, #52]	; (8003a80 <I2SEx_RxISR_I2SExt+0x90>)
 8003a4c:	428b      	cmp	r3, r1
 8003a4e:	d101      	bne.n	8003a54 <I2SEx_RxISR_I2SExt+0x64>
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <I2SEx_RxISR_I2SExt+0x94>)
 8003a52:	e001      	b.n	8003a58 <I2SEx_RxISR_I2SExt+0x68>
 8003a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a5c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d106      	bne.n	8003a76 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff03 	bl	800387c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40003800 	.word	0x40003800
 8003a84:	40003400 	.word	0x40003400

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e264      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d075      	beq.n	8003b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa6:	4ba3      	ldr	r3, [pc, #652]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d00c      	beq.n	8003acc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab2:	4ba0      	ldr	r3, [pc, #640]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d112      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abe:	4b9d      	ldr	r3, [pc, #628]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	4b99      	ldr	r3, [pc, #612]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05b      	beq.n	8003b90 <HAL_RCC_OscConfig+0x108>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d157      	bne.n	8003b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e23f      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0x74>
 8003aee:	4b91      	ldr	r3, [pc, #580]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a90      	ldr	r2, [pc, #576]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x98>
 8003b06:	4b8b      	ldr	r3, [pc, #556]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a8a      	ldr	r2, [pc, #552]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b88      	ldr	r3, [pc, #544]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a87      	ldr	r2, [pc, #540]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003b20:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a83      	ldr	r2, [pc, #524]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b81      	ldr	r3, [pc, #516]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a80      	ldr	r2, [pc, #512]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd f93c 	bl	8000dbc <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fd f938 	bl	8000dbc <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	; 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e204      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b76      	ldr	r3, [pc, #472]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xc0>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd f928 	bl	8000dbc <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fd f924 	bl	8000dbc <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1f0      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0xe8>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d063      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9e:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b62      	ldr	r3, [pc, #392]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	4b5c      	ldr	r3, [pc, #368]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1c4      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b56      	ldr	r3, [pc, #344]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4952      	ldr	r1, [pc, #328]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	e03a      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf8:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <HAL_RCC_OscConfig+0x2b0>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd f8dd 	bl	8000dbc <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fd f8d9 	bl	8000dbc <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1a5      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b43      	ldr	r3, [pc, #268]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4940      	ldr	r1, [pc, #256]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
 8003c38:	e015      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <HAL_RCC_OscConfig+0x2b0>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd f8bc 	bl	8000dbc <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fd f8b8 	bl	8000dbc <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e184      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d030      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7a:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <HAL_RCC_OscConfig+0x2b4>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd f89c 	bl	8000dbc <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fd f898 	bl	8000dbc <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e164      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x200>
 8003ca6:	e015      	b.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca8:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCC_OscConfig+0x2b4>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fd f885 	bl	8000dbc <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fd f881 	bl	8000dbc <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e14d      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a0 	beq.w	8003e22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	; 0x40
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_OscConfig+0x2b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d121      	bne.n	8003d62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_RCC_OscConfig+0x2b8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_RCC_OscConfig+0x2b8>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7fd f847 	bl	8000dbc <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	e011      	b.n	8003d56 <HAL_RCC_OscConfig+0x2ce>
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	42470000 	.word	0x42470000
 8003d3c:	42470e80 	.word	0x42470e80
 8003d40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d44:	f7fd f83a 	bl	8000dbc <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e106      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <HAL_RCC_OscConfig+0x4e4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d106      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
 8003d6a:	4b81      	ldr	r3, [pc, #516]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a80      	ldr	r2, [pc, #512]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
 8003d76:	e01c      	b.n	8003db2 <HAL_RCC_OscConfig+0x32a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x312>
 8003d80:	4b7b      	ldr	r3, [pc, #492]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a7a      	ldr	r2, [pc, #488]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8c:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a77      	ldr	r2, [pc, #476]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
 8003d98:	e00b      	b.n	8003db2 <HAL_RCC_OscConfig+0x32a>
 8003d9a:	4b75      	ldr	r3, [pc, #468]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4a74      	ldr	r2, [pc, #464]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	6713      	str	r3, [r2, #112]	; 0x70
 8003da6:	4b72      	ldr	r3, [pc, #456]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a71      	ldr	r2, [pc, #452]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d015      	beq.n	8003de6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fc ffff 	bl	8000dbc <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fc fffb 	bl	8000dbc <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e0c5      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd8:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ee      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x33a>
 8003de4:	e014      	b.n	8003e10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de6:	f7fc ffe9 	bl	8000dbc <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fc ffe5 	bl	8000dbc <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0af      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e04:	4b5a      	ldr	r3, [pc, #360]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ee      	bne.n	8003dee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b56      	ldr	r3, [pc, #344]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4a55      	ldr	r2, [pc, #340]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 809b 	beq.w	8003f62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d05c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d141      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e40:	4b4c      	ldr	r3, [pc, #304]	; (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e46:	f7fc ffb9 	bl	8000dbc <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7fc ffb5 	bl	8000dbc <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e081      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e60:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	3b01      	subs	r3, #1
 8003e86:	041b      	lsls	r3, r3, #16
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	4937      	ldr	r1, [pc, #220]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fc ff8e 	bl	8000dbc <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fc ff8a 	bl	8000dbc <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e056      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb6:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x41c>
 8003ec2:	e04e      	b.n	8003f62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fc ff77 	bl	8000dbc <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fc ff73 	bl	8000dbc <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e03f      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x44a>
 8003ef0:	e037      	b.n	8003f62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e032      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d028      	beq.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d121      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d11a      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f2e:	4013      	ands	r3, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	3b01      	subs	r3, #1
 8003f48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d001      	beq.n	8003f62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	40023800 	.word	0x40023800
 8003f74:	42470060 	.word	0x42470060

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cc      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90c      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d044      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e067      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4934      	ldr	r1, [pc, #208]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fc fea8 	bl	8000dbc <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fc fea4 	bl	8000dbc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d20c      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 f821 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc fe08 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	08007c70 	.word	0x08007c70
 800413c:	20000000 	.word	0x20000000
 8004140:	20000004 	.word	0x20000004

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	2300      	movs	r3, #0
 8004156:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415c:	4b67      	ldr	r3, [pc, #412]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d00d      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x40>
 8004168:	2b08      	cmp	r3, #8
 800416a:	f200 80bd 	bhi.w	80042e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x34>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x3a>
 8004176:	e0b7      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800417a:	60bb      	str	r3, [r7, #8]
       break;
 800417c:	e0b7      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417e:	4b61      	ldr	r3, [pc, #388]	; (8004304 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004180:	60bb      	str	r3, [r7, #8]
      break;
 8004182:	e0b4      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004184:	4b5d      	ldr	r3, [pc, #372]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800418c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418e:	4b5b      	ldr	r3, [pc, #364]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04d      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b58      	ldr	r3, [pc, #352]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	461a      	mov	r2, r3
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041aa:	f04f 0100 	mov.w	r1, #0
 80041ae:	ea02 0800 	and.w	r8, r2, r0
 80041b2:	ea03 0901 	and.w	r9, r3, r1
 80041b6:	4640      	mov	r0, r8
 80041b8:	4649      	mov	r1, r9
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	014b      	lsls	r3, r1, #5
 80041c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041c8:	0142      	lsls	r2, r0, #5
 80041ca:	4610      	mov	r0, r2
 80041cc:	4619      	mov	r1, r3
 80041ce:	ebb0 0008 	subs.w	r0, r0, r8
 80041d2:	eb61 0109 	sbc.w	r1, r1, r9
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	018b      	lsls	r3, r1, #6
 80041e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041e4:	0182      	lsls	r2, r0, #6
 80041e6:	1a12      	subs	r2, r2, r0
 80041e8:	eb63 0301 	sbc.w	r3, r3, r1
 80041ec:	f04f 0000 	mov.w	r0, #0
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	00d9      	lsls	r1, r3, #3
 80041f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041fa:	00d0      	lsls	r0, r2, #3
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	eb12 0208 	adds.w	r2, r2, r8
 8004204:	eb43 0309 	adc.w	r3, r3, r9
 8004208:	f04f 0000 	mov.w	r0, #0
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	0259      	lsls	r1, r3, #9
 8004212:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004216:	0250      	lsls	r0, r2, #9
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4610      	mov	r0, r2
 800421e:	4619      	mov	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	461a      	mov	r2, r3
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	f7fb ffce 	bl	80001c8 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4613      	mov	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e04a      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004236:	4b31      	ldr	r3, [pc, #196]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	461a      	mov	r2, r3
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004246:	f04f 0100 	mov.w	r1, #0
 800424a:	ea02 0400 	and.w	r4, r2, r0
 800424e:	ea03 0501 	and.w	r5, r3, r1
 8004252:	4620      	mov	r0, r4
 8004254:	4629      	mov	r1, r5
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	014b      	lsls	r3, r1, #5
 8004260:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004264:	0142      	lsls	r2, r0, #5
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	1b00      	subs	r0, r0, r4
 800426c:	eb61 0105 	sbc.w	r1, r1, r5
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	018b      	lsls	r3, r1, #6
 800427a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800427e:	0182      	lsls	r2, r0, #6
 8004280:	1a12      	subs	r2, r2, r0
 8004282:	eb63 0301 	sbc.w	r3, r3, r1
 8004286:	f04f 0000 	mov.w	r0, #0
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	00d9      	lsls	r1, r3, #3
 8004290:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004294:	00d0      	lsls	r0, r2, #3
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	1912      	adds	r2, r2, r4
 800429c:	eb45 0303 	adc.w	r3, r5, r3
 80042a0:	f04f 0000 	mov.w	r0, #0
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	0299      	lsls	r1, r3, #10
 80042aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042ae:	0290      	lsls	r0, r2, #10
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	f7fb ff82 	bl	80001c8 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4613      	mov	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	3301      	adds	r3, #1
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	60bb      	str	r3, [r7, #8]
      break;
 80042e6:	e002      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042ea:	60bb      	str	r3, [r7, #8]
      break;
 80042ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ee:	68bb      	ldr	r3, [r7, #8]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800
 8004300:	00f42400 	.word	0x00f42400
 8004304:	007a1200 	.word	0x007a1200

08004308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800430c:	4b03      	ldr	r3, [pc, #12]	; (800431c <HAL_RCC_GetHCLKFreq+0x14>)
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000000 	.word	0x20000000

08004320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004324:	f7ff fff0 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	0a9b      	lsrs	r3, r3, #10
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4903      	ldr	r1, [pc, #12]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40023800 	.word	0x40023800
 8004344:	08007c80 	.word	0x08007c80

08004348 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800436c:	2b00      	cmp	r3, #0
 800436e:	d035      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004370:	4b62      	ldr	r3, [pc, #392]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004376:	f7fc fd21 	bl	8000dbc <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800437e:	f7fc fd1d 	bl	8000dbc <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0b0      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004390:	4b5b      	ldr	r3, [pc, #364]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	019a      	lsls	r2, r3, #6
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	071b      	lsls	r3, r3, #28
 80043a8:	4955      	ldr	r1, [pc, #340]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043b0:	4b52      	ldr	r3, [pc, #328]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043b6:	f7fc fd01 	bl	8000dbc <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043be:	f7fc fcfd 	bl	8000dbc <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e090      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d0:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8083 	beq.w	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b44      	ldr	r3, [pc, #272]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a43      	ldr	r2, [pc, #268]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b41      	ldr	r3, [pc, #260]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004406:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3e      	ldr	r2, [pc, #248]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004410:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004412:	f7fc fcd3 	bl	8000dbc <HAL_GetTick>
 8004416:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004418:	e008      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800441a:	f7fc fccf 	bl	8000dbc <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e062      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800442c:	4b35      	ldr	r3, [pc, #212]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004438:	4b31      	ldr	r3, [pc, #196]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004440:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02f      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d028      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004456:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004460:	4b29      	ldr	r3, [pc, #164]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004466:	4b28      	ldr	r3, [pc, #160]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800446c:	4a24      	ldr	r2, [pc, #144]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004472:	4b23      	ldr	r3, [pc, #140]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d114      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800447e:	f7fc fc9d 	bl	8000dbc <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	e00a      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7fc fc99 	bl	8000dbc <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e02a      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ee      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b4:	d10d      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ca:	490d      	ldr	r1, [pc, #52]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]
 80044d0:	e005      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044dc:	6093      	str	r3, [r2, #8]
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ea:	4905      	ldr	r1, [pc, #20]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	42470068 	.word	0x42470068
 8004500:	40023800 	.word	0x40023800
 8004504:	40007000 	.word	0x40007000
 8004508:	42470e40 	.word	0x42470e40

0800450c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d13e      	bne.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800452a:	4b23      	ldr	r3, [pc, #140]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d12f      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004542:	617b      	str	r3, [r7, #20]
          break;
 8004544:	e02f      	b.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004552:	d108      	bne.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004554:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800455c:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	e007      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457c:	099b      	lsrs	r3, r3, #6
 800457e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800458c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004590:	0f1b      	lsrs	r3, r3, #28
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
          break;
 800459e:	e002      	b.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
          break;
 80045a4:	bf00      	nop
        }
      }
      break;
 80045a6:	bf00      	nop
    }
  }
  return frequency;
 80045a8:	697b      	ldr	r3, [r7, #20]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	00bb8000 	.word	0x00bb8000
 80045c0:	007a1200 	.word	0x007a1200
 80045c4:	00f42400 	.word	0x00f42400

080045c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07b      	b.n	80046d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ea:	d009      	beq.n	8004600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
 80045f2:	e005      	b.n	8004600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fa7a 	bl	8000b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	ea42 0103 	orr.w	r1, r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0104 	and.w	r1, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0210 	and.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046da:	b084      	sub	sp, #16
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	f107 001c 	add.w	r0, r7, #28
 80046e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d122      	bne.n	8004738 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800471a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f99f 	bl	8004a70 <USB_CoreReset>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e01a      	b.n	800476e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f993 	bl	8004a70 <USB_CoreReset>
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
 8004760:	e005      	b.n	800476e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	2b01      	cmp	r3, #1
 8004772:	d10b      	bne.n	800478c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f043 0206 	orr.w	r2, r3, #6
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004798:	b004      	add	sp, #16
 800479a:	4770      	bx	lr

0800479c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f043 0201 	orr.w	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d115      	bne.n	800482e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800480e:	2001      	movs	r0, #1
 8004810:	f7fc fae0 	bl	8000dd4 <HAL_Delay>
      ms++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f919 	bl	8004a52 <USB_GetMode>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d01e      	beq.n	8004864 <USB_SetCurrentMode+0x84>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b31      	cmp	r3, #49	; 0x31
 800482a:	d9f0      	bls.n	800480e <USB_SetCurrentMode+0x2e>
 800482c:	e01a      	b.n	8004864 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d115      	bne.n	8004860 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004840:	2001      	movs	r0, #1
 8004842:	f7fc fac7 	bl	8000dd4 <HAL_Delay>
      ms++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3301      	adds	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f900 	bl	8004a52 <USB_GetMode>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <USB_SetCurrentMode+0x84>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b31      	cmp	r3, #49	; 0x31
 800485c:	d9f0      	bls.n	8004840 <USB_SetCurrentMode+0x60>
 800485e:	e001      	b.n	8004864 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e005      	b.n	8004870 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b32      	cmp	r3, #50	; 0x32
 8004868:	d101      	bne.n	800486e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3301      	adds	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	4a08      	ldr	r2, [pc, #32]	; (80048bc <USB_FlushTxFifo+0x44>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e006      	b.n	80048b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d0f1      	beq.n	8004892 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	00030d40 	.word	0x00030d40

080048c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2210      	movs	r2, #16
 80048d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	4a08      	ldr	r2, [pc, #32]	; (80048fc <USB_FlushRxFifo+0x3c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e006      	b.n	80048f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d0f1      	beq.n	80048d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	00030d40 	.word	0x00030d40

08004900 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4611      	mov	r1, r2
 800490c:	461a      	mov	r2, r3
 800490e:	460b      	mov	r3, r1
 8004910:	71fb      	strb	r3, [r7, #7]
 8004912:	4613      	mov	r3, r2
 8004914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800491e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004922:	2b00      	cmp	r3, #0
 8004924:	d123      	bne.n	800496e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004926:	88bb      	ldrh	r3, [r7, #4]
 8004928:	3303      	adds	r3, #3
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e018      	b.n	8004966 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	031a      	lsls	r2, r3, #12
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004940:	461a      	mov	r2, r3
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3301      	adds	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3301      	adds	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3301      	adds	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3301      	adds	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	3301      	adds	r3, #1
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	429a      	cmp	r2, r3
 800496c:	d3e2      	bcc.n	8004934 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3724      	adds	r7, #36	; 0x24
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800497c:	b480      	push	{r7}
 800497e:	b08b      	sub	sp, #44	; 0x2c
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	b29b      	uxth	r3, r3
 8004998:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	e014      	b.n	80049d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	3301      	adds	r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	3301      	adds	r3, #1
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	3301      	adds	r3, #1
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	3301      	adds	r3, #1
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	3301      	adds	r3, #1
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	6a3a      	ldr	r2, [r7, #32]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d3e6      	bcc.n	80049a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049da:	8bfb      	ldrh	r3, [r7, #30]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01e      	beq.n	8004a1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ea:	461a      	mov	r2, r3
 80049ec:	f107 0310 	add.w	r3, r7, #16
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	701a      	strb	r2, [r3, #0]
      i++;
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	3301      	adds	r3, #1
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a12:	8bfb      	ldrh	r3, [r7, #30]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a18:	8bfb      	ldrh	r3, [r7, #30]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ea      	bne.n	80049f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	372c      	adds	r7, #44	; 0x2c
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4013      	ands	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <USB_CoreReset+0x60>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e01a      	b.n	8004ac2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	daf3      	bge.n	8004a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f043 0201 	orr.w	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <USB_CoreReset+0x60>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e006      	b.n	8004ac2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d0f1      	beq.n	8004aa4 <USB_CoreReset+0x34>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	00030d40 	.word	0x00030d40

08004ad4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	f107 001c 	add.w	r0, r7, #28
 8004ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004af0:	461a      	mov	r2, r3
 8004af2:	2300      	movs	r3, #0
 8004af4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d10a      	bne.n	8004b42 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	e014      	b.n	8004b6c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b50:	f023 0304 	bic.w	r3, r3, #4
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e009      	b.n	8004b6c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b66:	f023 0304 	bic.w	r3, r3, #4
 8004b6a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004b6c:	2110      	movs	r1, #16
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fe82 	bl	8004878 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fea3 	bl	80048c0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e015      	b.n	8004bac <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d3e5      	bcc.n	8004b80 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <USB_HostInit+0x154>)
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <USB_HostInit+0x158>)
 8004be0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004be4:	e009      	b.n	8004bfa <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <USB_HostInit+0x15c>)
 8004bf0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <USB_HostInit+0x160>)
 8004bf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f043 0210 	orr.w	r2, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <USB_HostInit+0x164>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c24:	b004      	add	sp, #16
 8004c26:	4770      	bx	lr
 8004c28:	01000200 	.word	0x01000200
 8004c2c:	00e00300 	.word	0x00e00300
 8004c30:	00600080 	.word	0x00600080
 8004c34:	004000e0 	.word	0x004000e0
 8004c38:	a3200008 	.word	0xa3200008

08004c3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d107      	bne.n	8004c8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c84:	461a      	mov	r2, r3
 8004c86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c8a:	6053      	str	r3, [r2, #4]
 8004c8c:	e009      	b.n	8004ca2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d106      	bne.n	8004ca2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ca0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cde:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ce0:	2064      	movs	r0, #100	; 0x64
 8004ce2:	f7fc f877 	bl	8000dd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004cf4:	200a      	movs	r0, #10
 8004cf6:	f7fc f86d 	bl	8000dd4 <HAL_Delay>

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <USB_DriveVbus+0x44>
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d106      	bne.n	8004d48 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d46:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d52:	d109      	bne.n	8004d68 <USB_DriveVbus+0x64>
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d66:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	0c5b      	lsrs	r3, r3, #17
 8004d94:	f003 0303 	and.w	r3, r3, #3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	b29b      	uxth	r3, r3
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	70fb      	strb	r3, [r7, #3]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70bb      	strb	r3, [r7, #2]
 8004dde:	4613      	mov	r3, r2
 8004de0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df6:	461a      	mov	r2, r3
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004dfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d87e      	bhi.n	8004f04 <USB_HC_Init+0x13c>
 8004e06:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <USB_HC_Init+0x44>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004ec7 	.word	0x08004ec7
 8004e14:	08004e1d 	.word	0x08004e1d
 8004e18:	08004e89 	.word	0x08004e89
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da10      	bge.n	8004e5a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e56:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004e58:	e057      	b.n	8004f0a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d051      	beq.n	8004f0a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e84:	60d3      	str	r3, [r2, #12]
      break;
 8004e86:	e040      	b.n	8004f0a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	461a      	mov	r2, r3
 8004e96:	f240 639d 	movw	r3, #1693	; 0x69d
 8004e9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	da34      	bge.n	8004f0e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004ec4:	e023      	b.n	8004f0e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f240 2325 	movw	r3, #549	; 0x225
 8004ed8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004eda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da17      	bge.n	8004f12 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004efc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f00:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f02:	e006      	b.n	8004f12 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	77fb      	strb	r3, [r7, #31]
      break;
 8004f08:	e004      	b.n	8004f14 <USB_HC_Init+0x14c>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <USB_HC_Init+0x14c>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <USB_HC_Init+0x14c>
      break;
 8004f12:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	2101      	movs	r1, #1
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	6939      	ldr	r1, [r7, #16]
 8004f2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004f3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da03      	bge.n	8004f4e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	e001      	b.n	8004f52 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ff0f 	bl	8004d76 <USB_GetHostSpeed>
 8004f58:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d106      	bne.n	8004f70 <USB_HC_Init+0x1a8>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d003      	beq.n	8004f70 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e001      	b.n	8004f74 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f74:	787b      	ldrb	r3, [r7, #1]
 8004f76:	059b      	lsls	r3, r3, #22
 8004f78:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f7c:	78bb      	ldrb	r3, [r7, #2]
 8004f7e:	02db      	lsls	r3, r3, #11
 8004f80:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f84:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f8a:	049b      	lsls	r3, r3, #18
 8004f8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f98:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	0159      	lsls	r1, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	440b      	add	r3, r1
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fb0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d10f      	bne.n	8004fda <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fd8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08c      	sub	sp, #48	; 0x30
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005000:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d02d      	beq.n	800506a <USB_HC_StartXfer+0x86>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d129      	bne.n	800506a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d117      	bne.n	800504c <USB_HC_StartXfer+0x68>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	79db      	ldrb	r3, [r3, #7]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <USB_HC_StartXfer+0x48>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	79db      	ldrb	r3, [r3, #7]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d10f      	bne.n	800504c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	4413      	add	r3, r2
 8005034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	440a      	add	r2, r1
 8005042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <USB_HC_StartXfer+0x86>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	795b      	ldrb	r3, [r3, #5]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	4619      	mov	r1, r3
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fa2f 	bl	80054c4 <USB_DoPing>
      return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e0f8      	b.n	800525c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	8912      	ldrh	r2, [r2, #8]
 800507a:	4413      	add	r3, r2
 800507c:	3b01      	subs	r3, #1
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	8912      	ldrh	r2, [r2, #8]
 8005082:	fbb3 f3f2 	udiv	r3, r3, r2
 8005086:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005088:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800508a:	8b7b      	ldrh	r3, [r7, #26]
 800508c:	429a      	cmp	r2, r3
 800508e:	d90b      	bls.n	80050a8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005090:	8b7b      	ldrh	r3, [r7, #26]
 8005092:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	8912      	ldrh	r2, [r2, #8]
 800509a:	fb02 f203 	mul.w	r2, r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	611a      	str	r2, [r3, #16]
 80050a2:	e001      	b.n	80050a8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80050a4:	2301      	movs	r3, #1
 80050a6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	78db      	ldrb	r3, [r3, #3]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	8912      	ldrh	r2, [r2, #8]
 80050b6:	fb02 f203 	mul.w	r2, r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	611a      	str	r2, [r3, #16]
 80050be:	e003      	b.n	80050c8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050d2:	04d9      	lsls	r1, r3, #19
 80050d4:	4b63      	ldr	r3, [pc, #396]	; (8005264 <USB_HC_StartXfer+0x280>)
 80050d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	7a9b      	ldrb	r3, [r3, #10]
 80050de:	075b      	lsls	r3, r3, #29
 80050e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	0148      	lsls	r0, r1, #5
 80050e8:	6a39      	ldr	r1, [r7, #32]
 80050ea:	4401      	add	r1, r0
 80050ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	68d9      	ldr	r1, [r3, #12]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	460a      	mov	r2, r1
 800510c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	440a      	add	r2, r1
 800513c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005140:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005144:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	4413      	add	r3, r2
 800514e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	7e7b      	ldrb	r3, [r7, #25]
 8005156:	075b      	lsls	r3, r3, #29
 8005158:	69f9      	ldr	r1, [r7, #28]
 800515a:	0148      	lsls	r0, r1, #5
 800515c:	6a39      	ldr	r1, [r7, #32]
 800515e:	4401      	add	r1, r0
 8005160:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005164:	4313      	orrs	r3, r2
 8005166:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	4413      	add	r3, r2
 8005170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800517e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	78db      	ldrb	r3, [r3, #3]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d004      	beq.n	8005192 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e003      	b.n	800519a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005198:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	461a      	mov	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e04e      	b.n	800525c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	78db      	ldrb	r3, [r3, #3]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d149      	bne.n	800525a <USB_HC_StartXfer+0x276>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d045      	beq.n	800525a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	79db      	ldrb	r3, [r3, #7]
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d830      	bhi.n	8005238 <USB_HC_StartXfer+0x254>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <USB_HC_StartXfer+0x1f8>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	08005211 	.word	0x08005211
 80051e4:	080051ed 	.word	0x080051ed
 80051e8:	08005211 	.word	0x08005211
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	3303      	adds	r3, #3
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80051f6:	8afa      	ldrh	r2, [r7, #22]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	429a      	cmp	r2, r3
 8005200:	d91c      	bls.n	800523c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	619a      	str	r2, [r3, #24]
        }
        break;
 800520e:	e015      	b.n	800523c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	3303      	adds	r3, #3
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800521a:	8afa      	ldrh	r2, [r7, #22]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	b29b      	uxth	r3, r3
 8005226:	429a      	cmp	r2, r3
 8005228:	d90a      	bls.n	8005240 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	619a      	str	r2, [r3, #24]
        }
        break;
 8005236:	e003      	b.n	8005240 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005238:	bf00      	nop
 800523a:	e002      	b.n	8005242 <USB_HC_StartXfer+0x25e>
        break;
 800523c:	bf00      	nop
 800523e:	e000      	b.n	8005242 <USB_HC_StartXfer+0x25e>
        break;
 8005240:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	68d9      	ldr	r1, [r3, #12]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	785a      	ldrb	r2, [r3, #1]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	b29b      	uxth	r3, r3
 8005250:	2000      	movs	r0, #0
 8005252:	9000      	str	r0, [sp, #0]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fb53 	bl	8004900 <USB_WritePacket>
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3728      	adds	r7, #40	; 0x28
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	1ff80000 	.word	0x1ff80000

08005268 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	b29b      	uxth	r3, r3
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800528a:	b480      	push	{r7}
 800528c:	b089      	sub	sp, #36	; 0x24
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	460b      	mov	r3, r1
 8005294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	0c9b      	lsrs	r3, r3, #18
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	0fdb      	lsrs	r3, r3, #31
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d104      	bne.n	80052e4 <USB_HC_Halt+0x5a>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e0e8      	b.n	80054b6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <USB_HC_Halt+0x66>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d173      	bne.n	80053d8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	440a      	add	r2, r1
 8005306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 80cb 	bne.w	80054b4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d143      	bne.n	80053b2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	440a      	add	r2, r1
 8005340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005348:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	440a      	add	r2, r1
 8005360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005368:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	440a      	add	r2, r1
 8005380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005388:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3301      	adds	r3, #1
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005396:	d81d      	bhi.n	80053d4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ae:	d0ec      	beq.n	800538a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053b0:	e080      	b.n	80054b4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053d2:	e06f      	b.n	80054b4 <USB_HC_Halt+0x22a>
            break;
 80053d4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053d6:	e06d      	b.n	80054b4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d143      	bne.n	8005490 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	440a      	add	r2, r1
 800541e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005422:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005426:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	4413      	add	r3, r2
 8005430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	440a      	add	r2, r1
 800543e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005446:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	440a      	add	r2, r1
 800545e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005462:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005466:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3301      	adds	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005474:	d81d      	bhi.n	80054b2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548c:	d0ec      	beq.n	8005468 <USB_HC_Halt+0x1de>
 800548e:	e011      	b.n	80054b4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	4413      	add	r3, r2
 8005498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e000      	b.n	80054b4 <USB_HC_Halt+0x22a>
          break;
 80054b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3724      	adds	r7, #36	; 0x24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80054d8:	2301      	movs	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	04da      	lsls	r2, r3, #19
 80054e0:	4b15      	ldr	r3, [pc, #84]	; (8005538 <USB_DoPing+0x74>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800550c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005514:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	461a      	mov	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	1ff80000 	.word	0x1ff80000

0800553c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff f936 	bl	80047be <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005552:	2110      	movs	r1, #16
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff f98f 	bl	8004878 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff f9b0 	bl	80048c0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	e01f      	b.n	80055a6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800557c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005584:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800558c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	461a      	mov	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	3301      	adds	r3, #1
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b0f      	cmp	r3, #15
 80055aa:	d9dc      	bls.n	8005566 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	e034      	b.n	800561c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	461a      	mov	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	3301      	adds	r3, #1
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f8:	d80c      	bhi.n	8005614 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800560c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005610:	d0ec      	beq.n	80055ec <USB_StopHost+0xb0>
 8005612:	e000      	b.n	8005616 <USB_StopHost+0xda>
        break;
 8005614:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3301      	adds	r3, #1
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b0f      	cmp	r3, #15
 8005620:	d9c7      	bls.n	80055b2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005628:	461a      	mov	r2, r3
 800562a:	f04f 33ff 	mov.w	r3, #4294967295
 800562e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f04f 32ff 	mov.w	r2, #4294967295
 8005636:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff f8af 	bl	800479c <USB_EnableGlobalInt>

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af04      	add	r7, sp, #16
 800564e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005650:	2301      	movs	r3, #1
 8005652:	2202      	movs	r2, #2
 8005654:	2102      	movs	r1, #2
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fc66 	bl	8005f28 <USBH_FindInterface>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2bff      	cmp	r3, #255	; 0xff
 8005664:	d002      	beq.n	800566c <USBH_CDC_InterfaceInit+0x24>
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d901      	bls.n	8005670 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800566c:	2302      	movs	r3, #2
 800566e:	e13d      	b.n	80058ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fc3b 	bl	8005ef0 <USBH_SelectInterface>
 800567a:	4603      	mov	r3, r0
 800567c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800567e:	7bbb      	ldrb	r3, [r7, #14]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005684:	2302      	movs	r3, #2
 8005686:	e131      	b.n	80058ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800568e:	2050      	movs	r0, #80	; 0x50
 8005690:	f002 fa00 	bl	8007a94 <malloc>
 8005694:	4603      	mov	r3, r0
 8005696:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80056a8:	2302      	movs	r3, #2
 80056aa:	e11f      	b.n	80058ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80056ac:	2250      	movs	r2, #80	; 0x50
 80056ae:	2100      	movs	r1, #0
 80056b0:	68b8      	ldr	r0, [r7, #8]
 80056b2:	f002 f9ff 	bl	8007ab4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	211a      	movs	r1, #26
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	b25b      	sxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	da15      	bge.n	80056fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	211a      	movs	r1, #26
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	211a      	movs	r1, #26
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056f4:	881a      	ldrh	r2, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fe32 	bl	800736a <USBH_AllocPipe>
 8005706:	4603      	mov	r3, r0
 8005708:	461a      	mov	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	7819      	ldrb	r1, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	7858      	ldrb	r0, [r3, #1]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	8952      	ldrh	r2, [r2, #10]
 8005726:	9202      	str	r2, [sp, #8]
 8005728:	2203      	movs	r2, #3
 800572a:	9201      	str	r2, [sp, #4]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4623      	mov	r3, r4
 8005730:	4602      	mov	r2, r0
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 fdea 	bl	800730c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2200      	movs	r2, #0
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f002 f8f9 	bl	8007938 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005746:	2300      	movs	r3, #0
 8005748:	2200      	movs	r2, #0
 800574a:	210a      	movs	r1, #10
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fbeb 	bl	8005f28 <USBH_FindInterface>
 8005752:	4603      	mov	r3, r0
 8005754:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2bff      	cmp	r3, #255	; 0xff
 800575a:	d002      	beq.n	8005762 <USBH_CDC_InterfaceInit+0x11a>
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d901      	bls.n	8005766 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005762:	2302      	movs	r3, #2
 8005764:	e0c2      	b.n	80058ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	211a      	movs	r1, #26
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	b25b      	sxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	da16      	bge.n	80057ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	211a      	movs	r1, #26
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	211a      	movs	r1, #26
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	4413      	add	r3, r2
 80057a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	835a      	strh	r2, [r3, #26]
 80057aa:	e015      	b.n	80057d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	211a      	movs	r1, #26
 80057b2:	fb01 f303 	mul.w	r3, r1, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057bc:	781a      	ldrb	r2, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	211a      	movs	r1, #26
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057d2:	881a      	ldrh	r2, [r3, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	211a      	movs	r1, #26
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b25b      	sxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da16      	bge.n	800581e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	211a      	movs	r1, #26
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	211a      	movs	r1, #26
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	4413      	add	r3, r2
 8005812:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005816:	881a      	ldrh	r2, [r3, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	835a      	strh	r2, [r3, #26]
 800581c:	e015      	b.n	800584a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	211a      	movs	r1, #26
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	4413      	add	r3, r2
 800582a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800582e:	781a      	ldrb	r2, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	211a      	movs	r1, #26
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	4413      	add	r3, r2
 8005840:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005844:	881a      	ldrh	r2, [r3, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	7b9b      	ldrb	r3, [r3, #14]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fd8a 	bl	800736a <USBH_AllocPipe>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	7bdb      	ldrb	r3, [r3, #15]
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fd80 	bl	800736a <USBH_AllocPipe>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	7b59      	ldrb	r1, [r3, #13]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	7b98      	ldrb	r0, [r3, #14]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	8b12      	ldrh	r2, [r2, #24]
 800588a:	9202      	str	r2, [sp, #8]
 800588c:	2202      	movs	r2, #2
 800588e:	9201      	str	r2, [sp, #4]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	4623      	mov	r3, r4
 8005894:	4602      	mov	r2, r0
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 fd38 	bl	800730c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	7b19      	ldrb	r1, [r3, #12]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	7bd8      	ldrb	r0, [r3, #15]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	8b52      	ldrh	r2, [r2, #26]
 80058b4:	9202      	str	r2, [sp, #8]
 80058b6:	2202      	movs	r2, #2
 80058b8:	9201      	str	r2, [sp, #4]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	4623      	mov	r3, r4
 80058be:	4602      	mov	r2, r0
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 fd23 	bl	800730c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	7b5b      	ldrb	r3, [r3, #13]
 80058d2:	2200      	movs	r2, #0
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f002 f82e 	bl	8007938 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	7b1b      	ldrb	r3, [r3, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f002 f827 	bl	8007938 <USBH_LL_SetToggle>

  return USBH_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd90      	pop	{r4, r7, pc}

080058f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fd18 	bl	800734a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fd43 	bl	80073ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	7b1b      	ldrb	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	7b1b      	ldrb	r3, [r3, #12]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 fd05 	bl	800734a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	7b1b      	ldrb	r3, [r3, #12]
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fd30 	bl	80073ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	7b5b      	ldrb	r3, [r3, #13]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	7b5b      	ldrb	r3, [r3, #13]
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 fcf2 	bl	800734a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	7b5b      	ldrb	r3, [r3, #13]
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 fd1d 	bl	80073ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4618      	mov	r0, r3
 800598e:	f002 f889 	bl	8007aa4 <free>
    phost->pActiveClass->pData = 0U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005998:	2200      	movs	r2, #0
 800599a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3340      	adds	r3, #64	; 0x40
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8b1 	bl	8005b26 <GetLineCoding>
 80059c4:	4603      	mov	r3, r0
 80059c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80059c8:	7afb      	ldrb	r3, [r7, #11]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d105      	bne.n	80059da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80059d4:	2102      	movs	r1, #2
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80059da:	7afb      	ldrb	r3, [r7, #11]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d877      	bhi.n	8005af8 <USBH_CDC_Process+0x114>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <USBH_CDC_Process+0x2c>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a25 	.word	0x08005a25
 8005a14:	08005a2b 	.word	0x08005a2b
 8005a18:	08005a5b 	.word	0x08005a5b
 8005a1c:	08005acf 	.word	0x08005acf
 8005a20:	08005add 	.word	0x08005add
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e06d      	b.n	8005b06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f897 	bl	8005b64 <SetLineCoding>
 8005a36:	4603      	mov	r3, r0
 8005a38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a48:	e058      	b.n	8005afc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d055      	beq.n	8005afc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2204      	movs	r2, #4
 8005a54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a58:	e050      	b.n	8005afc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3340      	adds	r3, #64	; 0x40
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f860 	bl	8005b26 <GetLineCoding>
 8005a66:	4603      	mov	r3, r0
 8005a68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d126      	bne.n	8005abe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a82:	791b      	ldrb	r3, [r3, #4]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d13b      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d133      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d12b      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d124      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f958 	bl	8005d6c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005abc:	e020      	b.n	8005b00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d01d      	beq.n	8005b00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005acc:	e018      	b.n	8005b00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f867 	bl	8005ba2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8da 	bl	8005c8e <CDC_ProcessReception>
      break;
 8005ada:	e014      	b.n	8005b06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005adc:	2100      	movs	r1, #0
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 ffe3 	bl	8006aaa <USBH_ClrFeature>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005af6:	e005      	b.n	8005b04 <USBH_CDC_Process+0x120>

    default:
      break;
 8005af8:	bf00      	nop
 8005afa:	e004      	b.n	8005b06 <USBH_CDC_Process+0x122>
      break;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <USBH_CDC_Process+0x122>
      break;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <USBH_CDC_Process+0x122>
      break;
 8005b04:	bf00      	nop

  }

  return status;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	22a1      	movs	r2, #161	; 0xa1
 8005b34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2221      	movs	r2, #33	; 0x21
 8005b3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2207      	movs	r2, #7
 8005b4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2207      	movs	r2, #7
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 f988 	bl	8006e6a <USBH_CtlReq>
 8005b5a:	4603      	mov	r3, r0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2221      	movs	r2, #33	; 0x21
 8005b72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2207      	movs	r2, #7
 8005b8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2207      	movs	r2, #7
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 f969 	bl	8006e6a <USBH_CtlReq>
 8005b98:	4603      	mov	r3, r0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	af02      	add	r7, sp, #8
 8005ba8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d002      	beq.n	8005bc8 <CDC_ProcessTransmission+0x26>
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d023      	beq.n	8005c0e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005bc6:	e05e      	b.n	8005c86 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	8b12      	ldrh	r2, [r2, #24]
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d90b      	bls.n	8005bec <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	69d9      	ldr	r1, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8b1a      	ldrh	r2, [r3, #24]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	7b5b      	ldrb	r3, [r3, #13]
 8005be0:	2001      	movs	r0, #1
 8005be2:	9000      	str	r0, [sp, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 fb4e 	bl	8007286 <USBH_BulkSendData>
 8005bea:	e00b      	b.n	8005c04 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	7b5b      	ldrb	r3, [r3, #13]
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	9000      	str	r0, [sp, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 fb41 	bl	8007286 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c0c:	e03b      	b.n	8005c86 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	7b5b      	ldrb	r3, [r3, #13]
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 fe65 	bl	80078e4 <USBH_LL_GetURBState>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d128      	bne.n	8005c76 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	8b12      	ldrh	r2, [r2, #24]
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d90e      	bls.n	8005c4e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	8b12      	ldrh	r2, [r2, #24]
 8005c38:	1a9a      	subs	r2, r3, r2
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	8b12      	ldrh	r2, [r2, #24]
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	61da      	str	r2, [r3, #28]
 8005c4c:	e002      	b.n	8005c54 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c64:	e00e      	b.n	8005c84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f868 	bl	8005d44 <USBH_CDC_TransmitCallback>
      break;
 8005c74:	e006      	b.n	8005c84 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d103      	bne.n	8005c84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c84:	bf00      	nop
  }
}
 8005c86:	bf00      	nop
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d002      	beq.n	8005cb4 <CDC_ProcessReception+0x26>
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d00e      	beq.n	8005cd0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005cb2:	e043      	b.n	8005d3c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	6a19      	ldr	r1, [r3, #32]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	8b5a      	ldrh	r2, [r3, #26]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	7b1b      	ldrb	r3, [r3, #12]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 fb05 	bl	80072d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005cce:	e035      	b.n	8005d3c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	7b1b      	ldrb	r3, [r3, #12]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f001 fe04 	bl	80078e4 <USBH_LL_GetURBState>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d129      	bne.n	8005d3a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	7b1b      	ldrb	r3, [r3, #12]
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fd67 	bl	80077c0 <USBH_LL_GetLastXferSize>
 8005cf2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d016      	beq.n	8005d2c <CDC_ProcessReception+0x9e>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	8b5b      	ldrh	r3, [r3, #26]
 8005d02:	461a      	mov	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d910      	bls.n	8005d2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad2      	subs	r2, r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	6a1a      	ldr	r2, [r3, #32]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	441a      	add	r2, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2203      	movs	r2, #3
 8005d26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d2a:	e006      	b.n	8005d3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f80f 	bl	8005d58 <USBH_CDC_ReceiveCallback>
      break;
 8005d3a:	bf00      	nop
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005d94:	2302      	movs	r3, #2
 8005d96:	e029      	b.n	8005dec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	79fa      	ldrb	r2, [r7, #7]
 8005d9c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f81f 	bl	8005df4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f001 fc37 	bl	8007658 <USBH_LL_Init>

  return USBH_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e009      	b.n	8005e1a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	33e0      	adds	r3, #224	; 0xe0
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	2200      	movs	r2, #0
 8005e12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b0e      	cmp	r3, #14
 8005e1e:	d9f2      	bls.n	8005e06 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e009      	b.n	8005e3a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3301      	adds	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e40:	d3f1      	bcc.n	8005e26 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2240      	movs	r2, #64	; 0x40
 8005e66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d016      	beq.n	8005ede <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10e      	bne.n	8005ed8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005ec0:	1c59      	adds	r1, r3, #1
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	33de      	adds	r3, #222	; 0xde
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
 8005ed6:	e004      	b.n	8005ee2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	73fb      	strb	r3, [r7, #15]
 8005edc:	e001      	b.n	8005ee2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f06:	78fa      	ldrb	r2, [r7, #3]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d204      	bcs.n	8005f16 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005f14:	e001      	b.n	8005f1a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f16:	2302      	movs	r3, #2
 8005f18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	4608      	mov	r0, r1
 8005f32:	4611      	mov	r1, r2
 8005f34:	461a      	mov	r2, r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	70fb      	strb	r3, [r7, #3]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	70bb      	strb	r3, [r7, #2]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005f50:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f52:	e025      	b.n	8005fa0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	221a      	movs	r2, #26
 8005f58:	fb02 f303 	mul.w	r3, r2, r3
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	3302      	adds	r3, #2
 8005f64:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	795b      	ldrb	r3, [r3, #5]
 8005f6a:	78fa      	ldrb	r2, [r7, #3]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d002      	beq.n	8005f76 <USBH_FindInterface+0x4e>
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	2bff      	cmp	r3, #255	; 0xff
 8005f74:	d111      	bne.n	8005f9a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f7a:	78ba      	ldrb	r2, [r7, #2]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d002      	beq.n	8005f86 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f80:	78bb      	ldrb	r3, [r7, #2]
 8005f82:	2bff      	cmp	r3, #255	; 0xff
 8005f84:	d109      	bne.n	8005f9a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f8a:	787a      	ldrb	r2, [r7, #1]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d002      	beq.n	8005f96 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f90:	787b      	ldrb	r3, [r7, #1]
 8005f92:	2bff      	cmp	r3, #255	; 0xff
 8005f94:	d101      	bne.n	8005f9a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	e006      	b.n	8005fa8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d9d6      	bls.n	8005f54 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005fa6:	23ff      	movs	r3, #255	; 0xff
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fb87 	bl	80076d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 fca0 	bl	800790a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af04      	add	r7, sp, #16
 8005fda:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d102      	bne.n	8005ff6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b0b      	cmp	r3, #11
 8005ffe:	f200 81b3 	bhi.w	8006368 <USBH_Process+0x394>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <USBH_Process+0x34>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006039 	.word	0x08006039
 800600c:	0800606b 	.word	0x0800606b
 8006010:	080060d3 	.word	0x080060d3
 8006014:	08006303 	.word	0x08006303
 8006018:	08006369 	.word	0x08006369
 800601c:	08006177 	.word	0x08006177
 8006020:	080062a9 	.word	0x080062a9
 8006024:	080061ad 	.word	0x080061ad
 8006028:	080061cd 	.word	0x080061cd
 800602c:	080061ed 	.word	0x080061ed
 8006030:	0800621b 	.word	0x0800621b
 8006034:	080062eb 	.word	0x080062eb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8193 	beq.w	800636c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800604c:	20c8      	movs	r0, #200	; 0xc8
 800604e:	f001 fca3 	bl	8007998 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 fb99 	bl	800778a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006068:	e180      	b.n	800636c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006070:	2b01      	cmp	r3, #1
 8006072:	d107      	bne.n	8006084 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006082:	e182      	b.n	800638a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800608a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800608e:	d914      	bls.n	80060ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006096:	3301      	adds	r3, #1
 8006098:	b2da      	uxtb	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d903      	bls.n	80060b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	220d      	movs	r2, #13
 80060ae:	701a      	strb	r2, [r3, #0]
      break;
 80060b0:	e16b      	b.n	800638a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
      break;
 80060b8:	e167      	b.n	800638a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060c0:	f103 020a 	add.w	r2, r3, #10
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80060ca:	200a      	movs	r0, #10
 80060cc:	f001 fc64 	bl	8007998 <USBH_Delay>
      break;
 80060d0:	e15b      	b.n	800638a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060e2:	2104      	movs	r1, #4
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80060e8:	2064      	movs	r0, #100	; 0x64
 80060ea:	f001 fc55 	bl	8007998 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 fb24 	bl	800773c <USBH_LL_GetSpeed>
 80060f4:	4603      	mov	r3, r0
 80060f6:	461a      	mov	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2205      	movs	r2, #5
 8006102:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006104:	2100      	movs	r1, #0
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 f92f 	bl	800736a <USBH_AllocPipe>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006114:	2180      	movs	r1, #128	; 0x80
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 f927 	bl	800736a <USBH_AllocPipe>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	7919      	ldrb	r1, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006138:	b292      	uxth	r2, r2
 800613a:	9202      	str	r2, [sp, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	9201      	str	r2, [sp, #4]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	4603      	mov	r3, r0
 8006144:	2280      	movs	r2, #128	; 0x80
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 f8e0 	bl	800730c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7959      	ldrb	r1, [r3, #5]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006160:	b292      	uxth	r2, r2
 8006162:	9202      	str	r2, [sp, #8]
 8006164:	2200      	movs	r2, #0
 8006166:	9201      	str	r2, [sp, #4]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	4603      	mov	r3, r0
 800616c:	2200      	movs	r2, #0
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 f8cc 	bl	800730c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006174:	e109      	b.n	800638a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f90c 	bl	8006394 <USBH_HandleEnum>
 800617c:	4603      	mov	r3, r0
 800617e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	f040 80f3 	bne.w	8006370 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006198:	2b01      	cmp	r3, #1
 800619a:	d103      	bne.n	80061a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2208      	movs	r2, #8
 80061a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80061a2:	e0e5      	b.n	8006370 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2207      	movs	r2, #7
 80061a8:	701a      	strb	r2, [r3, #0]
      break;
 80061aa:	e0e1      	b.n	8006370 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 80de 	beq.w	8006374 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061be:	2101      	movs	r1, #1
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2208      	movs	r2, #8
 80061c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80061ca:	e0d3      	b.n	8006374 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fc20 	bl	8006a1c <USBH_SetCfg>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f040 80ca 	bne.w	8006378 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2209      	movs	r2, #9
 80061e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061ea:	e0c5      	b.n	8006378 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00b      	beq.n	8006212 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80061fa:	2101      	movs	r1, #1
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fc30 	bl	8006a62 <USBH_SetFeature>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	f040 80b9 	bne.w	800637c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	220a      	movs	r2, #10
 800620e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006210:	e0b4      	b.n	800637c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	220a      	movs	r2, #10
 8006216:	701a      	strb	r2, [r3, #0]
      break;
 8006218:	e0b0      	b.n	800637c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80ad 	beq.w	8006380 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
 8006232:	e016      	b.n	8006262 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006234:	7bfa      	ldrb	r2, [r7, #15]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	32de      	adds	r2, #222	; 0xde
 800623a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623e:	791a      	ldrb	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006246:	429a      	cmp	r2, r3
 8006248:	d108      	bne.n	800625c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800624a:	7bfa      	ldrb	r2, [r7, #15]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	32de      	adds	r2, #222	; 0xde
 8006250:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800625a:	e005      	b.n	8006268 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	3301      	adds	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0e5      	beq.n	8006234 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d016      	beq.n	80062a0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	4798      	blx	r3
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2206      	movs	r2, #6
 8006288:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006290:	2103      	movs	r1, #3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006296:	e073      	b.n	8006380 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	220d      	movs	r2, #13
 800629c:	701a      	strb	r2, [r3, #0]
      break;
 800629e:	e06f      	b.n	8006380 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	220d      	movs	r2, #13
 80062a4:	701a      	strb	r2, [r3, #0]
      break;
 80062a6:	e06b      	b.n	8006380 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d017      	beq.n	80062e2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
 80062be:	4603      	mov	r3, r0
 80062c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	220b      	movs	r2, #11
 80062ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062d0:	e058      	b.n	8006384 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80062d2:	7bbb      	ldrb	r3, [r7, #14]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d154      	bne.n	8006384 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	220d      	movs	r2, #13
 80062de:	701a      	strb	r2, [r3, #0]
      break;
 80062e0:	e050      	b.n	8006384 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	220d      	movs	r2, #13
 80062e6:	701a      	strb	r2, [r3, #0]
      break;
 80062e8:	e04c      	b.n	8006384 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d049      	beq.n	8006388 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
      }
      break;
 8006300:	e042      	b.n	8006388 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff fd72 	bl	8005df4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800633e:	2105      	movs	r1, #5
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b01      	cmp	r3, #1
 800634e:	d107      	bne.n	8006360 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fe2b 	bl	8005fb4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800635e:	e014      	b.n	800638a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 f9b5 	bl	80076d0 <USBH_LL_Start>
      break;
 8006366:	e010      	b.n	800638a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006368:	bf00      	nop
 800636a:	e00e      	b.n	800638a <USBH_Process+0x3b6>
      break;
 800636c:	bf00      	nop
 800636e:	e00c      	b.n	800638a <USBH_Process+0x3b6>
      break;
 8006370:	bf00      	nop
 8006372:	e00a      	b.n	800638a <USBH_Process+0x3b6>
    break;
 8006374:	bf00      	nop
 8006376:	e008      	b.n	800638a <USBH_Process+0x3b6>
      break;
 8006378:	bf00      	nop
 800637a:	e006      	b.n	800638a <USBH_Process+0x3b6>
      break;
 800637c:	bf00      	nop
 800637e:	e004      	b.n	800638a <USBH_Process+0x3b6>
      break;
 8006380:	bf00      	nop
 8006382:	e002      	b.n	800638a <USBH_Process+0x3b6>
      break;
 8006384:	bf00      	nop
 8006386:	e000      	b.n	800638a <USBH_Process+0x3b6>
      break;
 8006388:	bf00      	nop
  }
  return USBH_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af04      	add	r7, sp, #16
 800639a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	785b      	ldrb	r3, [r3, #1]
 80063a8:	2b07      	cmp	r3, #7
 80063aa:	f200 81c1 	bhi.w	8006730 <USBH_HandleEnum+0x39c>
 80063ae:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <USBH_HandleEnum+0x20>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063d5 	.word	0x080063d5
 80063b8:	08006493 	.word	0x08006493
 80063bc:	080064fd 	.word	0x080064fd
 80063c0:	0800658b 	.word	0x0800658b
 80063c4:	080065f5 	.word	0x080065f5
 80063c8:	08006665 	.word	0x08006665
 80063cc:	080066ab 	.word	0x080066ab
 80063d0:	080066f1 	.word	0x080066f1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80063d4:	2108      	movs	r1, #8
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa50 	bl	800687c <USBH_Get_DevDesc>
 80063dc:	4603      	mov	r3, r0
 80063de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d130      	bne.n	8006448 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	7919      	ldrb	r1, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800640a:	b292      	uxth	r2, r2
 800640c:	9202      	str	r2, [sp, #8]
 800640e:	2200      	movs	r2, #0
 8006410:	9201      	str	r2, [sp, #4]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	4603      	mov	r3, r0
 8006416:	2280      	movs	r2, #128	; 0x80
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 ff77 	bl	800730c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	7959      	ldrb	r1, [r3, #5]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006432:	b292      	uxth	r2, r2
 8006434:	9202      	str	r2, [sp, #8]
 8006436:	2200      	movs	r2, #0
 8006438:	9201      	str	r2, [sp, #4]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	4603      	mov	r3, r0
 800643e:	2200      	movs	r2, #0
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 ff63 	bl	800730c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006446:	e175      	b.n	8006734 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	2b03      	cmp	r3, #3
 800644c:	f040 8172 	bne.w	8006734 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006456:	3301      	adds	r3, #1
 8006458:	b2da      	uxtb	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006466:	2b03      	cmp	r3, #3
 8006468:	d903      	bls.n	8006472 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	220d      	movs	r2, #13
 800646e:	701a      	strb	r2, [r3, #0]
      break;
 8006470:	e160      	b.n	8006734 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	795b      	ldrb	r3, [r3, #5]
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 ff97 	bl	80073ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	791b      	ldrb	r3, [r3, #4]
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 ff91 	bl	80073ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
      break;
 8006490:	e150      	b.n	8006734 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006492:	2112      	movs	r1, #18
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f9f1 	bl	800687c <USBH_Get_DevDesc>
 800649a:	4603      	mov	r3, r0
 800649c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d103      	bne.n	80064ac <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064aa:	e145      	b.n	8006738 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	f040 8142 	bne.w	8006738 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064ba:	3301      	adds	r3, #1
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d903      	bls.n	80064d6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	220d      	movs	r2, #13
 80064d2:	701a      	strb	r2, [r3, #0]
      break;
 80064d4:	e130      	b.n	8006738 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	795b      	ldrb	r3, [r3, #5]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 ff65 	bl	80073ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	791b      	ldrb	r3, [r3, #4]
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 ff5f 	bl	80073ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
      break;
 80064fa:	e11d      	b.n	8006738 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80064fc:	2101      	movs	r1, #1
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa68 	bl	80069d4 <USBH_SetAddress>
 8006504:	4603      	mov	r3, r0
 8006506:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d132      	bne.n	8006574 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800650e:	2002      	movs	r0, #2
 8006510:	f001 fa42 	bl	8007998 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2203      	movs	r2, #3
 8006520:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	7919      	ldrb	r1, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006536:	b292      	uxth	r2, r2
 8006538:	9202      	str	r2, [sp, #8]
 800653a:	2200      	movs	r2, #0
 800653c:	9201      	str	r2, [sp, #4]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4603      	mov	r3, r0
 8006542:	2280      	movs	r2, #128	; 0x80
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fee1 	bl	800730c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	7959      	ldrb	r1, [r3, #5]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800655e:	b292      	uxth	r2, r2
 8006560:	9202      	str	r2, [sp, #8]
 8006562:	2200      	movs	r2, #0
 8006564:	9201      	str	r2, [sp, #4]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	4603      	mov	r3, r0
 800656a:	2200      	movs	r2, #0
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fecd 	bl	800730c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006572:	e0e3      	b.n	800673c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	2b03      	cmp	r3, #3
 8006578:	f040 80e0 	bne.w	800673c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	220d      	movs	r2, #13
 8006580:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	705a      	strb	r2, [r3, #1]
      break;
 8006588:	e0d8      	b.n	800673c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800658a:	2109      	movs	r1, #9
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f99d 	bl	80068cc <USBH_Get_CfgDesc>
 8006592:	4603      	mov	r3, r0
 8006594:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2204      	movs	r2, #4
 80065a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065a2:	e0cd      	b.n	8006740 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	f040 80ca 	bne.w	8006740 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065b2:	3301      	adds	r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d903      	bls.n	80065ce <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	220d      	movs	r2, #13
 80065ca:	701a      	strb	r2, [r3, #0]
      break;
 80065cc:	e0b8      	b.n	8006740 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	795b      	ldrb	r3, [r3, #5]
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fee9 	bl	80073ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	791b      	ldrb	r3, [r3, #4]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fee3 	bl	80073ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
      break;
 80065f2:	e0a5      	b.n	8006740 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f965 	bl	80068cc <USBH_Get_CfgDesc>
 8006602:	4603      	mov	r3, r0
 8006604:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d103      	bne.n	8006614 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2205      	movs	r2, #5
 8006610:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006612:	e097      	b.n	8006744 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b03      	cmp	r3, #3
 8006618:	f040 8094 	bne.w	8006744 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006622:	3301      	adds	r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006632:	2b03      	cmp	r3, #3
 8006634:	d903      	bls.n	800663e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	220d      	movs	r2, #13
 800663a:	701a      	strb	r2, [r3, #0]
      break;
 800663c:	e082      	b.n	8006744 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	795b      	ldrb	r3, [r3, #5]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 feb1 	bl	80073ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	791b      	ldrb	r3, [r3, #4]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 feab 	bl	80073ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
      break;
 8006662:	e06f      	b.n	8006744 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800666a:	2b00      	cmp	r3, #0
 800666c:	d019      	beq.n	80066a2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800667a:	23ff      	movs	r3, #255	; 0xff
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f949 	bl	8006914 <USBH_Get_StringDesc>
 8006682:	4603      	mov	r3, r0
 8006684:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2206      	movs	r2, #6
 8006690:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006692:	e059      	b.n	8006748 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	2b03      	cmp	r3, #3
 8006698:	d156      	bne.n	8006748 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2206      	movs	r2, #6
 800669e:	705a      	strb	r2, [r3, #1]
      break;
 80066a0:	e052      	b.n	8006748 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2206      	movs	r2, #6
 80066a6:	705a      	strb	r2, [r3, #1]
      break;
 80066a8:	e04e      	b.n	8006748 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d019      	beq.n	80066e8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80066c0:	23ff      	movs	r3, #255	; 0xff
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f926 	bl	8006914 <USBH_Get_StringDesc>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d103      	bne.n	80066da <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2207      	movs	r2, #7
 80066d6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80066d8:	e038      	b.n	800674c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d135      	bne.n	800674c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2207      	movs	r2, #7
 80066e4:	705a      	strb	r2, [r3, #1]
      break;
 80066e6:	e031      	b.n	800674c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2207      	movs	r2, #7
 80066ec:	705a      	strb	r2, [r3, #1]
      break;
 80066ee:	e02d      	b.n	800674c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d017      	beq.n	800672a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006706:	23ff      	movs	r3, #255	; 0xff
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f903 	bl	8006914 <USBH_Get_StringDesc>
 800670e:	4603      	mov	r3, r0
 8006710:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800671c:	e018      	b.n	8006750 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b03      	cmp	r3, #3
 8006722:	d115      	bne.n	8006750 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]
      break;
 8006728:	e012      	b.n	8006750 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	73fb      	strb	r3, [r7, #15]
      break;
 800672e:	e00f      	b.n	8006750 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006730:	bf00      	nop
 8006732:	e00e      	b.n	8006752 <USBH_HandleEnum+0x3be>
      break;
 8006734:	bf00      	nop
 8006736:	e00c      	b.n	8006752 <USBH_HandleEnum+0x3be>
      break;
 8006738:	bf00      	nop
 800673a:	e00a      	b.n	8006752 <USBH_HandleEnum+0x3be>
      break;
 800673c:	bf00      	nop
 800673e:	e008      	b.n	8006752 <USBH_HandleEnum+0x3be>
      break;
 8006740:	bf00      	nop
 8006742:	e006      	b.n	8006752 <USBH_HandleEnum+0x3be>
      break;
 8006744:	bf00      	nop
 8006746:	e004      	b.n	8006752 <USBH_HandleEnum+0x3be>
      break;
 8006748:	bf00      	nop
 800674a:	e002      	b.n	8006752 <USBH_HandleEnum+0x3be>
      break;
 800674c:	bf00      	nop
 800674e:	e000      	b.n	8006752 <USBH_HandleEnum+0x3be>
      break;
 8006750:	bf00      	nop
  }
  return Status;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f804 	bl	800679e <USBH_HandleSof>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b0b      	cmp	r3, #11
 80067ae:	d10a      	bne.n	80067c6 <USBH_HandleSof+0x28>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4798      	blx	r3
  }
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80067de:	bf00      	nop
}
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80067fa:	bf00      	nop
}
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 ff56 	bl	8007706 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	791b      	ldrb	r3, [r3, #4]
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fda3 	bl	80073ac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	795b      	ldrb	r3, [r3, #5]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fd9d 	bl	80073ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af02      	add	r7, sp, #8
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	b29b      	uxth	r3, r3
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	4613      	mov	r3, r2
 8006896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800689a:	2100      	movs	r1, #0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f864 	bl	800696a <USBH_GetDescriptor>
 80068a2:	4603      	mov	r3, r0
 80068a4:	73fb      	strb	r3, [r7, #15]
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f203 3026 	addw	r0, r3, #806	; 0x326
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	b292      	uxth	r2, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	f000 f918 	bl	8006af2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	331c      	adds	r3, #28
 80068dc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80068de:	887b      	ldrh	r3, [r7, #2]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e8:	2100      	movs	r1, #0
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f83d 	bl	800696a <USBH_GetDescriptor>
 80068f0:	4603      	mov	r3, r0
 80068f2:	72fb      	strb	r3, [r7, #11]
 80068f4:	7afb      	ldrb	r3, [r7, #11]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d107      	bne.n	800690a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006900:	887a      	ldrh	r2, [r7, #2]
 8006902:	68f9      	ldr	r1, [r7, #12]
 8006904:	4618      	mov	r0, r3
 8006906:	f000 f964 	bl	8006bd2 <USBH_ParseCfgDesc>
  }

  return status;
 800690a:	7afb      	ldrb	r3, [r7, #11]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	607a      	str	r2, [r7, #4]
 800691e:	461a      	mov	r2, r3
 8006920:	460b      	mov	r3, r1
 8006922:	72fb      	strb	r3, [r7, #11]
 8006924:	4613      	mov	r3, r2
 8006926:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006928:	7afb      	ldrb	r3, [r7, #11]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006930:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006938:	893b      	ldrh	r3, [r7, #8]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	460b      	mov	r3, r1
 800693e:	2100      	movs	r1, #0
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f812 	bl	800696a <USBH_GetDescriptor>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d107      	bne.n	8006960 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006956:	893a      	ldrh	r2, [r7, #8]
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fa37 	bl	8006dce <USBH_ParseStringDesc>
  }

  return status;
 8006960:	7dfb      	ldrb	r3, [r7, #23]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	607b      	str	r3, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	72fb      	strb	r3, [r7, #11]
 8006978:	4613      	mov	r3, r2
 800697a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	789b      	ldrb	r3, [r3, #2]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d11c      	bne.n	80069be <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800698a:	b2da      	uxtb	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2206      	movs	r2, #6
 8006994:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	893a      	ldrh	r2, [r7, #8]
 800699a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800699c:	893b      	ldrh	r3, [r7, #8]
 800699e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069a6:	d104      	bne.n	80069b2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f240 4209 	movw	r2, #1033	; 0x409
 80069ae:	829a      	strh	r2, [r3, #20]
 80069b0:	e002      	b.n	80069b8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8b3a      	ldrh	r2, [r7, #24]
 80069bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80069be:	8b3b      	ldrh	r3, [r7, #24]
 80069c0:	461a      	mov	r2, r3
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fa50 	bl	8006e6a <USBH_CtlReq>
 80069ca:	4603      	mov	r3, r0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	789b      	ldrb	r3, [r3, #2]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d10f      	bne.n	8006a08 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2205      	movs	r2, #5
 80069f2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fa2c 	bl	8006e6a <USBH_CtlReq>
 8006a12:	4603      	mov	r3, r0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	789b      	ldrb	r3, [r3, #2]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d10e      	bne.n	8006a4e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2209      	movs	r2, #9
 8006a3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	887a      	ldrh	r2, [r7, #2]
 8006a40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2100      	movs	r1, #0
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa09 	bl	8006e6a <USBH_CtlReq>
 8006a58:	4603      	mov	r3, r0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	789b      	ldrb	r3, [r3, #2]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10f      	bne.n	8006a96 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2203      	movs	r2, #3
 8006a80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9e5 	bl	8006e6a <USBH_CtlReq>
 8006aa0:	4603      	mov	r3, r0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	789b      	ldrb	r3, [r3, #2]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d10f      	bne.n	8006ade <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f9c1 	bl	8006e6a <USBH_CtlReq>
 8006ae8:	4603      	mov	r3, r0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	4613      	mov	r3, r2
 8006afe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	785a      	ldrb	r2, [r3, #1]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	3302      	adds	r3, #2
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	3303      	adds	r3, #3
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	4313      	orrs	r3, r2
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	791a      	ldrb	r2, [r3, #4]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	795a      	ldrb	r2, [r3, #5]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	799a      	ldrb	r2, [r3, #6]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	79da      	ldrb	r2, [r3, #7]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d939      	bls.n	8006bc6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	3308      	adds	r3, #8
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	3309      	adds	r3, #9
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	330a      	adds	r3, #10
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	330b      	adds	r3, #11
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	4313      	orrs	r3, r2
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	330d      	adds	r3, #13
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	7b9a      	ldrb	r2, [r3, #14]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	7bda      	ldrb	r2, [r3, #15]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	7c1a      	ldrb	r2, [r3, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	7c5a      	ldrb	r2, [r3, #17]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	745a      	strb	r2, [r3, #17]
  }
}
 8006bc6:	bf00      	nop
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b08a      	sub	sp, #40	; 0x28
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	781a      	ldrb	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	785a      	ldrb	r2, [r3, #1]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	3302      	adds	r3, #2
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3303      	adds	r3, #3
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	791a      	ldrb	r2, [r3, #4]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	795a      	ldrb	r2, [r3, #5]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	799a      	ldrb	r2, [r3, #6]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	79da      	ldrb	r2, [r3, #7]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	7a1a      	ldrb	r2, [r3, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	2b09      	cmp	r3, #9
 8006c4c:	d95f      	bls.n	8006d0e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006c4e:	2309      	movs	r3, #9
 8006c50:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c56:	e051      	b.n	8006cfc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c58:	f107 0316 	add.w	r3, r7, #22
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c60:	f000 f8e8 	bl	8006e34 <USBH_GetNextDesc>
 8006c64:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	785b      	ldrb	r3, [r3, #1]
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d146      	bne.n	8006cfc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c72:	221a      	movs	r2, #26
 8006c74:	fb02 f303 	mul.w	r3, r2, r3
 8006c78:	3308      	adds	r3, #8
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3302      	adds	r3, #2
 8006c80:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c84:	69f8      	ldr	r0, [r7, #28]
 8006c86:	f000 f846 	bl	8006d16 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c94:	e022      	b.n	8006cdc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c96:	f107 0316 	add.w	r3, r7, #22
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c9e:	f000 f8c9 	bl	8006e34 <USBH_GetNextDesc>
 8006ca2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	d117      	bne.n	8006cdc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cb0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006cb4:	3201      	adds	r2, #1
 8006cb6:	00d2      	lsls	r2, r2, #3
 8006cb8:	211a      	movs	r1, #26
 8006cba:	fb01 f303 	mul.w	r3, r1, r3
 8006cbe:	4413      	add	r3, r2
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ccc:	69b8      	ldr	r0, [r7, #24]
 8006cce:	f000 f851 	bl	8006d74 <USBH_ParseEPDesc>
            ep_ix++;
 8006cd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	791b      	ldrb	r3, [r3, #4]
 8006ce0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d204      	bcs.n	8006cf2 <USBH_ParseCfgDesc+0x120>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	885a      	ldrh	r2, [r3, #2]
 8006cec:	8afb      	ldrh	r3, [r7, #22]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d8d1      	bhi.n	8006c96 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006cf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d804      	bhi.n	8006d0e <USBH_ParseCfgDesc+0x13c>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	885a      	ldrh	r2, [r3, #2]
 8006d08:	8afb      	ldrh	r3, [r7, #22]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d8a4      	bhi.n	8006c58 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006d0e:	bf00      	nop
 8006d10:	3728      	adds	r7, #40	; 0x28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	785a      	ldrb	r2, [r3, #1]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	789a      	ldrb	r2, [r3, #2]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	78da      	ldrb	r2, [r3, #3]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	791a      	ldrb	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	795a      	ldrb	r2, [r3, #5]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	799a      	ldrb	r2, [r3, #6]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	79da      	ldrb	r2, [r3, #7]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	7a1a      	ldrb	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	721a      	strb	r2, [r3, #8]
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	785a      	ldrb	r2, [r3, #1]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	789a      	ldrb	r2, [r3, #2]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	78da      	ldrb	r2, [r3, #3]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	3304      	adds	r3, #4
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	3305      	adds	r3, #5
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	4313      	orrs	r3, r2
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	799a      	ldrb	r2, [r3, #6]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	719a      	strb	r2, [r3, #6]
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b087      	sub	sp, #28
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d120      	bne.n	8006e28 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	1e9a      	subs	r2, r3, #2
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	bf28      	it	cs
 8006df2:	4613      	movcs	r3, r2
 8006df4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3302      	adds	r3, #2
 8006dfa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	82fb      	strh	r3, [r7, #22]
 8006e00:	e00b      	b.n	8006e1a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e02:	8afb      	ldrh	r3, [r7, #22]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	781a      	ldrb	r2, [r3, #0]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e14:	8afb      	ldrh	r3, [r7, #22]
 8006e16:	3302      	adds	r3, #2
 8006e18:	82fb      	strh	r3, [r7, #22]
 8006e1a:	8afa      	ldrh	r2, [r7, #22]
 8006e1c:	8abb      	ldrh	r3, [r7, #20]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d3ef      	bcc.n	8006e02 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2200      	movs	r2, #0
 8006e26:	701a      	strb	r2, [r3, #0]
  }
}
 8006e28:	bf00      	nop
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	881a      	ldrh	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	4413      	add	r3, r2
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4413      	add	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	4613      	mov	r3, r2
 8006e76:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	789b      	ldrb	r3, [r3, #2]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d002      	beq.n	8006e8a <USBH_CtlReq+0x20>
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d00f      	beq.n	8006ea8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006e88:	e027      	b.n	8006eda <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	88fa      	ldrh	r2, [r7, #6]
 8006e94:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea6:	e018      	b.n	8006eda <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f81b 	bl	8006ee4 <USBH_HandleControl>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <USBH_CtlReq+0x54>
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d106      	bne.n	8006ecc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	761a      	strb	r2, [r3, #24]
      break;
 8006eca:	e005      	b.n	8006ed8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d102      	bne.n	8006ed8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	709a      	strb	r2, [r3, #2]
      break;
 8006ed8:	bf00      	nop
  }
  return status;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006eec:	2301      	movs	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	7e1b      	ldrb	r3, [r3, #24]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	2b0a      	cmp	r3, #10
 8006efc:	f200 8156 	bhi.w	80071ac <USBH_HandleControl+0x2c8>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <USBH_HandleControl+0x24>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f4f 	.word	0x08006f4f
 8006f10:	08006fb9 	.word	0x08006fb9
 8006f14:	08006fdf 	.word	0x08006fdf
 8006f18:	08007017 	.word	0x08007017
 8006f1c:	08007041 	.word	0x08007041
 8006f20:	08007093 	.word	0x08007093
 8006f24:	080070b5 	.word	0x080070b5
 8006f28:	080070f1 	.word	0x080070f1
 8006f2c:	08007117 	.word	0x08007117
 8006f30:	08007155 	.word	0x08007155
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f103 0110 	add.w	r1, r3, #16
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	795b      	ldrb	r3, [r3, #5]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f943 	bl	80071cc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	761a      	strb	r2, [r3, #24]
      break;
 8006f4c:	e139      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	795b      	ldrb	r3, [r3, #5]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fcc5 	bl	80078e4 <USBH_LL_GetURBState>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d11e      	bne.n	8006fa2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	7c1b      	ldrb	r3, [r3, #16]
 8006f68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f6c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8adb      	ldrh	r3, [r3, #22]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006f76:	7b7b      	ldrb	r3, [r7, #13]
 8006f78:	2b80      	cmp	r3, #128	; 0x80
 8006f7a:	d103      	bne.n	8006f84 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2203      	movs	r2, #3
 8006f80:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f82:	e115      	b.n	80071b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2205      	movs	r2, #5
 8006f88:	761a      	strb	r2, [r3, #24]
      break;
 8006f8a:	e111      	b.n	80071b0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006f8c:	7b7b      	ldrb	r3, [r7, #13]
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d103      	bne.n	8006f9a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2209      	movs	r2, #9
 8006f96:	761a      	strb	r2, [r3, #24]
      break;
 8006f98:	e10a      	b.n	80071b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2207      	movs	r2, #7
 8006f9e:	761a      	strb	r2, [r3, #24]
      break;
 8006fa0:	e106      	b.n	80071b0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d003      	beq.n	8006fb0 <USBH_HandleControl+0xcc>
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	f040 8100 	bne.w	80071b0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	220b      	movs	r2, #11
 8006fb4:	761a      	strb	r2, [r3, #24]
      break;
 8006fb6:	e0fb      	b.n	80071b0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6899      	ldr	r1, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	899a      	ldrh	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	791b      	ldrb	r3, [r3, #4]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f93a 	bl	800724a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	761a      	strb	r2, [r3, #24]
      break;
 8006fdc:	e0f1      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc7d 	bl	80078e4 <USBH_LL_GetURBState>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d102      	bne.n	8006ffa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2209      	movs	r2, #9
 8006ff8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d102      	bne.n	8007006 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007000:	2303      	movs	r3, #3
 8007002:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007004:	e0d6      	b.n	80071b4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b04      	cmp	r3, #4
 800700a:	f040 80d3 	bne.w	80071b4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	220b      	movs	r2, #11
 8007012:	761a      	strb	r2, [r3, #24]
      break;
 8007014:	e0ce      	b.n	80071b4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6899      	ldr	r1, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	899a      	ldrh	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	795b      	ldrb	r3, [r3, #5]
 8007022:	2001      	movs	r0, #1
 8007024:	9000      	str	r0, [sp, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8ea 	bl	8007200 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007032:	b29a      	uxth	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2206      	movs	r2, #6
 800703c:	761a      	strb	r2, [r3, #24]
      break;
 800703e:	e0c0      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	795b      	ldrb	r3, [r3, #5]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fc4c 	bl	80078e4 <USBH_LL_GetURBState>
 800704c:	4603      	mov	r3, r0
 800704e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d103      	bne.n	800705e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2207      	movs	r2, #7
 800705a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800705c:	e0ac      	b.n	80071b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b05      	cmp	r3, #5
 8007062:	d105      	bne.n	8007070 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	220c      	movs	r2, #12
 8007068:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800706a:	2303      	movs	r3, #3
 800706c:	73fb      	strb	r3, [r7, #15]
      break;
 800706e:	e0a3      	b.n	80071b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d103      	bne.n	800707e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2205      	movs	r2, #5
 800707a:	761a      	strb	r2, [r3, #24]
      break;
 800707c:	e09c      	b.n	80071b8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b04      	cmp	r3, #4
 8007082:	f040 8099 	bne.w	80071b8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	220b      	movs	r2, #11
 800708a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800708c:	2302      	movs	r3, #2
 800708e:	73fb      	strb	r3, [r7, #15]
      break;
 8007090:	e092      	b.n	80071b8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	791b      	ldrb	r3, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	2100      	movs	r1, #0
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f8d5 	bl	800724a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2208      	movs	r2, #8
 80070b0:	761a      	strb	r2, [r3, #24]

      break;
 80070b2:	e086      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	791b      	ldrb	r3, [r3, #4]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc12 	bl	80078e4 <USBH_LL_GetURBState>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d105      	bne.n	80070d6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	220d      	movs	r2, #13
 80070ce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070d4:	e072      	b.n	80071bc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d103      	bne.n	80070e4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	220b      	movs	r2, #11
 80070e0:	761a      	strb	r2, [r3, #24]
      break;
 80070e2:	e06b      	b.n	80071bc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d168      	bne.n	80071bc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80070ea:	2303      	movs	r3, #3
 80070ec:	73fb      	strb	r3, [r7, #15]
      break;
 80070ee:	e065      	b.n	80071bc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	795b      	ldrb	r3, [r3, #5]
 80070f4:	2201      	movs	r2, #1
 80070f6:	9200      	str	r2, [sp, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f87f 	bl	8007200 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007108:	b29a      	uxth	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	220a      	movs	r2, #10
 8007112:	761a      	strb	r2, [r3, #24]
      break;
 8007114:	e055      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	795b      	ldrb	r3, [r3, #5]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fbe1 	bl	80078e4 <USBH_LL_GetURBState>
 8007122:	4603      	mov	r3, r0
 8007124:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d105      	bne.n	8007138 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	220d      	movs	r2, #13
 8007134:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007136:	e043      	b.n	80071c0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d103      	bne.n	8007146 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2209      	movs	r2, #9
 8007142:	761a      	strb	r2, [r3, #24]
      break;
 8007144:	e03c      	b.n	80071c0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	2b04      	cmp	r3, #4
 800714a:	d139      	bne.n	80071c0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	220b      	movs	r2, #11
 8007150:	761a      	strb	r2, [r3, #24]
      break;
 8007152:	e035      	b.n	80071c0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7e5b      	ldrb	r3, [r3, #25]
 8007158:	3301      	adds	r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	765a      	strb	r2, [r3, #25]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7e5b      	ldrb	r3, [r3, #25]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d806      	bhi.n	8007176 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007174:	e025      	b.n	80071c2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800717c:	2106      	movs	r1, #6
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	795b      	ldrb	r3, [r3, #5]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f90c 	bl	80073ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	791b      	ldrb	r3, [r3, #4]
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f906 	bl	80073ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80071a6:	2302      	movs	r3, #2
 80071a8:	73fb      	strb	r3, [r7, #15]
      break;
 80071aa:	e00a      	b.n	80071c2 <USBH_HandleControl+0x2de>

    default:
      break;
 80071ac:	bf00      	nop
 80071ae:	e008      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071b0:	bf00      	nop
 80071b2:	e006      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071b4:	bf00      	nop
 80071b6:	e004      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071b8:	bf00      	nop
 80071ba:	e002      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071c0:	bf00      	nop
  }

  return status;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af04      	add	r7, sp, #16
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	4613      	mov	r3, r2
 80071d8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071da:	79f9      	ldrb	r1, [r7, #7]
 80071dc:	2300      	movs	r3, #0
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	2308      	movs	r3, #8
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	2300      	movs	r3, #0
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	2300      	movs	r3, #0
 80071ee:	2200      	movs	r2, #0
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fb46 	bl	8007882 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af04      	add	r7, sp, #16
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4611      	mov	r1, r2
 800720c:	461a      	mov	r2, r3
 800720e:	460b      	mov	r3, r1
 8007210:	80fb      	strh	r3, [r7, #6]
 8007212:	4613      	mov	r3, r2
 8007214:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007224:	7979      	ldrb	r1, [r7, #5]
 8007226:	7e3b      	ldrb	r3, [r7, #24]
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	2301      	movs	r3, #1
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	2300      	movs	r3, #0
 8007238:	2200      	movs	r2, #0
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fb21 	bl	8007882 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b088      	sub	sp, #32
 800724e:	af04      	add	r7, sp, #16
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	4611      	mov	r1, r2
 8007256:	461a      	mov	r2, r3
 8007258:	460b      	mov	r3, r1
 800725a:	80fb      	strh	r3, [r7, #6]
 800725c:	4613      	mov	r3, r2
 800725e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007260:	7979      	ldrb	r1, [r7, #5]
 8007262:	2300      	movs	r3, #0
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	2301      	movs	r3, #1
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2300      	movs	r3, #0
 8007274:	2201      	movs	r2, #1
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fb03 	bl	8007882 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800727c:	2300      	movs	r3, #0

}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b088      	sub	sp, #32
 800728a:	af04      	add	r7, sp, #16
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	4611      	mov	r1, r2
 8007292:	461a      	mov	r2, r3
 8007294:	460b      	mov	r3, r1
 8007296:	80fb      	strh	r3, [r7, #6]
 8007298:	4613      	mov	r3, r2
 800729a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072aa:	7979      	ldrb	r1, [r7, #5]
 80072ac:	7e3b      	ldrb	r3, [r7, #24]
 80072ae:	9303      	str	r3, [sp, #12]
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	9302      	str	r3, [sp, #8]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	2301      	movs	r3, #1
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2302      	movs	r3, #2
 80072be:	2200      	movs	r2, #0
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fade 	bl	8007882 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af04      	add	r7, sp, #16
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	460b      	mov	r3, r1
 80072e0:	80fb      	strh	r3, [r7, #6]
 80072e2:	4613      	mov	r3, r2
 80072e4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072e6:	7979      	ldrb	r1, [r7, #5]
 80072e8:	2300      	movs	r3, #0
 80072ea:	9303      	str	r3, [sp, #12]
 80072ec:	88fb      	ldrh	r3, [r7, #6]
 80072ee:	9302      	str	r3, [sp, #8]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	2301      	movs	r3, #1
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	2302      	movs	r3, #2
 80072fa:	2201      	movs	r2, #1
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fac0 	bl	8007882 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af04      	add	r7, sp, #16
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	461a      	mov	r2, r3
 800731a:	4603      	mov	r3, r0
 800731c:	70fb      	strb	r3, [r7, #3]
 800731e:	460b      	mov	r3, r1
 8007320:	70bb      	strb	r3, [r7, #2]
 8007322:	4613      	mov	r3, r2
 8007324:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007326:	7878      	ldrb	r0, [r7, #1]
 8007328:	78ba      	ldrb	r2, [r7, #2]
 800732a:	78f9      	ldrb	r1, [r7, #3]
 800732c:	8b3b      	ldrh	r3, [r7, #24]
 800732e:	9302      	str	r3, [sp, #8]
 8007330:	7d3b      	ldrb	r3, [r7, #20]
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	7c3b      	ldrb	r3, [r7, #16]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	4603      	mov	r3, r0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa53 	bl	80077e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fa72 	bl	8007844 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f836 	bl	80073e8 <USBH_GetFreePipe>
 800737c:	4603      	mov	r3, r0
 800737e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007386:	4293      	cmp	r3, r2
 8007388:	d00a      	beq.n	80073a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	89fb      	ldrh	r3, [r7, #14]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	33e0      	adds	r3, #224	; 0xe0
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	b2db      	uxtb	r3, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	2b0a      	cmp	r3, #10
 80073bc:	d80d      	bhi.n	80073da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	33e0      	adds	r3, #224	; 0xe0
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	33e0      	adds	r3, #224	; 0xe0
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	440b      	add	r3, r1
 80073d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
 80073f8:	e00f      	b.n	800741a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	33e0      	adds	r3, #224	; 0xe0
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	b29b      	uxth	r3, r3
 8007412:	e007      	b.n	8007424 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	3301      	adds	r3, #1
 8007418:	73fb      	strb	r3, [r7, #15]
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b0a      	cmp	r3, #10
 800741e:	d9ec      	bls.n	80073fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007420:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007434:	2201      	movs	r2, #1
 8007436:	490e      	ldr	r1, [pc, #56]	; (8007470 <MX_USB_HOST_Init+0x40>)
 8007438:	480e      	ldr	r0, [pc, #56]	; (8007474 <MX_USB_HOST_Init+0x44>)
 800743a:	f7fe fca1 	bl	8005d80 <USBH_Init>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007444:	f7f9 fa70 	bl	8000928 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007448:	490b      	ldr	r1, [pc, #44]	; (8007478 <MX_USB_HOST_Init+0x48>)
 800744a:	480a      	ldr	r0, [pc, #40]	; (8007474 <MX_USB_HOST_Init+0x44>)
 800744c:	f7fe fd26 	bl	8005e9c <USBH_RegisterClass>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007456:	f7f9 fa67 	bl	8000928 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800745a:	4806      	ldr	r0, [pc, #24]	; (8007474 <MX_USB_HOST_Init+0x44>)
 800745c:	f7fe fdaa 	bl	8005fb4 <USBH_Start>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007466:	f7f9 fa5f 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800746a:	bf00      	nop
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	08007491 	.word	0x08007491
 8007474:	200001b4 	.word	0x200001b4
 8007478:	2000000c 	.word	0x2000000c

0800747c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007480:	4802      	ldr	r0, [pc, #8]	; (800748c <MX_USB_HOST_Process+0x10>)
 8007482:	f7fe fda7 	bl	8005fd4 <USBH_Process>
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200001b4 	.word	0x200001b4

08007490 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d819      	bhi.n	80074d8 <USBH_UserProcess+0x48>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <USBH_UserProcess+0x1c>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	080074c9 	.word	0x080074c9
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074d1 	.word	0x080074d1
 80074bc:	080074c1 	.word	0x080074c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80074c0:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <USBH_UserProcess+0x58>)
 80074c2:	2203      	movs	r2, #3
 80074c4:	701a      	strb	r2, [r3, #0]
  break;
 80074c6:	e008      	b.n	80074da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80074c8:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <USBH_UserProcess+0x58>)
 80074ca:	2202      	movs	r2, #2
 80074cc:	701a      	strb	r2, [r3, #0]
  break;
 80074ce:	e004      	b.n	80074da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <USBH_UserProcess+0x58>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
  break;
 80074d6:	e000      	b.n	80074da <USBH_UserProcess+0x4a>

  default:
  break;
 80074d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	200001a4 	.word	0x200001a4

080074ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f4:	f107 0314 	add.w	r3, r7, #20
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	605a      	str	r2, [r3, #4]
 80074fe:	609a      	str	r2, [r3, #8]
 8007500:	60da      	str	r2, [r3, #12]
 8007502:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800750c:	d147      	bne.n	800759e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	4a24      	ldr	r2, [pc, #144]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	6313      	str	r3, [r2, #48]	; 0x30
 800751e:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800752a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800752e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007530:	2300      	movs	r3, #0
 8007532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	4619      	mov	r1, r3
 800753e:	481b      	ldr	r0, [pc, #108]	; (80075ac <HAL_HCD_MspInit+0xc0>)
 8007540:	f7f9 fd7e 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007544:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754a:	2302      	movs	r3, #2
 800754c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007552:	2300      	movs	r3, #0
 8007554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007556:	230a      	movs	r3, #10
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800755a:	f107 0314 	add.w	r3, r7, #20
 800755e:	4619      	mov	r1, r3
 8007560:	4812      	ldr	r0, [pc, #72]	; (80075ac <HAL_HCD_MspInit+0xc0>)
 8007562:	f7f9 fd6d 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007566:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756a:	4a0f      	ldr	r2, [pc, #60]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 800756c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007570:	6353      	str	r3, [r2, #52]	; 0x34
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	4a0b      	ldr	r2, [pc, #44]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 800757c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007580:	6453      	str	r3, [r2, #68]	; 0x44
 8007582:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800758e:	2200      	movs	r2, #0
 8007590:	2100      	movs	r1, #0
 8007592:	2043      	movs	r0, #67	; 0x43
 8007594:	f7f9 fd1d 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007598:	2043      	movs	r0, #67	; 0x43
 800759a:	f7f9 fd36 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800759e:	bf00      	nop
 80075a0:	3728      	adds	r7, #40	; 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	40023800 	.word	0x40023800
 80075ac:	40020000 	.word	0x40020000

080075b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff f8db 	bl	800677a <USBH_LL_IncTimer>
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff f913 	bl	8006806 <USBH_LL_Connect>
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff f91c 	bl	8006834 <USBH_LL_Disconnect>
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
 8007610:	4613      	mov	r3, r2
 8007612:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff f8cd 	bl	80067ce <USBH_LL_PortEnabled>
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff f8cd 	bl	80067ea <USBH_LL_PortDisabled>
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007666:	2b01      	cmp	r3, #1
 8007668:	d12a      	bne.n	80076c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800766a:	4a18      	ldr	r2, [pc, #96]	; (80076cc <USBH_LL_Init+0x74>)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <USBH_LL_Init+0x74>)
 8007676:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800767a:	4b14      	ldr	r3, [pc, #80]	; (80076cc <USBH_LL_Init+0x74>)
 800767c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007680:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007682:	4b12      	ldr	r3, [pc, #72]	; (80076cc <USBH_LL_Init+0x74>)
 8007684:	2208      	movs	r2, #8
 8007686:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <USBH_LL_Init+0x74>)
 800768a:	2201      	movs	r2, #1
 800768c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800768e:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <USBH_LL_Init+0x74>)
 8007690:	2200      	movs	r2, #0
 8007692:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <USBH_LL_Init+0x74>)
 8007696:	2202      	movs	r2, #2
 8007698:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800769a:	4b0c      	ldr	r3, [pc, #48]	; (80076cc <USBH_LL_Init+0x74>)
 800769c:	2200      	movs	r2, #0
 800769e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80076a0:	480a      	ldr	r0, [pc, #40]	; (80076cc <USBH_LL_Init+0x74>)
 80076a2:	f7f9 fe9c 	bl	80013de <HAL_HCD_Init>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80076ac:	f7f9 f93c 	bl	8000928 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80076b0:	4806      	ldr	r0, [pc, #24]	; (80076cc <USBH_LL_Init+0x74>)
 80076b2:	f7fa fa80 	bl	8001bb6 <HAL_HCD_GetCurrentFrame>
 80076b6:	4603      	mov	r3, r0
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff f84e 	bl	800675c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	2000058c 	.word	0x2000058c

080076d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fa f9ef 	bl	8001aca <HAL_HCD_Start>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f95c 	bl	80079b0 <USBH_Get_USB_Status>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800771c:	4618      	mov	r0, r3
 800771e:	f7fa f9f7 	bl	8001b10 <HAL_HCD_Stop>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	4618      	mov	r0, r3
 800772a:	f000 f941 	bl	80079b0 <USBH_Get_USB_Status>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007732:	7bbb      	ldrb	r3, [r7, #14]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800774e:	4618      	mov	r0, r3
 8007750:	f7fa fa3f 	bl	8001bd2 <HAL_HCD_GetCurrentSpeed>
 8007754:	4603      	mov	r3, r0
 8007756:	2b02      	cmp	r3, #2
 8007758:	d00c      	beq.n	8007774 <USBH_LL_GetSpeed+0x38>
 800775a:	2b02      	cmp	r3, #2
 800775c:	d80d      	bhi.n	800777a <USBH_LL_GetSpeed+0x3e>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <USBH_LL_GetSpeed+0x2c>
 8007762:	2b01      	cmp	r3, #1
 8007764:	d003      	beq.n	800776e <USBH_LL_GetSpeed+0x32>
 8007766:	e008      	b.n	800777a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
    break;
 800776c:	e008      	b.n	8007780 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800776e:	2301      	movs	r3, #1
 8007770:	73fb      	strb	r3, [r7, #15]
    break;
 8007772:	e005      	b.n	8007780 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007774:	2302      	movs	r3, #2
 8007776:	73fb      	strb	r3, [r7, #15]
    break;
 8007778:	e002      	b.n	8007780 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
    break;
 800777e:	bf00      	nop
  }
  return  speed;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fa f9d2 	bl	8001b4a <HAL_HCD_ResetPort>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f8ff 	bl	80079b0 <USBH_Get_USB_Status>
 80077b2:	4603      	mov	r3, r0
 80077b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	4611      	mov	r1, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fa f9d9 	bl	8001b8e <HAL_HCD_HC_GetXferCount>
 80077dc:	4603      	mov	r3, r0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80077e6:	b590      	push	{r4, r7, lr}
 80077e8:	b089      	sub	sp, #36	; 0x24
 80077ea:	af04      	add	r7, sp, #16
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	4608      	mov	r0, r1
 80077f0:	4611      	mov	r1, r2
 80077f2:	461a      	mov	r2, r3
 80077f4:	4603      	mov	r3, r0
 80077f6:	70fb      	strb	r3, [r7, #3]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70bb      	strb	r3, [r7, #2]
 80077fc:	4613      	mov	r3, r2
 80077fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800780e:	787c      	ldrb	r4, [r7, #1]
 8007810:	78ba      	ldrb	r2, [r7, #2]
 8007812:	78f9      	ldrb	r1, [r7, #3]
 8007814:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007816:	9302      	str	r3, [sp, #8]
 8007818:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	4623      	mov	r3, r4
 8007826:	f7f9 fe3c 	bl	80014a2 <HAL_HCD_HC_Init>
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	4618      	mov	r0, r3
 8007832:	f000 f8bd 	bl	80079b0 <USBH_Get_USB_Status>
 8007836:	4603      	mov	r3, r0
 8007838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800783a:	7bbb      	ldrb	r3, [r7, #14]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	bd90      	pop	{r4, r7, pc}

08007844 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7f9 feac 	bl	80015c0 <HAL_HCD_HC_Halt>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f89e 	bl	80079b0 <USBH_Get_USB_Status>
 8007874:	4603      	mov	r3, r0
 8007876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007878:	7bbb      	ldrb	r3, [r7, #14]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007882:	b590      	push	{r4, r7, lr}
 8007884:	b089      	sub	sp, #36	; 0x24
 8007886:	af04      	add	r7, sp, #16
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	4608      	mov	r0, r1
 800788c:	4611      	mov	r1, r2
 800788e:	461a      	mov	r2, r3
 8007890:	4603      	mov	r3, r0
 8007892:	70fb      	strb	r3, [r7, #3]
 8007894:	460b      	mov	r3, r1
 8007896:	70bb      	strb	r3, [r7, #2]
 8007898:	4613      	mov	r3, r2
 800789a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078aa:	787c      	ldrb	r4, [r7, #1]
 80078ac:	78ba      	ldrb	r2, [r7, #2]
 80078ae:	78f9      	ldrb	r1, [r7, #3]
 80078b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078b4:	9303      	str	r3, [sp, #12]
 80078b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078b8:	9302      	str	r3, [sp, #8]
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	4623      	mov	r3, r4
 80078c6:	f7f9 fe9f 	bl	8001608 <HAL_HCD_HC_SubmitRequest>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 f86d 	bl	80079b0 <USBH_Get_USB_Status>
 80078d6:	4603      	mov	r3, r0
 80078d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078da:	7bbb      	ldrb	r3, [r7, #14]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd90      	pop	{r4, r7, pc}

080078e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fa f933 	bl	8001b66 <HAL_HCD_HC_GetURBState>
 8007900:	4603      	mov	r3, r0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800791c:	2b01      	cmp	r3, #1
 800791e:	d103      	bne.n	8007928 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	4618      	mov	r0, r3
 8007924:	f000 f870 	bl	8007a08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007928:	20c8      	movs	r0, #200	; 0xc8
 800792a:	f7f9 fa53 	bl	8000dd4 <HAL_Delay>
  return USBH_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
 8007944:	4613      	mov	r3, r2
 8007946:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800794e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	212c      	movs	r1, #44	; 0x2c
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	4413      	add	r3, r2
 800795c:	333b      	adds	r3, #59	; 0x3b
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	212c      	movs	r1, #44	; 0x2c
 800796a:	fb01 f303 	mul.w	r3, r1, r3
 800796e:	4413      	add	r3, r2
 8007970:	3354      	adds	r3, #84	; 0x54
 8007972:	78ba      	ldrb	r2, [r7, #2]
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e008      	b.n	800798a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	212c      	movs	r1, #44	; 0x2c
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	4413      	add	r3, r2
 8007984:	3355      	adds	r3, #85	; 0x55
 8007986:	78ba      	ldrb	r2, [r7, #2]
 8007988:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7f9 fa17 	bl	8000dd4 <HAL_Delay>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d817      	bhi.n	80079f4 <USBH_Get_USB_Status+0x44>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <USBH_Get_USB_Status+0x1c>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	080079e3 	.word	0x080079e3
 80079d4:	080079e9 	.word	0x080079e9
 80079d8:	080079ef 	.word	0x080079ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]
    break;
 80079e0:	e00b      	b.n	80079fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80079e2:	2302      	movs	r3, #2
 80079e4:	73fb      	strb	r3, [r7, #15]
    break;
 80079e6:	e008      	b.n	80079fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
    break;
 80079ec:	e005      	b.n	80079fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80079ee:	2302      	movs	r3, #2
 80079f0:	73fb      	strb	r3, [r7, #15]
    break;
 80079f2:	e002      	b.n	80079fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80079f4:	2302      	movs	r3, #2
 80079f6:	73fb      	strb	r3, [r7, #15]
    break;
 80079f8:	bf00      	nop
  }
  return usb_status;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	e001      	b.n	8007a26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007a22:	2301      	movs	r3, #1
 8007a24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4803      	ldr	r0, [pc, #12]	; (8007a3c <MX_DriverVbusFS+0x34>)
 8007a2e:	f7f9 fca3 	bl	8001378 <HAL_GPIO_WritePin>
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40020800 	.word	0x40020800

08007a40 <__errno>:
 8007a40:	4b01      	ldr	r3, [pc, #4]	; (8007a48 <__errno+0x8>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	2000002c 	.word	0x2000002c

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4d0d      	ldr	r5, [pc, #52]	; (8007a84 <__libc_init_array+0x38>)
 8007a50:	4c0d      	ldr	r4, [pc, #52]	; (8007a88 <__libc_init_array+0x3c>)
 8007a52:	1b64      	subs	r4, r4, r5
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	2600      	movs	r6, #0
 8007a58:	42a6      	cmp	r6, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	4d0b      	ldr	r5, [pc, #44]	; (8007a8c <__libc_init_array+0x40>)
 8007a5e:	4c0c      	ldr	r4, [pc, #48]	; (8007a90 <__libc_init_array+0x44>)
 8007a60:	f000 f8f8 	bl	8007c54 <_init>
 8007a64:	1b64      	subs	r4, r4, r5
 8007a66:	10a4      	asrs	r4, r4, #2
 8007a68:	2600      	movs	r6, #0
 8007a6a:	42a6      	cmp	r6, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a74:	4798      	blx	r3
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7e:	4798      	blx	r3
 8007a80:	3601      	adds	r6, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	08007c90 	.word	0x08007c90
 8007a88:	08007c90 	.word	0x08007c90
 8007a8c:	08007c90 	.word	0x08007c90
 8007a90:	08007c94 	.word	0x08007c94

08007a94 <malloc>:
 8007a94:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <malloc+0xc>)
 8007a96:	4601      	mov	r1, r0
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	f000 b863 	b.w	8007b64 <_malloc_r>
 8007a9e:	bf00      	nop
 8007aa0:	2000002c 	.word	0x2000002c

08007aa4 <free>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <free+0xc>)
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f000 b80b 	b.w	8007ac4 <_free_r>
 8007aae:	bf00      	nop
 8007ab0:	2000002c 	.word	0x2000002c

08007ab4 <memset>:
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d100      	bne.n	8007abe <memset+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac2:	e7f9      	b.n	8007ab8 <memset+0x4>

08007ac4 <_free_r>:
 8007ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ac6:	2900      	cmp	r1, #0
 8007ac8:	d048      	beq.n	8007b5c <_free_r+0x98>
 8007aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ace:	9001      	str	r0, [sp, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ad6:	bfb8      	it	lt
 8007ad8:	18e4      	addlt	r4, r4, r3
 8007ada:	f000 f8ad 	bl	8007c38 <__malloc_lock>
 8007ade:	4a20      	ldr	r2, [pc, #128]	; (8007b60 <_free_r+0x9c>)
 8007ae0:	9801      	ldr	r0, [sp, #4]
 8007ae2:	6813      	ldr	r3, [r2, #0]
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	b933      	cbnz	r3, 8007af6 <_free_r+0x32>
 8007ae8:	6063      	str	r3, [r4, #4]
 8007aea:	6014      	str	r4, [r2, #0]
 8007aec:	b003      	add	sp, #12
 8007aee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af2:	f000 b8a7 	b.w	8007c44 <__malloc_unlock>
 8007af6:	42a3      	cmp	r3, r4
 8007af8:	d90b      	bls.n	8007b12 <_free_r+0x4e>
 8007afa:	6821      	ldr	r1, [r4, #0]
 8007afc:	1862      	adds	r2, r4, r1
 8007afe:	4293      	cmp	r3, r2
 8007b00:	bf04      	itt	eq
 8007b02:	681a      	ldreq	r2, [r3, #0]
 8007b04:	685b      	ldreq	r3, [r3, #4]
 8007b06:	6063      	str	r3, [r4, #4]
 8007b08:	bf04      	itt	eq
 8007b0a:	1852      	addeq	r2, r2, r1
 8007b0c:	6022      	streq	r2, [r4, #0]
 8007b0e:	602c      	str	r4, [r5, #0]
 8007b10:	e7ec      	b.n	8007aec <_free_r+0x28>
 8007b12:	461a      	mov	r2, r3
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	b10b      	cbz	r3, 8007b1c <_free_r+0x58>
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	d9fa      	bls.n	8007b12 <_free_r+0x4e>
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	1855      	adds	r5, r2, r1
 8007b20:	42a5      	cmp	r5, r4
 8007b22:	d10b      	bne.n	8007b3c <_free_r+0x78>
 8007b24:	6824      	ldr	r4, [r4, #0]
 8007b26:	4421      	add	r1, r4
 8007b28:	1854      	adds	r4, r2, r1
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	d1dd      	bne.n	8007aec <_free_r+0x28>
 8007b30:	681c      	ldr	r4, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	6053      	str	r3, [r2, #4]
 8007b36:	4421      	add	r1, r4
 8007b38:	6011      	str	r1, [r2, #0]
 8007b3a:	e7d7      	b.n	8007aec <_free_r+0x28>
 8007b3c:	d902      	bls.n	8007b44 <_free_r+0x80>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	e7d3      	b.n	8007aec <_free_r+0x28>
 8007b44:	6825      	ldr	r5, [r4, #0]
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf04      	itt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	bf04      	itt	eq
 8007b54:	1949      	addeq	r1, r1, r5
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	6054      	str	r4, [r2, #4]
 8007b5a:	e7c7      	b.n	8007aec <_free_r+0x28>
 8007b5c:	b003      	add	sp, #12
 8007b5e:	bd30      	pop	{r4, r5, pc}
 8007b60:	200001a8 	.word	0x200001a8

08007b64 <_malloc_r>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	1ccd      	adds	r5, r1, #3
 8007b68:	f025 0503 	bic.w	r5, r5, #3
 8007b6c:	3508      	adds	r5, #8
 8007b6e:	2d0c      	cmp	r5, #12
 8007b70:	bf38      	it	cc
 8007b72:	250c      	movcc	r5, #12
 8007b74:	2d00      	cmp	r5, #0
 8007b76:	4606      	mov	r6, r0
 8007b78:	db01      	blt.n	8007b7e <_malloc_r+0x1a>
 8007b7a:	42a9      	cmp	r1, r5
 8007b7c:	d903      	bls.n	8007b86 <_malloc_r+0x22>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	2000      	movs	r0, #0
 8007b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b86:	f000 f857 	bl	8007c38 <__malloc_lock>
 8007b8a:	4921      	ldr	r1, [pc, #132]	; (8007c10 <_malloc_r+0xac>)
 8007b8c:	680a      	ldr	r2, [r1, #0]
 8007b8e:	4614      	mov	r4, r2
 8007b90:	b99c      	cbnz	r4, 8007bba <_malloc_r+0x56>
 8007b92:	4f20      	ldr	r7, [pc, #128]	; (8007c14 <_malloc_r+0xb0>)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	b923      	cbnz	r3, 8007ba2 <_malloc_r+0x3e>
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f000 f83c 	bl	8007c18 <_sbrk_r>
 8007ba0:	6038      	str	r0, [r7, #0]
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f000 f837 	bl	8007c18 <_sbrk_r>
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	d123      	bne.n	8007bf6 <_malloc_r+0x92>
 8007bae:	230c      	movs	r3, #12
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f000 f846 	bl	8007c44 <__malloc_unlock>
 8007bb8:	e7e3      	b.n	8007b82 <_malloc_r+0x1e>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	1b5b      	subs	r3, r3, r5
 8007bbe:	d417      	bmi.n	8007bf0 <_malloc_r+0x8c>
 8007bc0:	2b0b      	cmp	r3, #11
 8007bc2:	d903      	bls.n	8007bcc <_malloc_r+0x68>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	441c      	add	r4, r3
 8007bc8:	6025      	str	r5, [r4, #0]
 8007bca:	e004      	b.n	8007bd6 <_malloc_r+0x72>
 8007bcc:	6863      	ldr	r3, [r4, #4]
 8007bce:	42a2      	cmp	r2, r4
 8007bd0:	bf0c      	ite	eq
 8007bd2:	600b      	streq	r3, [r1, #0]
 8007bd4:	6053      	strne	r3, [r2, #4]
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f000 f834 	bl	8007c44 <__malloc_unlock>
 8007bdc:	f104 000b 	add.w	r0, r4, #11
 8007be0:	1d23      	adds	r3, r4, #4
 8007be2:	f020 0007 	bic.w	r0, r0, #7
 8007be6:	1ac2      	subs	r2, r0, r3
 8007be8:	d0cc      	beq.n	8007b84 <_malloc_r+0x20>
 8007bea:	1a1b      	subs	r3, r3, r0
 8007bec:	50a3      	str	r3, [r4, r2]
 8007bee:	e7c9      	b.n	8007b84 <_malloc_r+0x20>
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	6864      	ldr	r4, [r4, #4]
 8007bf4:	e7cc      	b.n	8007b90 <_malloc_r+0x2c>
 8007bf6:	1cc4      	adds	r4, r0, #3
 8007bf8:	f024 0403 	bic.w	r4, r4, #3
 8007bfc:	42a0      	cmp	r0, r4
 8007bfe:	d0e3      	beq.n	8007bc8 <_malloc_r+0x64>
 8007c00:	1a21      	subs	r1, r4, r0
 8007c02:	4630      	mov	r0, r6
 8007c04:	f000 f808 	bl	8007c18 <_sbrk_r>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d1dd      	bne.n	8007bc8 <_malloc_r+0x64>
 8007c0c:	e7cf      	b.n	8007bae <_malloc_r+0x4a>
 8007c0e:	bf00      	nop
 8007c10:	200001a8 	.word	0x200001a8
 8007c14:	200001ac 	.word	0x200001ac

08007c18 <_sbrk_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d06      	ldr	r5, [pc, #24]	; (8007c34 <_sbrk_r+0x1c>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	f7f8 fff2 	bl	8000c0c <_sbrk>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_sbrk_r+0x1a>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_sbrk_r+0x1a>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	20000890 	.word	0x20000890

08007c38 <__malloc_lock>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__malloc_lock+0x8>)
 8007c3a:	f000 b809 	b.w	8007c50 <__retarget_lock_acquire_recursive>
 8007c3e:	bf00      	nop
 8007c40:	20000898 	.word	0x20000898

08007c44 <__malloc_unlock>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__malloc_unlock+0x8>)
 8007c46:	f000 b804 	b.w	8007c52 <__retarget_lock_release_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	20000898 	.word	0x20000898

08007c50 <__retarget_lock_acquire_recursive>:
 8007c50:	4770      	bx	lr

08007c52 <__retarget_lock_release_recursive>:
 8007c52:	4770      	bx	lr

08007c54 <_init>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	bf00      	nop
 8007c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5a:	bc08      	pop	{r3}
 8007c5c:	469e      	mov	lr, r3
 8007c5e:	4770      	bx	lr

08007c60 <_fini>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	bf00      	nop
 8007c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c66:	bc08      	pop	{r3}
 8007c68:	469e      	mov	lr, r3
 8007c6a:	4770      	bx	lr
